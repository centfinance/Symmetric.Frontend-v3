{"version":3,"file":"voting.provider-3f46e556.js","sources":["../../src/components/contextual/pages/vebal/voting-utils.ts","../../src/composables/queries/useExpiredGaugesQuery.ts","../../src/components/contextual/pages/vebal/providers/voting.provider.ts"],"sourcesContent":["import { VotingPool } from '@/composables/queries/useVotingPoolsQuery';\nimport { FNumFormats, numF } from '@/composables/useNumbers';\nimport { oneSecondInMs, toUtcTime } from '@/composables/useTime';\nimport { WEIGHT_VOTE_DELAY } from '@/constants/gauge-controller';\nimport { bnum, isSameAddress, scale } from '@/lib/utils';\nimport { BigNumber } from '@ethersproject/bignumber';\nimport { differenceInWeeks, format } from 'date-fns';\n\n/*\n * Common pure functions used by different composables in the veBAL voting feature\n */\nexport function isGaugeNew(pool: VotingPool): boolean {\n  const addedTimestamp = pool.gauge.addedTimestamp;\n  if (!addedTimestamp) return false;\n  return differenceInWeeks(Date.now(), addedTimestamp * oneSecondInMs) < 2;\n}\n\nexport function isGaugeExpired(\n  expiredGauges: readonly string[] | undefined,\n  gaugeAddress: string\n): boolean {\n  if (!expiredGauges) return false;\n  return !!expiredGauges.some(item => isSameAddress(gaugeAddress, item));\n}\n\nexport function isPoolExpired(pool: VotingPool) {\n  return pool.gauge.isKilled;\n}\n\nexport function hasOnlyExpiredPools(\n  votingGauges: string[],\n  expiredGauges?: readonly string[]\n) {\n  if (!expiredGauges) return false;\n  return votingGauges.every(gaugeAddress =>\n    isGaugeExpired(expiredGauges, gaugeAddress)\n  );\n}\n\n// Vote weight is saved as basis points (bps) onchain (i.e. 20% is stored as 2000)\n// so we use this method to work with shares in the UI\nexport function bpsToShares(weight: string): string {\n  if (weight === '0') return '';\n  return scale(bnum(weight), -2).toString();\n}\n\nexport function sharesToBps(weight: string): BigNumber {\n  return BigNumber.from(scale(weight || '0', 2).toString());\n}\n\nexport function bpsToPercentage(weight: number, fNum): string {\n  return fNum(scale(bnum(weight), -4).toString(), FNumFormats.percent);\n}\n\nexport function formatVoteSharesWith2Decimals(weight: string) {\n  if (weight === '') return '0.00';\n  return numF(weight, { minimumFractionDigits: 2 });\n}\n\nexport function voteLockedUntilText() {\n  const unlockTime = Date.now() + WEIGHT_VOTE_DELAY;\n  return format(toUtcTime(new Date(unlockTime)), 'd LLLL y');\n}\n\nexport function hasUserVotes(pool: VotingPool): boolean {\n  return Number(pool.userVotes) > 0;\n}\n","import { getAddress } from '@ethersproject/address';\nimport { computed, reactive, Ref } from 'vue';\nimport { useQuery, UseQueryOptions } from '@tanstack/vue-query';\n\nimport QUERY_KEYS from '@/constants/queryKeys';\nimport { LiquidityGauge } from '@/services/balancer/contracts/contracts/liquidity-gauge';\nimport { Address } from '@/types';\n\nimport useNetwork from '../useNetwork';\n\n/**\n * TYPES\n */\ntype QueryResponse = Readonly<Address[]>;\ntype MulticallerResult = Record<Address, { isKilled: boolean }>;\ntype QueryOptions = UseQueryOptions<QueryResponse>;\n\nfunction callGaugesIsKilledStatus(\n  gaugeAddresses: Address[]\n): Promise<MulticallerResult> {\n  const multicaller = LiquidityGauge.getMulticaller();\n\n  for (const gaugeAddress of gaugeAddresses) {\n    multicaller.call(\n      `${getAddress(gaugeAddress)}.isKilled`,\n      getAddress(gaugeAddress),\n      'is_killed'\n    );\n  }\n  return multicaller.execute<MulticallerResult>();\n}\n\n/**\n * @summary Given a list of gauge addresses, fetches their is_killed status onchain\n * and returns the addresses that have is_killed status.\n */\nexport default function useExpiredGaugesQuery(\n  gaugeAddresses: Ref<Address[] | undefined>,\n  options: QueryOptions = {}\n) {\n  /**\n   * COMPOSABLES\n   */\n  const { networkId } = useNetwork();\n\n  /**\n   * COMPUTED\n   */\n  const isQueryEnabled = computed(() => {\n    return !!gaugeAddresses.value?.length;\n  });\n\n  /**\n   * QUERY KEY\n   */\n  const queryKey = reactive(\n    QUERY_KEYS.Gauges.Expired(gaugeAddresses, networkId)\n  );\n\n  /**\n   * QUERY FUNCTION\n   */\n  async function queryFn() {\n    const expiredGaugeAddresses: Address[] = [];\n    if (gaugeAddresses.value?.length) {\n      const gaugesExpiredStatus = await callGaugesIsKilledStatus(\n        gaugeAddresses.value\n      ).catch(error => {\n        console.error('Error when fetching voting gauges is_killed status', {\n          error,\n        });\n        return [];\n      });\n\n      for (const [address, value] of Object.entries(gaugesExpiredStatus)) {\n        if (value.isKilled) {\n          expiredGaugeAddresses.push(address);\n        }\n      }\n    }\n    return Object.freeze(\n      expiredGaugeAddresses.map(address => address.toLowerCase())\n    );\n  }\n\n  /**\n   * QUERY OPTIONS\n   */\n  const queryOptions = reactive({\n    enabled: isQueryEnabled,\n    ...options,\n  });\n  return useQuery<QueryResponse>(\n    queryKey,\n    queryFn,\n    queryOptions as QueryOptions\n  );\n}\n","import { safeInject } from '@/providers/inject';\nimport {\n  bpsToShares,\n  hasUserVotes,\n  isGaugeExpired,\n  isPoolExpired,\n} from '@/components/contextual/pages/vebal/voting-utils';\nimport useExpiredGaugesQuery from '@/composables/queries/useExpiredGaugesQuery';\nimport { VotingPool } from '@/composables/queries/useVotingPoolsQuery';\nimport { isVotingTimeLocked } from '@/composables/useVeBAL';\nimport useVotingPools from '@/composables/useVotingPools';\nimport symbolKeys from '@/constants/symbol.keys';\n\nimport { ConfirmedVotingRequest } from '@/components/contextual/pages/vebal/MultiVoting/composables/useVotingActions';\n\n// Global voting request shared between vebal and vebal-voting pages\nexport const votingRequest = ref<Record<string, string>>({});\n\n// Controls if the votingRequest should be loaded with user votes after the first load\nconst isVotingRequestLoaded = ref(false);\n\n// Controls if the votingRequest should be reloaded after a voting has been completed\nexport const isVotingCompleted = ref(false);\n\nexport function setVotingCompleted() {\n  isVotingCompleted.value = true;\n  isVotingRequestLoaded.value = false;\n}\n\nexport function votingProvider() {\n  /*\n  STATE\n  */\n  const isSubmissionStep = ref(false);\n\n  /*\n  COMPOSABLES\n  */\n  const {\n    votingPools,\n    votingGaugeAddresses,\n    isLoading: isLoadingVotingPools,\n  } = useVotingPools();\n  const { data: expiredGauges, isLoading: isLoadingExpiredGauges } =\n    useExpiredGaugesQuery(votingGaugeAddresses);\n\n  /**\n   * COMPUTED\n   */\n  const isLoading = computed(\n    () => isLoadingExpiredGauges.value || isLoadingVotingPools.value\n  );\n\n  const selectedPools = computed(() =>\n    votingPools.value.filter(pool =>\n      selectedGaugeAddresses.value.includes(pool.gauge.address)\n    )\n  );\n\n  const unlockedSelectedPools = computed(() =>\n    selectedPools.value.filter(\n      pool => !isVotingTimeLocked(pool.lastUserVoteTime)\n    )\n  );\n\n  /***\n   * Order by vote weight (from smallest to largest)\n   * to avoid going above max voting power when multi-voting in the contract\n   */\n  const unlockedSelectedPoolsOrderedByWeight = computed(() =>\n    unlockedSelectedPools.value.sort(\n      (a, b) =>\n        parseFloat(votingRequest.value[a.gauge.address]) -\n        parseFloat(votingRequest.value[b.gauge.address])\n    )\n  );\n\n  const confirmedVotingRequest = computed(\n    (): ConfirmedVotingRequest =>\n      unlockedSelectedPoolsOrderedByWeight.value.map(pool => ({\n        gaugeAddress: pool.gauge.address,\n        weight: votingRequest.value[pool.gauge.address],\n      }))\n  );\n\n  const selectedPoolsVoteWeight = computed((): number =>\n    selectedPools.value.reduce(\n      (acc, pool) => acc + Number(bpsToShares(pool.userVotes)),\n      0\n    )\n  );\n\n  const selectedGaugeAddresses = computed(() =>\n    Object.keys(votingRequest.value)\n  );\n\n  const totalSelectedGauges = computed(\n    () => selectedGaugeAddresses.value.length\n  );\n\n  const shouldBatchVotes = computed(\n    () => confirmedVotingRequest.value.length > 8\n  );\n\n  const totalAllocatedWeight = computed(() =>\n    Object.values(votingRequest.value).reduce(\n      (acc, weight) => acc + Number(weight),\n      0\n    )\n  );\n\n  const isRequestingTooMuchWeight = computed(\n    () => totalAllocatedWeight.value > 100\n  );\n\n  const hasUserEnteredVotes = computed(() => {\n    return unlockedSelectedPools.value.some(pool => {\n      return (\n        votingRequest.value[pool.gauge.address] != '' &&\n        !getIsGaugeExpired(pool.gauge.address)\n      );\n    });\n  });\n\n  const isVotingRequestValid = computed(\n    () =>\n      !isRequestingTooMuchWeight.value &&\n      (hasExpiredPoolsWithUserVotesSelected.value || hasUserEnteredVotes.value)\n  );\n\n  const hasSubmittedVotes = computed(() =>\n    votingPools.value.some(pool => hasUserVotes(pool))\n  );\n\n  const hasExpiredPoolsSelected = computed(() =>\n    unlockedSelectedPools.value.some(pool => isPoolExpired(pool))\n  );\n\n  const hasExpiredPoolsWithUserVotesSelected = computed(() => {\n    return unlockedSelectedPools.value.some(\n      pool => isPoolExpired(pool) && hasUserVotes(pool)\n    );\n  });\n\n  const hasTimeLockedPools = computed(() =>\n    selectedPools.value.some(pool => isVotingTimeLocked(pool.lastUserVoteTime))\n  );\n\n  const hasAllVotingPowerTimeLocked = computed(\n    (): boolean =>\n      selectedPools.value.every(pool =>\n        isVotingTimeLocked(pool.lastUserVoteTime)\n      ) && selectedPoolsVoteWeight.value === 100\n  );\n\n  /**\n   * METHODS\n   */\n  function toggleSelection(pool: VotingPool): void {\n    if (isSelected(pool)) {\n      return unselectGauge(pool);\n    }\n    selectGauge(pool);\n  }\n\n  function selectGauge(pool: VotingPool) {\n    const gaugeAddress = pool.gauge.address;\n    const currentNormalizedVotes = isPoolExpired(pool)\n      ? '0'\n      : bpsToShares(pool.userVotes);\n\n    votingRequest.value[gaugeAddress] = currentNormalizedVotes;\n  }\n\n  function unselectGauge(pool: VotingPool) {\n    const gaugeAddress = pool.gauge.address;\n    delete votingRequest.value[gaugeAddress];\n  }\n\n  function isSelected(pool: VotingPool) {\n    return selectedGaugeAddresses.value.includes(pool.gauge.address);\n  }\n\n  function getIsGaugeExpired(gaugeAddress: string): boolean {\n    return isGaugeExpired(expiredGauges.value, gaugeAddress);\n  }\n\n  function isInputDisabled(pool: VotingPool) {\n    return isPoolExpired(pool) || isVotingTimeLocked(pool.lastUserVoteTime);\n  }\n\n  /*\n    Once the voting data has been loaded, it initializes the votingRequest with the pools where the user already has votes\n  */\n  function loadRequestWithExistingVotes(votingPools: VotingPool[]) {\n    if (isVotingRequestLoaded.value) return;\n    votingRequest.value = {};\n    votingPools.forEach(pool => {\n      if (hasUserVotes(pool)) selectGauge(pool);\n    });\n    isVotingRequestLoaded.value = true;\n    isVotingCompleted.value = false;\n  }\n\n  /*\n  The MultiVoting flow is divided in 2 steps:\n  1) VoteInputList: The user fills the votingRequest through the list of voting inputs\n  2) VoteSubmission: Once the clicks \"Next\", the inputs are replaced by read-only fields and we render VotingActions to execute the voting transaction/s\n\n  This function goes from 1) to 2)\n  */\n  function goToSubmissionStep() {\n    isSubmissionStep.value = true;\n  }\n\n  return {\n    expiredGauges,\n    selectedGaugeAddresses,\n    selectedPools,\n    unlockedSelectedPools,\n    votingRequest,\n    isLoading,\n    isLoadingExpiredGauges,\n    isLoadingVotingPools,\n    totalAllocatedWeight,\n    isRequestingTooMuchWeight,\n    isVotingRequestValid,\n    totalSelectedGauges,\n    hasSubmittedVotes,\n    shouldBatchVotes,\n    isSubmissionStep,\n    hasExpiredPoolsSelected,\n    hasAllVotingPowerTimeLocked,\n    hasTimeLockedPools,\n    confirmedVotingRequest,\n    getIsGaugeExpired,\n    toggleSelection,\n    isSelected,\n    isInputDisabled,\n    loadRequestWithExistingVotes,\n    goToSubmissionStep,\n  };\n}\n\nexport type VotingProviderResponse = ReturnType<typeof votingProvider>;\nexport const VotingProviderSymbol: InjectionKey<VotingProviderResponse> =\n  Symbol(symbolKeys.Providers.Voting);\n\nexport function provideVoting(): VotingProviderResponse {\n  const _provider = votingProvider();\n  provide(VotingProviderSymbol, _provider);\n  return _provider;\n}\n\nexport function useVoting(): VotingProviderResponse {\n  return safeInject(VotingProviderSymbol);\n}\n"],"names":["isGaugeNew","pool","addedTimestamp","differenceInWeeks","oneSecondInMs","isGaugeExpired","expiredGauges","gaugeAddress","isSameAddress","item","isPoolExpired","hasOnlyExpiredPools","votingGauges","bpsToShares","weight","scale","bnum","sharesToBps","BigNumber","bpsToPercentage","fNum","FNumFormats","formatVoteSharesWith2Decimals","numF","voteLockedUntilText","unlockTime","WEIGHT_VOTE_DELAY","format","toUtcTime","hasUserVotes","callGaugesIsKilledStatus","gaugeAddresses","multicaller","LiquidityGauge","getAddress","useExpiredGaugesQuery","options","networkId","useNetwork","isQueryEnabled","computed","_a","queryKey","reactive","QUERY_KEYS","queryFn","expiredGaugeAddresses","gaugesExpiredStatus","error","address","value","queryOptions","useQuery","votingRequest","ref","isVotingRequestLoaded","isVotingCompleted","setVotingCompleted","votingProvider","isSubmissionStep","votingPools","votingGaugeAddresses","isLoadingVotingPools","useVotingPools","isLoadingExpiredGauges","isLoading","selectedPools","selectedGaugeAddresses","unlockedSelectedPools","isVotingTimeLocked","unlockedSelectedPoolsOrderedByWeight","a","b","confirmedVotingRequest","selectedPoolsVoteWeight","acc","totalSelectedGauges","shouldBatchVotes","totalAllocatedWeight","isRequestingTooMuchWeight","hasUserEnteredVotes","getIsGaugeExpired","isVotingRequestValid","hasExpiredPoolsWithUserVotesSelected","hasSubmittedVotes","hasExpiredPoolsSelected","hasTimeLockedPools","hasAllVotingPowerTimeLocked","toggleSelection","isSelected","unselectGauge","selectGauge","currentNormalizedVotes","isInputDisabled","loadRequestWithExistingVotes","votingPools2","goToSubmissionStep","VotingProviderSymbol","symbolKeys","provideVoting","_provider","provide","useVoting","safeInject"],"mappings":"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"}