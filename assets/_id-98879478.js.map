{"version":3,"file":"_id-98879478.js","sources":["../../node_modules/date-fns/esm/addMinutes/index.js","../../src/components/contextual/pages/pool/PoolActionsCard.vue","../../src/components/contextual/pages/pool/MyPoolBalancesCard.vue","../../src/composables/useUserPoolPercentage.ts","../../src/components/contextual/pages/pool/PoolCompositionCard/components/TokenBreakdown.vue","../../src/lib/utils/numbers.ts","../../src/components/contextual/pages/pool/PoolCompositionCard/components/composables/useTokenBreakdown.ts","../../src/components/contextual/pages/pool/PoolCompositionCard/components/PercentagePill.vue","../../src/components/contextual/pages/pool/PoolCompositionCard/PoolCompositionCard.vue","../../src/components/contextual/pages/pool/FxPoolWarning.vue","../../src/components/contextual/pages/pool/PoolChart.vue","../../src/components/contextual/pages/pool/PoolStatCards.vue","../../src/composables/queries/usePoolSwapsQuery.ts","../../src/composables/queries/useUserPoolSwapsQuery.ts","../../src/components/contextual/pages/pool/PoolTransactionsCard/types.ts","../../src/components/contextual/pages/pool/PoolTransactionsCard/BoostedPoolActivities/Table.vue","../../src/components/contextual/pages/pool/PoolTransactionsCard/BoostedPoolActivities/Activities.vue","../../src/composables/queries/usePoolActivitiesQuery.ts","../../src/composables/queries/usePoolUserActivitiesQuery.ts","../../src/components/contextual/pages/pool/PoolTransactionsCard/PoolActivities/Table.vue","../../src/components/contextual/pages/pool/PoolTransactionsCard/PoolActivities/Activities.vue","../../src/components/contextual/pages/pool/PoolTransactionsCard/InvestmentTransactions/InvestmentTransactions.vue","../../src/components/contextual/pages/pool/PoolTransactionsCard/SwapTransactions/Table.vue","../../src/components/contextual/pages/pool/PoolTransactionsCard/SwapTransactions/SwapTransactions.vue","../../src/components/contextual/pages/pool/PoolTransactionsCard/PoolTransactionsCard.vue","../../src/components/_global/BalDetailsTable/BalDetailsTable.vue","../../src/components/contextual/pages/pool/PoolContractDetails.vue","../../src/components/contextual/pages/vebal/cross-chain-boost/StakingCardSyncAlert.vue","../../src/components/contextual/pages/pool/staking/StakingIncentivesCard.vue","../../src/components/contextual/pages/pool/PoolLockingCard/PoolLockingCard.vue","../../src/assets/images/icons/apy-vision.svg","../../src/composables/external/useApyVisionHelpers.ts","../../src/components/links/ApyVisionPoolLink.vue","../../src/components/images/icons/GauntletIcon.vue","../../src/components/pool/PoolPageHeader.vue","../../src/composables/queries/usePoolAprQuery.ts","../../src/composables/queries/usePoolSnapshotsQuery.ts","../../src/composables/queries/useHistoricalPricesQuery.ts","../../src/components/pool/branded-redirect/constants.ts","../../src/components/pool/branded-redirect/BrandedRedirectCard.vue","../../src/components/contextual/pages/pool/PoolMigrationCard/NewPoolData.vue","../../src/components/cards/GradientCard/GradientCard.vue","../../src/components/contextual/pages/pool/PoolMigrationCard/PoolMigrationCard.vue","../../src/composables/usePoolRisks.ts","../../src/components/contextual/pages/pool/risks/PoolRisks.vue","../../src/pages/pool/_id.vue"],"sourcesContent":["import toInteger from \"../_lib/toInteger/index.js\";\nimport addMilliseconds from \"../addMilliseconds/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\nvar MILLISECONDS_IN_MINUTE = 60000;\n/**\n * @name addMinutes\n * @category Minute Helpers\n * @summary Add the specified number of minutes to the given date.\n *\n * @description\n * Add the specified number of minutes to the given date.\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} amount - the amount of minutes to be added. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.\n * @returns {Date} the new date with the minutes added\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Add 30 minutes to 10 July 2014 12:00:00:\n * const result = addMinutes(new Date(2014, 6, 10, 12, 0), 30)\n * //=> Thu Jul 10 2014 12:30:00\n */\n\nexport default function addMinutes(dirtyDate, dirtyAmount) {\n  requiredArgs(2, arguments);\n  var amount = toInteger(dirtyAmount);\n  return addMilliseconds(dirtyDate, amount * MILLISECONDS_IN_MINUTE);\n}","<script setup lang=\"ts\">\nimport { computed, toRef } from 'vue';\nimport {\n  isJoinsDisabled,\n  usePoolHelpers,\n  deprecatedDetails,\n} from '@/composables/usePoolHelpers';\nimport useNetwork from '@/composables/useNetwork';\nimport { Pool } from '@/services/pool/types';\nimport useWeb3 from '@/services/web3/useWeb3';\n\nimport { Goals, trackGoal } from '@/composables/useFathom';\nimport { useDisabledJoinPool } from '@/composables/useDisabledJoinPool';\nimport { useTokens } from '@/providers/tokens.provider';\nimport { bnum } from '@/lib/utils';\nimport { usePoolWarning } from '@/composables/usePoolWarning';\nimport { PoolWarning } from '@/types/pools';\n\n/**\n * TYPES\n */\ntype Props = {\n  pool: Pool;\n  missingPrices: boolean;\n};\n\n/**\n * PROPS & EMITS\n */\nconst props = defineProps<Props>();\nconst emit = defineEmits<{\n  (e: 'risksClicked'): void;\n}>();\n\n/**\n * COMPOSABLES\n */\nconst { isMigratablePool, hasNonApprovedRateProviders } = usePoolHelpers(\n  toRef(props, 'pool')\n);\nconst { isWalletReady, startConnectWithInjectedProvider } = useWeb3();\nconst { networkSlug } = useNetwork();\nconst { shouldDisableJoins } = useDisabledJoinPool(props.pool);\nconst { balanceFor } = useTokens();\nconst { isAffectedBy } = usePoolWarning(computed(() => props.pool.id));\n\n/**\n * COMPUTED\n */\nconst hasBpt = computed((): boolean =>\n  bnum(balanceFor(props.pool.address)).gt(0)\n);\nconst joinDisabled = computed(\n  (): boolean =>\n    !!deprecatedDetails(props.pool.id) ||\n    isJoinsDisabled(props.pool.id) ||\n    hasNonApprovedRateProviders.value ||\n    isMigratablePool(props.pool) ||\n    shouldDisableJoins.value\n);\n</script>\n\n<template>\n  <div\n    class=\"p-4 w-full bg-gray-50 dark:bg-gray-800 border-t border-gray-200 dark:border-gray-900\"\n  >\n    <BalBtn\n      v-if=\"!isWalletReady\"\n      :label=\"$t('connectWallet')\"\n      color=\"gradient\"\n      block\n      @click=\"startConnectWithInjectedProvider\"\n    />\n    <div v-else>\n      <div class=\"grid grid-cols-2 gap-2\">\n        <BalBtn\n          :tag=\"joinDisabled ? 'div' : 'router-link'\"\n          :to=\"{ name: 'add-liquidity', params: { networkSlug } }\"\n          :label=\"$t('addLiquidity')\"\n          color=\"gradient\"\n          :disabled=\"joinDisabled\"\n          block\n          @click=\"trackGoal(Goals.ClickAddLiquidity)\"\n        />\n\n        <BalBtn\n          v-if=\"isAffectedBy(PoolWarning.CspPoolVulnWarning)\"\n          tag=\"router-link\"\n          :to=\"{ name: 'recovery-exit', params: { networkSlug } }\"\n          :label=\"$t('withdraw.label')\"\n          :disabled=\"!hasBpt\"\n          color=\"blue\"\n          outline\n          block\n        />\n        <BalBtn\n          v-else\n          :tag=\"hasBpt ? 'router-link' : 'div'\"\n          :to=\"{ name: 'withdraw', params: { networkSlug } }\"\n          :label=\"$t('withdraw.label')\"\n          :disabled=\"!hasBpt\"\n          color=\"blue\"\n          outline\n          block\n          @click=\"trackGoal(Goals.ClickWithdraw)\"\n        />\n      </div>\n      <div class=\"pt-4 text-xs text-secondary\">\n        {{ $t('poolTransfer.myPoolBalancesCard.risksDisclaimer') }}\n\n        <a class=\"font-medium link\" @click=\"emit('risksClicked')\">\n          {{ $t('poolTransfer.myPoolBalancesCard.poolsRisks') }} </a\n        >.\n      </div>\n    </div>\n  </div>\n</template>\n","<script setup lang=\"ts\">\nimport { computed, toRef } from 'vue';\nimport { useRouter } from 'vue-router';\n\nimport useNumbers, { FNumFormats } from '@/composables/useNumbers';\nimport {\n  fiatValueOf,\n  isVeBalPool,\n  usePoolHelpers,\n} from '@/composables/usePoolHelpers';\nimport { useTokens } from '@/providers/tokens.provider';\nimport useNetwork from '@/composables/useNetwork';\nimport { bnum } from '@/lib/utils';\nimport { Pool } from '@/services/pool/types';\nimport useWeb3 from '@/services/web3/useWeb3';\n\nimport PoolActionsCard from './PoolActionsCard.vue';\nimport { usePoolStaking } from '@/providers/local/pool-staking.provider';\nimport { useLock } from '@/composables/useLock';\nimport { configService } from '@/services/config/config.service';\n\n/**\n * TYPES\n */\ntype Props = {\n  pool: Pool;\n  missingPrices: boolean;\n};\n\n/**\n * PROPS & EMITS\n */\nconst props = defineProps<Props>();\nconst emit = defineEmits<{\n  (e: 'risksClicked'): void;\n}>();\n\n/**\n * COMPOSABLES\n */\nconst { balanceFor } = useTokens();\nconst { fNum } = useNumbers();\nconst { isWalletReady } = useWeb3();\nconst { isMigratablePool } = usePoolHelpers(toRef(props, 'pool'));\nconst { stakedShares } = usePoolStaking();\nconst { networkSlug } = useNetwork();\nconst router = useRouter();\nconst { totalLockedValue } = useLock({ enabled: isVeBalPool(props.pool.id) });\n\n/**\n * COMPUTED\n */\nconst bptBalance = computed((): string =>\n  bnum(balanceFor(props.pool.address)).plus(stakedShares.value).toString()\n);\n\nconst fiatValue = computed(() => {\n  if (isVeBalPool(props.pool.id)) return totalLockedValue.value;\n\n  return fiatValueOf(props.pool, bptBalance.value);\n});\n\nconst showMigrateButton = computed(\n  () =>\n    (bnum(bptBalance.value).gt(0) || bnum(stakedShares.value).gt(0)) &&\n    isMigratablePool(props.pool)\n);\n\n/**\n * METHODS\n */\nfunction navigateToPoolMigration(pool: Pool) {\n  router.push({\n    name: 'migrate-pool',\n    params: {\n      from: pool.id,\n      to: configService.network.pools.Migrations?.[pool.id].toPoolId,\n    },\n    query: {\n      returnRoute: 'pool',\n      returnParams: JSON.stringify({ id: pool.id, networkSlug }),\n    },\n  });\n}\n</script>\n\n<template>\n  <BalCard shadow=\"2xl\" noPad class=\"rounded-xl\">\n    <template #header>\n      <div class=\"card-header\">\n        <h5>\n          {{ $t('poolTransfer.myPoolBalancesCard.title') }}\n        </h5>\n        <h5 class=\"text-2xl\">\n          {{ isWalletReady ? fNum(fiatValue, FNumFormats.fiat) : '-' }}\n        </h5>\n      </div>\n    </template>\n    <div v-if=\"showMigrateButton\" class=\"py-2 px-4\">\n      <BalBtn\n        color=\"blue\"\n        block\n        @click.prevent=\"navigateToPoolMigration(props.pool)\"\n      >\n        {{ $t('migratePool.migrateLiquidity') }}\n      </BalBtn>\n    </div>\n    <template #footer>\n      <PoolActionsCard\n        :pool=\"pool\"\n        :missingPrices=\"missingPrices\"\n        @risks-clicked=\"emit('risksClicked')\"\n      />\n    </template>\n  </BalCard>\n</template>\n\n<style scoped>\n.card-header {\n  @apply p-4 w-full flex items-center justify-between;\n  @apply border-b dark:border-gray-700;\n}\n\n.asset-row {\n  @apply py-3 flex justify-between items-center text-lg;\n}\n</style>\n","import { bnum } from '@/lib/utils';\nimport { Pool } from '@/services/pool/types';\nimport { computed, Ref } from 'vue';\nimport useNumbers from '@/composables/useNumbers';\nimport { useTokens } from '@/providers/tokens.provider';\nimport { usePoolStaking } from '@/providers/local/pool-staking.provider';\nimport { useLock } from './useLock';\nimport { isVeBalPool } from './usePoolHelpers';\n\nexport function useUserPoolPercentage(pool: Ref<Pool>) {\n  const { balanceFor } = useTokens();\n  const { stakedShares } = usePoolStaking();\n\n  const isVeBal = computed(() => isVeBalPool(pool.value.id));\n\n  const { totalLockedShares } = useLock({\n    // Avoid lock queries when pool is not veBAL:\n    enabled: isVeBal.value,\n  });\n  const { fNum } = useNumbers();\n\n  const userPoolPercentage = computed(() => {\n    let bptBalance = bnum(balanceFor(pool.value.address)).plus(\n      stakedShares.value\n    );\n    if (isVeBal.value && totalLockedShares.value) {\n      bptBalance = bptBalance.plus(totalLockedShares.value);\n    }\n    return bptBalance.div(bnum(pool.value.totalShares)).multipliedBy(100);\n  });\n\n  const userPoolPercentageLabel = computed(\n    () =>\n      fNum(userPoolPercentage.value.toString(), {\n        maximumFractionDigits: 4,\n        minimumFractionDigits: 0,\n      }) + '%'\n  );\n\n  return {\n    userPoolPercentage,\n    userPoolPercentageLabel,\n  };\n}\n","<script setup lang=\"ts\">\nimport { Pool, PoolToken } from '@/services/pool/types';\nimport useWeb3 from '@/services/web3/useWeb3';\nimport { computed, toRefs } from 'vue';\nimport { TokensData } from './composables/useTokenBreakdown';\n\nimport { isWeightedLike, usePoolHelpers } from '@/composables/usePoolHelpers';\nimport { useTokens } from '@/providers/tokens.provider';\n\n/**\n * TYPES\n */\ntype Props = {\n  token: PoolToken;\n  parentLevel?: number;\n  showUserShares: boolean;\n  rootPool: Pool;\n  tokensData: TokensData;\n};\n\n/**\n * PROPS\n */\nconst props = withDefaults(defineProps<Props>(), {\n  parentLevel: 0,\n});\n\nconst { token, showUserShares, rootPool } = toRefs(props);\nconst tokenData = computed(() => props.tokensData[token.value.address]);\n\n/**\n * COMPOSABLES\n */\nconst { explorerLinks } = useWeb3();\nconst { isDeepPool } = usePoolHelpers(rootPool);\nconst isWeighted = isWeightedLike(rootPool.value.poolType);\nconst { getToken } = useTokens();\n\n/**\n * COMPUTED\n */\n// The nested level, the top level being 0, the level below that 1, etc.\nconst currentLevel = computed(() => props.parentLevel + 1);\n\nconst nestedPaddingClass = computed(() => {\n  switch (currentLevel.value) {\n    case 1:\n      return 'level-1';\n    case 2:\n      return 'level-2';\n    case 3:\n      return 'level-3';\n    case 4:\n      return 'level-4';\n    default:\n      return 'pl-4';\n  }\n});\n\n/**\n * METHODS\n */\nfunction symbolFor(token: PoolToken): string {\n  return getToken(token.address)?.symbol || token.symbol || '---';\n}\n</script>\n\n<template>\n  <div\n    :class=\"[\n      'grid gap-y-4 px-4 w-full items-center border-b dark:border-b-gray-900 last:border-0 transition-all ease-in duration-300',\n      isWeighted ? 'grid-cols-5' : 'grid-cols-4',\n      nestedPaddingClass,\n    ]\"\n  >\n    <BalLink\n      :href=\"explorerLinks.addressLink(token.address)\"\n      external\n      noStyle\n      class=\"group flex items-center\"\n    >\n      <BalAsset\n        :address=\"token.address\"\n        :class=\"\n          isDeepPool && currentLevel > 1 ? 'nested-token' : 'mr-2 shrink-0 z-10'\n        \"\n        :size=\"\n          isDeepPool && currentLevel > 2\n            ? 24\n            : isDeepPool && currentLevel > 1\n            ? 28\n            : 36\n        \"\n      />\n      <span\n        class=\"group-hover:text-purple-500 dark:group-hover:text-yellow-500 transition-colors\"\n        >{{ symbolFor(token) }}</span\n      >\n      <BalIcon\n        name=\"arrow-up-right\"\n        size=\"sm\"\n        class=\"ml-1 text-gray-500 group-hover:text-purple-500 dark:group-hover:text-yellow-500 transition-colors\"\n      />\n    </BalLink>\n    <div v-if=\"isWeighted\" class=\"justify-self-end\">\n      {{ tokenData.tokenWeightLabel }}\n    </div>\n    <div class=\"justify-self-end\">\n      {{ showUserShares ? tokenData.userBalanceLabel : tokenData.balanceLabel }}\n    </div>\n    <div class=\"justify-self-end\">\n      {{ showUserShares ? tokenData.userFiatLabel : tokenData.fiatLabel }}\n    </div>\n    <div class=\"justify-self-end\">\n      {{ tokenData.getTokenPercentageLabel() }}\n    </div>\n  </div>\n\n  <template v-if=\"isDeepPool\">\n    <TokenBreakdown\n      v-for=\"nestedToken in token.token?.pool?.tokens\"\n      :key=\"nestedToken.address\"\n      :token=\"nestedToken\"\n      :parentLevel=\"currentLevel\"\n      :showUserShares=\"showUserShares\"\n      :rootPool=\"rootPool\"\n      :tokensData=\"tokensData\"\n    />\n  </template>\n</template>\n<style scoped>\n.nested-token {\n  @apply flex-shrink-0 mr-2 relative ml-1 sm:ml-0;\n}\n\n.level-1 {\n  @apply py-4 font-medium hover:bg-gray-50 hover:dark:bg-gray-800;\n}\n\n.level-2 {\n  @apply py-3.5 bg-gray-100/20 hover:bg-gray-50 dark:bg-gray-850 hover:dark:bg-gray-800;\n}\n\n.level-3 {\n  @apply py-3 text-sm text-secondary bg-gray-100/50 hover:bg-gray-100/70 dark:bg-gray-900/50 hover:dark:bg-gray-800;\n}\n\n.level-4 {\n  @apply py-2.5 text-sm text-secondary bg-gray-100 hover:bg-gray-100/50 dark:bg-gray-900 hover:dark:bg-gray-800;\n}\n\n.level-2 > a {\n  @apply pl-8;\n}\n\n.level-3 > a {\n  @apply pl-16;\n}\n\n.level-4 > a {\n  @apply pl-20;\n}\n</style>\n","export function isNumber(str: string | number): boolean {\n  if (str === '') {\n    return false;\n  }\n\n  return !Number.isNaN(Number(str));\n}\n","import useNumbers, { FNumFormats } from '@/composables/useNumbers';\nimport { isDeep } from '@/composables/usePoolHelpers';\nimport { useUserPoolPercentage } from '@/composables/useUserPoolPercentage';\nimport { bnum } from '@/lib/utils';\nimport { isNumber } from '@/lib/utils/numbers';\nimport { Pool, PoolToken } from '@/services/pool/types';\nimport { computed, Ref } from 'vue';\n\nexport interface TokenData {\n  balanceLabel: string | number;\n  userBalanceLabel: string | number;\n  fiatLabel: string;\n  userFiatLabel: string;\n  tokenWeightLabel: string;\n  getTokenPercentageLabel: () => string;\n}\n\nexport type TokensData = Record<string, TokenData>;\n\nexport function useTokenBreakdown(rootPool: Ref<Pool>) {\n  const { fNum, toFiat } = useNumbers();\n\n  const { userPoolPercentage } = useUserPoolPercentage(rootPool);\n  const isDeepPool = computed(() => isDeep(rootPool.value));\n  let tokensData: TokensData = {};\n  // Sum of every token's fiat value.\n  // Used to increase token percentage accuracy as pool.totalLiquidity is not completely in sync with balance * coingecko-price calculations).\n  let totalFiat = 0;\n\n  // Recalculates recursive tokensData whenever the pool is re-fetched\n  return computed(() => calculateAllTokensData(rootPool));\n\n  function calculateAllTokensData(pool: Ref<Pool>) {\n    totalFiat = 0;\n    tokensData = {};\n    pool.value.tokens.forEach(token => {\n      const rootTokenShare = 1;\n      calculateTokenData(token, rootTokenShare);\n    });\n    return tokensData;\n  }\n\n  function calculateTokenData(token: PoolToken, shareOfParentInPool: number) {\n    // To get the balance of this token in the current pool we need to know the\n    // share of it's parent in this pool. e.g. If the token is DAI which is nested\n    // in bb-a-DAI, we need to know what share of bb-a-DAI is contained in the\n    // current pool. Then we can use this share and multiply it by the total\n    // balance of this token.\n    const balance = bnum(token.balance).times(shareOfParentInPool).toString();\n\n    const hasNestedTokens = token?.token?.pool?.tokens;\n    const isParentTokenInDeepPool = hasNestedTokens && isDeepPool.value;\n\n    const balanceValue = calculateBalanceValue();\n    const fiatValue = calculateFiatValue();\n    if (isNumber(fiatValue)) totalFiat += Number(fiatValue);\n\n    const userFiat = applyUserPoolPercentageTo(fiatValue);\n    const userFiatLabel = fiatValue === '' ? '' : formatFiatValue(userFiat);\n\n    const userBalanceLabel =\n      balanceValue === ''\n        ? ''\n        : formatBalanceValue(applyUserPoolPercentageTo(balanceValue));\n\n    const tokenWeightLabel = !token?.weight\n      ? ''\n      : fNum(token.weight, FNumFormats.percent);\n\n    function getTokenPercentageLabel() {\n      if (totalFiat === 0) return '0%';\n      const tokenPercentage = Number(fiatValue) / Number(totalFiat);\n      return tokenPercentage === 0\n        ? ''\n        : fNum(tokenPercentage, FNumFormats.percent);\n    }\n\n    tokensData[token.address] = {\n      balanceLabel: formatBalanceValue(calculateBalanceValue()),\n      fiatLabel: formatFiatValue(fiatValue),\n      userFiatLabel,\n      userBalanceLabel: userBalanceLabel,\n      tokenWeightLabel,\n      getTokenPercentageLabel,\n    };\n\n    const isLeaf = !token.token?.pool;\n    if (isLeaf || !isDeepPool.value) return;\n\n    const shareOfTokenInPool = bnum(token?.balance || '0')\n      .div(token.token?.pool?.totalShares || 1)\n      .times(shareOfParentInPool)\n      .toNumber();\n\n    // Recursively calculate data for next token level\n    token.token?.pool?.tokens?.forEach(token =>\n      calculateTokenData(token, shareOfTokenInPool)\n    );\n\n    function calculateBalanceValue() {\n      if (isParentTokenInDeepPool) return '';\n      return balance;\n    }\n\n    function formatBalanceValue(value: string | number) {\n      if (!isNumber(value)) return value;\n      return fNum(value, FNumFormats.token);\n    }\n\n    function calculateFiatValue() {\n      if (isParentTokenInDeepPool) return '';\n\n      let value = toFiat(balance, token.address);\n\n      if (value === '0' && token.token?.latestUSDPrice) {\n        // Attempt to use latest USD price from subgraph.\n        value = bnum(balance).times(token.token.latestUSDPrice).toString();\n      }\n      return value;\n    }\n\n    function formatFiatValue(value: string | number): string {\n      value = value.toString();\n      if (!isNumber(value)) return value;\n      return fNum(value, FNumFormats.fiat);\n    }\n\n    function applyUserPoolPercentageTo(value: string): number {\n      return (Number(value) * Number(userPoolPercentage.value)) / 100;\n    }\n  }\n}\n","<script setup lang=\"ts\">\nimport { computed } from 'vue';\n\ntype Props = {\n  isActive?: boolean;\n};\nconst props = withDefaults(defineProps<Props>(), { isActive: false });\n\nconst textColorClasses = computed(() =>\n  props.isActive\n    ? 'text-blue-600 dark:text-blue-400 bg-blue-100 dark:bg-blue-500/20'\n    : 'text-secondary bg-gray-200 dark:bg-gray-800'\n);\n</script>\n<template>\n  <div class=\"flex p-1 text-sm rounded\" :class=\"[textColorClasses]\">\n    <slot></slot>\n  </div>\n</template>","<script setup lang=\"ts\">\nimport useBreakpoints from '@/composables/useBreakpoints';\nimport { removeBptFrom } from '@/composables/usePoolHelpers';\nimport { Pool } from '@/services/pool/types';\nimport { computed, nextTick, onMounted, ref, toRefs } from 'vue';\n\nimport { isWeightedLike } from '@/composables/usePoolHelpers';\nimport { useUserPoolPercentage } from '@/composables/useUserPoolPercentage';\nimport { useI18n } from 'vue-i18n';\nimport TokenBreakdown from './components/TokenBreakdown.vue';\nimport { useTokenBreakdown } from './components/composables/useTokenBreakdown';\nimport PercentagePill from './components/PercentagePill.vue';\n\n/**\n * TYPES\n */\ntype Props = {\n  pool: Pool;\n};\n\n/**\n * PROPS\n */\nconst props = defineProps<Props>();\nconst { pool } = toRefs(props);\nconst isWeighted = isWeightedLike(pool.value.poolType);\n\n/**\n * COMPOSABLES\n */\nconst { upToLargeBreakpoint } = useBreakpoints();\nconst { userPoolPercentage, userPoolPercentageLabel } =\n  useUserPoolPercentage(pool);\nconst { t } = useI18n();\nconst rootPool = computed(() => removeBptFrom(pool.value));\nconst tokenData = useTokenBreakdown(rootPool);\n\n/**\n * STATE\n */\nconst TOTAL_COMPOSITION = 'TOTAL_COMPOSITION';\nconst MY_POOL_SHARE = 'MY_POOL_SHARE';\n\nconst compositionTab = {\n  value: TOTAL_COMPOSITION,\n  label: t('poolComposition.tabs.totalComposition'),\n};\nconst mySharesTab = {\n  value: MY_POOL_SHARE,\n  label: t('poolComposition.tabs.myPoolShare'),\n};\nconst activeTab = ref(TOTAL_COMPOSITION);\n\n/**\n * COMPUTED\n */\nconst userHasShares = computed(() => userPoolPercentage.value.gt(0));\n// Hide my pool share tab when user does not have shares\nconst tabs = computed(() =>\n  userHasShares.value ? [compositionTab, mySharesTab] : [compositionTab]\n);\nconst showUserShares = computed(() => activeTab.value === MY_POOL_SHARE);\n\n/**\n * LIFECYCLE\n */\nonMounted(async () => {\n  await nextTick();\n\n  if (userHasShares.value) {\n    activeTab.value = MY_POOL_SHARE;\n  }\n});\n</script>\n\n<template>\n  <div\n    class=\"flex justify-start items-center mx-4 lg:mx-0 mb-6 border-b dark:border-gray-900\"\n  >\n    <BalTabs v-model=\"activeTab\" :tabs=\"tabs\" noPad class=\"-mb-px\">\n      <PercentagePill v-if=\"userHasShares\" :isActive=\"showUserShares\">\n        {{ userPoolPercentageLabel }}\n      </PercentagePill>\n    </BalTabs>\n  </div>\n  <BalCard\n    class=\"overflow-x-auto whitespace-nowrap\"\n    :square=\"upToLargeBreakpoint\"\n    :noBorder=\"upToLargeBreakpoint\"\n    noPad\n  >\n    <template #header>\n      <div\n        class=\"grid p-4 w-full text-base font-semibold border-b dark:border-gray-900\"\n        :class=\"[isWeighted ? 'grid-cols-5' : 'grid-cols-4']\"\n      >\n        <div>{{ $t('token') }}</div>\n        <div v-if=\"isWeighted\" class=\"justify-self-end\">\n          {{ $t('weight') }}\n        </div>\n        <div class=\"justify-self-end\">\n          {{ $t('balance') }}\n        </div>\n        <div class=\"justify-self-end\">\n          {{ $t('value') }}\n        </div>\n        <div class=\"justify-self-end\">\n          {{ $t('poolComposition.token%') }}\n        </div>\n      </div>\n    </template>\n\n    <div class=\"grid\">\n      <div\n        v-for=\"token in rootPool.tokens\"\n        :key=\"token.address\"\n        class=\"grid nested-group\"\n      >\n        <TokenBreakdown\n          :token=\"token\"\n          :showUserShares=\"showUserShares\"\n          :rootPool=\"pool\"\n          :tokensData=\"tokenData\"\n        />\n      </div>\n    </div>\n  </BalCard>\n</template>\n<style scoped>\n:deep(.card-container) {\n  min-width: 600px;\n}\n\n.nested-group:has(.level-2) {\n  @apply dark:border-gray-900 border-t first:border-0;\n}\n</style>","<template>\n  <BalAlert class=\"py-2 px-2.5 mb-5\" type=\"tip\" size=\"md\" block title=\"\">\n    <div class=\"flex flex-col text-sm\">\n      <span>{{ $t('poolChart.fxPoolWarning') }}</span>\n      <BalLink\n        href=\"https://docs.xave.co/product-overview-1/amm#mechanism\"\n        external\n        noStyle\n      >\n        <div class=\"flex items-center text-blue-600\">\n          <span>\n            {{ $t('learnMore') }}\n          </span>\n          <BalIcon name=\"arrow-up-right\" size=\"sm\" />\n        </div>\n      </BalLink>\n    </div>\n  </BalAlert>\n</template>\n","<script setup lang=\"ts\">\nimport { format, addMinutes } from 'date-fns';\nimport * as echarts from 'echarts/core';\nimport { computed, ref } from 'vue';\nimport { useI18n } from 'vue-i18n';\n\nimport { PRETTY_DATE_FORMAT } from '@/components/forms/lock_actions/constants';\nimport PoolChartPeriodSelect from '@/components/pool/PoolChartPeriodSelect.vue';\nimport useBreakpoints from '@/composables/useBreakpoints';\nimport useDarkMode from '@/composables/useDarkMode';\nimport useNumbers from '@/composables/useNumbers';\nimport useTailwind from '@/composables/useTailwind';\nimport { HistoricalPrices } from '@/services/coingecko/api/price.service';\nimport { PoolSnapshot, PoolSnapshots, PoolType } from '@/services/pool/types';\nimport { twentyFourHoursInSecs } from '@/composables/useTime';\nimport { isFx } from '@/composables/usePoolHelpers';\nimport FxPoolWarning from './FxPoolWarning.vue';\n\n/**\n * TYPES\n */\nexport type PoolChartPeriod = {\n  text: string;\n  days: number;\n};\n\ntype Props = {\n  historicalPrices?: HistoricalPrices | null;\n  snapshots?: PoolSnapshots | null;\n  loading: boolean;\n  poolPremintedBptIndex: number | null;\n  // these props are added to prevent line chart rerender on each pool update\n  totalLiquidity?: string;\n  tokensList?: string[];\n  poolType?: PoolType;\n};\n\nenum PoolChartTab {\n  VOLUME = 'volume',\n  TVL = 'tvl',\n  FEES = 'fees',\n}\n\ninterface PoolChartData {\n  color: string[];\n  hoverBorderColor?: string;\n  hoverColor?: string;\n  areaStyle?: {\n    color: echarts.LinearGradientObject;\n  };\n  chartType: string;\n  data: {\n    name: string;\n    values: (readonly [string, number])[];\n  }[];\n  defaultHeaderStateValue: string;\n}\n\n/**\n * PROPS\n */\nconst props = withDefaults(defineProps<Props>(), {\n  loading: false,\n  historicalPrices: null,\n  snapshots: null,\n});\n\n/**\n * COMPOSABLES\n */\nconst { t } = useI18n();\nconst tailwind = useTailwind();\nconst { fNum } = useNumbers();\nconst { isMobile } = useBreakpoints();\nconst { darkMode } = useDarkMode();\n\n/**\n * STATE\n */\nconst MIN_CHART_VALUES = 2;\n\nconst tabs = [\n  {\n    value: PoolChartTab.VOLUME,\n    label: t('poolChart.tabs.volume'),\n  },\n  {\n    value: PoolChartTab.TVL,\n    label: t('poolChart.tabs.tvl'),\n  },\n  {\n    value: PoolChartTab.FEES,\n    label: t('poolChart.tabs.fees'),\n  },\n];\nconst activeTab = ref(tabs[0].value);\n\nconst currentChartValue = ref({ num: '', isNegative: false });\nconst currentChartDate = ref('');\nconst isFocusedOnChart = ref(false);\n\n/**\n * COMPUTED\n */\nconst snapshotValues = computed(() => Object.values(props.snapshots || []));\n\nconst periodOptions = computed(() => [\n  { text: t('poolChart.period.days', [90]), days: 90 },\n  { text: t('poolChart.period.days', [180]), days: 180 },\n  { text: t('poolChart.period.days', [365]), days: 365 },\n  { text: t('poolChart.period.all'), days: snapshotValues.value.length },\n]);\n\nconst currentPeriod = ref<PoolChartPeriod>(periodOptions.value[0]);\n\nconst timestamps = computed(() =>\n  snapshotValues.value.map(snapshot =>\n    format(\n      addMinutes(\n        snapshot.timestamp,\n        new Date(snapshot.timestamp).getTimezoneOffset()\n      ),\n      'yyyy/MM/dd'\n    )\n  )\n);\n\nfunction getTVLData(periodSnapshots: PoolSnapshot[]) {\n  const tvlValues: (readonly [string, number])[] = [];\n\n  // temporary statement until we start get prices from coingecko for\n  if (props.poolType === PoolType.StablePhantom) {\n    periodSnapshots.forEach((snapshot, idx) => {\n      const timestamp = timestamps.value[idx];\n      if (idx === 0) {\n        tvlValues.push(\n          Object.freeze<[string, number]>([\n            timestamp,\n            Number(props.totalLiquidity || 0),\n          ])\n        );\n        return;\n      }\n      tvlValues.push(\n        Object.freeze<[string, number]>([timestamp, Number(snapshot.liquidity)])\n      );\n    });\n  } else {\n    periodSnapshots.forEach((snapshot, idx) => {\n      const timestamp = timestamps.value[idx];\n      // get today's TVL value from pool.totalLiquidity due to differences in prices during the day\n      if (idx === 0) {\n        tvlValues.push(\n          Object.freeze<[string, number]>([\n            timestamp,\n            Number(props.totalLiquidity || 0),\n          ])\n        );\n        return;\n      }\n\n      const prices =\n        props.historicalPrices && props.historicalPrices[snapshot.timestamp];\n\n      // if there are no prices from coingecko use snapshot.liquidity\n      if (!prices || prices.length < (props.tokensList?.length || 0)) {\n        if (!snapshot.liquidity) {\n          return;\n        }\n        tvlValues.push(\n          Object.freeze<[string, number]>([\n            timestamp,\n            Number(snapshot.liquidity),\n          ])\n        );\n        return;\n      }\n\n      let amounts = [...snapshot.amounts];\n\n      /**\n       * @description\n       * There may be more amounts in snapshots than prices.\n       * For example in balancer boosted pool the largest one is the BPT of the pool itself.\n       * It is removed here to calculate properly snapshot pool value.\n       */\n      if (snapshot.amounts.length > prices.length) {\n        amounts = amounts.filter(\n          (_, index) => index !== props.poolPremintedBptIndex\n        );\n      }\n\n      const snapshotPoolValue = amounts.reduce(\n        (sum: number, amount: string, index: number) => {\n          sum += Number(amount) * prices[index];\n          return sum;\n        },\n        0\n      );\n\n      tvlValues.push(\n        Object.freeze<[string, number]>([timestamp, snapshotPoolValue])\n      );\n    });\n  }\n\n  return {\n    color: [tailwind.theme.colors.blue['600']],\n    hoverBorderColor: tailwind.theme.colors.pink['500'],\n    hoverColor: darkMode.value\n      ? tailwind.theme.colors.gray['900']\n      : tailwind.theme.colors.white,\n    areaStyle: {\n      color: new echarts.graphic.LinearGradient(0, 0, 0, 1, [\n        {\n          offset: 0,\n          color: 'rgba(14, 165, 233, 0.08)',\n        },\n        {\n          offset: 1,\n          color: 'rgba(68, 9, 236, 0)',\n        },\n      ]),\n    },\n    chartType: 'line',\n    data: [\n      {\n        name: 'TVL',\n        values: tvlValues,\n      },\n    ],\n    defaultHeaderStateValue: fNum(tvlValues[0][1], {\n      style: 'currency',\n    }),\n  };\n}\n\nfunction getFeesData(\n  periodSnapshots: PoolSnapshot[],\n  isAllTimeSelected: boolean,\n  pariodLastSnapshotIdx: number\n) {\n  const feesValues = periodSnapshots.map(\n    (snapshot, idx): readonly [string, number] => {\n      const value = parseFloat(snapshot.swapFees);\n      let prevValue: number;\n\n      // get value of prev snapshot\n      // if it is last value among all snapshots, then prev value is 0\n      if (idx === snapshotValues.value.length - 1) {\n        prevValue = 0;\n      } // if it is last value among certain period snapshots, then we get prev value from all snapshots\n      else if (idx === pariodLastSnapshotIdx) {\n        prevValue = parseFloat(snapshotValues.value[idx + 1].swapFees);\n      } else {\n        prevValue = parseFloat(periodSnapshots[idx + 1].swapFees);\n      }\n\n      const result = Object.freeze<[string, number]>([\n        timestamps.value[idx],\n        value - prevValue,\n      ]);\n      return result;\n    }\n  );\n\n  // add 0 values in order to show chart properly\n  if (periodSnapshots.length < 30) {\n    feesValues.push(...addLaggingTimestamps());\n  }\n\n  const defaultHeaderStateValue =\n    Number(periodSnapshots[0].swapFees) -\n    (isAllTimeSelected\n      ? 0\n      : Number(periodSnapshots[pariodLastSnapshotIdx].swapFees));\n\n  return {\n    color: [tailwind.theme.colors.yellow['400']],\n    chartType: 'bar',\n    hoverColor: tailwind.theme.colors.pink['500'],\n    data: [\n      {\n        name: 'Fees',\n        values: feesValues,\n      },\n    ],\n    defaultHeaderStateValue: fNum(defaultHeaderStateValue, {\n      style: 'currency',\n    }),\n  };\n}\n\nfunction getVolumeData(\n  periodSnapshots: PoolSnapshot[],\n  isAllTimeSelected: boolean,\n  pariodLastSnapshotIdx: number\n): PoolChartData {\n  const volumeData = periodSnapshots.map((snapshot, idx) => {\n    const value = parseFloat(snapshot.swapVolume);\n    let prevValue: number;\n\n    // get value of prev snapshot\n    if (idx === snapshotValues.value.length - 1) {\n      prevValue = 0;\n    } else if (idx === pariodLastSnapshotIdx) {\n      prevValue = parseFloat(snapshotValues.value[idx + 1].swapVolume);\n    } else {\n      prevValue = parseFloat(periodSnapshots[idx + 1].swapVolume);\n    }\n    return Object.freeze<[string, number]>([\n      timestamps.value[idx],\n      value - prevValue,\n    ]);\n  });\n\n  // add 0 values in order to show chart properly\n  if (periodSnapshots.length < 30) {\n    volumeData.push(...addLaggingTimestamps());\n  }\n\n  const defaultHeaderStateValue =\n    Number(periodSnapshots[0].swapVolume) -\n    (isAllTimeSelected\n      ? 0\n      : Number(periodSnapshots[pariodLastSnapshotIdx].swapVolume));\n\n  return {\n    color: [tailwind.theme.colors.green['400']],\n    chartType: 'bar',\n    hoverColor: tailwind.theme.colors.pink['500'],\n    data: [\n      {\n        name: 'Volume',\n        values: volumeData,\n      },\n    ],\n    defaultHeaderStateValue: fNum(defaultHeaderStateValue, {\n      style: 'currency',\n    }),\n  };\n}\n\nconst chartData = computed((): PoolChartData => {\n  const periodSnapshots =\n    currentPeriod.value.days === snapshotValues.value.length\n      ? snapshotValues.value\n      : snapshotValues.value.slice(0, currentPeriod.value.days - 1);\n  const isAllTimeSelected =\n    periodSnapshots.length === snapshotValues.value.length;\n  const pariodLastSnapshotIdx = periodSnapshots.length - 1;\n\n  if (activeTab.value === PoolChartTab.TVL) {\n    return getTVLData(periodSnapshots);\n  }\n\n  if (activeTab.value === PoolChartTab.FEES) {\n    return getFeesData(\n      periodSnapshots,\n      isAllTimeSelected,\n      pariodLastSnapshotIdx\n    );\n  }\n\n  return getVolumeData(\n    periodSnapshots,\n    isAllTimeSelected,\n    pariodLastSnapshotIdx\n  );\n});\n\nconst defaultChartData = computed(() => {\n  const currentPeriodOption = periodOptions.value.find(\n    option => option.days === currentPeriod.value.days\n  );\n  let title = `${currentPeriodOption?.text} ${activeTab.value}`;\n\n  if (activeTab.value === PoolChartTab.TVL) {\n    title = t('poolChart.defaultTitle.tvl');\n  }\n\n  return { title, value: chartData.value.defaultHeaderStateValue };\n});\n\nconst showFxPoolWarning = computed(() => {\n  const { poolType } = props;\n  return poolType && isFx(poolType) && activeTab.value === PoolChartTab.FEES;\n});\n\n/**\n * METHODS\n */\nfunction setCurrentPeriod(period: PoolChartPeriod) {\n  currentPeriod.value = period;\n}\n\nfunction setCurrentChartValue(payload: {\n  chartDate: string;\n  chartValue: number;\n}) {\n  currentChartValue.value.num = fNum(payload.chartValue, {\n    style: 'currency',\n    maximumFractionDigits: 0,\n    fixedFormat: true,\n  });\n  currentChartValue.value.isNegative = payload.chartValue < 0;\n\n  currentChartDate.value = format(\n    new Date(payload.chartDate),\n    PRETTY_DATE_FORMAT\n  );\n}\n\nfunction addLaggingTimestamps() {\n  const lastDate =\n    snapshotValues.value[snapshotValues.value.length - 1].timestamp / 1000;\n  const days = 30 - snapshotValues.value.length;\n\n  const timestampsArr: number[] = [];\n  for (let i = 1; i <= days; i++) {\n    const timestamp = lastDate - i * twentyFourHoursInSecs;\n    timestampsArr.push(timestamp * 1000);\n  }\n\n  return timestampsArr.map(timestamp =>\n    Object.freeze<[string, number]>([\n      format(\n        addMinutes(timestamp, new Date(timestamp).getTimezoneOffset()),\n        'yyyy/MM/dd'\n      ),\n      0,\n    ])\n  );\n}\n</script>\n\n<template>\n  <BalLoadingBlock v-if=\"loading\" class=\"chart-loading-block\" />\n\n  <div v-else-if=\"snapshotValues.length >= MIN_CHART_VALUES\" class=\"chart\">\n    <div\n      class=\"flex flex-col xs:flex-row xs:flex-wrap justify-between mb-6 dark:border-gray-900\"\n    >\n      <div class=\"flex mb-4\">\n        <BalTabs v-model=\"activeTab\" :tabs=\"tabs\" noPad class=\"mr-6 -mb-px\" />\n        <div class=\"flex items-center\">\n          <PoolChartPeriodSelect\n            :options=\"periodOptions\"\n            :activeOption=\"currentPeriod\"\n            @change-option=\"setCurrentPeriod\"\n          />\n        </div>\n      </div>\n      <div\n        class=\"flex flex-col items-start xs:items-end text-2xl font-semibold tabular-nums\"\n      >\n        <p\n          class=\"tracking-tighter\"\n          :class=\"{\n            'text-red-500': currentChartValue.isNegative && isFocusedOnChart,\n          }\"\n        >\n          {{\n            isFocusedOnChart ? currentChartValue.num : defaultChartData.value\n          }}\n        </p>\n        <div\n          class=\"text-sm font-medium text-secondary\"\n          :class=\"{ 'text-pink-500': isFocusedOnChart }\"\n        >\n          <p>\n            {{ isFocusedOnChart ? currentChartDate : defaultChartData.title }}\n          </p>\n        </div>\n      </div>\n    </div>\n    <BalBlankSlate\n      v-if=\"chartData.data[0].values.length <= MIN_CHART_VALUES\"\n      class=\"h-96\"\n    >\n      <BalIcon name=\"bar-chart\" />\n      {{ $t('noPriceInfo') }}\n    </BalBlankSlate>\n    <BalChart\n      v-else\n      height=\"96\"\n      :data=\"chartData.data\"\n      :axisLabelFormatter=\"{\n        yAxis: {\n          style: 'currency',\n          maximumFractionDigits: 0,\n          fixedFormat: true,\n          abbreviate: true,\n        },\n      }\"\n      :areaStyle=\"chartData.areaStyle\"\n      :color=\"chartData.color\"\n      :hoverColor=\"chartData.hoverColor\"\n      :hoverBorderColor=\"chartData.hoverBorderColor\"\n      :xAxisMinInterval=\"3600 * 1000 * 24 * 30\"\n      :showLegend=\"false\"\n      needChartValue\n      :chartType=\"chartData.chartType\"\n      :showTooltipLayer=\"false\"\n      :hideYAxis=\"isMobile\"\n      @set-current-chart-value=\"setCurrentChartValue\"\n      @mouse-leave-event=\"isFocusedOnChart = false\"\n      @mouse-enter-event=\"isFocusedOnChart = true\"\n    />\n\n    <FxPoolWarning v-if=\"showFxPoolWarning\" />\n  </div>\n  <BalBlankSlate v-else class=\"h-96\" align=\"center\">\n    <BalIcon name=\"bar-chart\" />\n    {{ $t('insufficientData') }}\n  </BalBlankSlate>\n</template>\n\n<style scoped>\n.chart-loading-block {\n  height: 30.9rem;\n}\n\n.chart {\n  @apply sm:border rounded-xl sm:px-5 sm:pt-5 sm:shadow sm:dark:bg-gray-850 dark:border-transparent;\n}\n</style>\n","<script lang=\"ts\" setup>\nimport { computed } from 'vue';\nimport { useI18n } from 'vue-i18n';\n\nimport APRTooltip from '@/components/tooltips/APRTooltip/APRTooltip.vue';\nimport useNumbers, { FNumFormats } from '@/composables/useNumbers';\nimport {\n  isLBP,\n  shouldHideAprs,\n  totalAprLabel,\n} from '@/composables/usePoolHelpers';\nimport { APR_THRESHOLD, VOLUME_THRESHOLD } from '@/constants/pools';\nimport { Pool } from '@/services/pool/types';\nimport { AprBreakdown } from '@balancer-labs/sdk';\n// import { useCrossChainSync } from '@/providers/cross-chain-sync.provider';\n// import useNetwork from '@/composables/useNetwork';\n\n/**\n * TYPES\n */\ntype Props = {\n  pool?: Pool | null;\n  poolApr: AprBreakdown | null;\n  loading?: boolean;\n  loadingApr?: boolean;\n};\n\n/**\n * PROPS & EMITS\n */\nconst props = withDefaults(defineProps<Props>(), {\n  loading: false,\n  pool: null,\n  poolApr: null,\n});\n\n/**\n * COMPOSABLES\n */\nconst { fNum } = useNumbers();\nconst { t } = useI18n();\n// const { l2VeBalBalances } = useCrossChainSync();\n// const { networkId } = useNetwork();\n\n/**\n * COMPUTED\n */\nconst aprLabel = computed((): string => {\n  const poolAPRs = props.poolApr;\n  if (!poolAPRs) return '0';\n\n  return totalAprLabel(poolAPRs, props.pool?.boost);\n});\n\n// const syncVeBalTooltip = computed(() => {\n//   const vebalBalance = Number(l2VeBalBalances.value?.[networkId.value]);\n\n//   if (vebalBalance > 0) {\n//     return 'Remember to resync if you have acquired more veBAL since your last sync, to get a higher boosted staking rate. Resync on the veBAL page on Ethereum Mainnet.';\n//   }\n\n//   if (vebalBalance === 0) {\n//     return 'If you have veBAL, sync your balance on the veBAL page on Ethereum Mainnet to get higher boosted staking rates across L2 networks.';\n//   }\n\n//   return '';\n// });\n\nconst stats = computed(() => {\n  const volumeSnapshot = Number(props.pool?.volumeSnapshot || '0');\n  const feesSnapshot = Number(props.pool?.feesSnapshot || '0');\n  return [\n    {\n      id: 'poolValue',\n      label: t('poolValue'),\n      value: fNum(props.pool?.totalLiquidity || '0', FNumFormats.fiat),\n      loading: props.loading,\n    },\n    {\n      id: 'volumeTime',\n      label: t('volumeTime', ['24h']),\n      value: fNum(\n        volumeSnapshot > VOLUME_THRESHOLD ? '-' : volumeSnapshot,\n        FNumFormats.fiat\n      ),\n      loading: props.loading,\n    },\n    {\n      id: 'feesTime',\n      label: t('feesTime', ['24h']),\n      value: fNum(\n        feesSnapshot > VOLUME_THRESHOLD ? '-' : feesSnapshot,\n        FNumFormats.fiat\n      ),\n      loading: props.loading,\n    },\n    {\n      id: 'apr',\n      label: 'APR',\n      value:\n        Number(props.poolApr?.swapFees || '0') > APR_THRESHOLD ||\n        shouldHideAprs(props.pool?.id || '')\n          ? '-'\n          : aprLabel.value,\n      loading: props.loadingApr,\n      // tooltip: syncVeBalTooltip.value,\n    },\n  ];\n});\n</script>\n\n<template>\n  <div class=\"grid grid-cols-1 sm:grid-cols-2 xl:grid-cols-4 gap-4\">\n    <template v-for=\"stat in stats\" :key=\"stat.id\">\n      <BalLoadingBlock v-if=\"stat.loading || !pool\" class=\"h-24\" />\n      <BalCard v-else>\n        <div class=\"flex mb-2 text-sm font-medium text-secondary\">\n          <span>{{ stat.label }}</span>\n          <template\n            v-if=\"stat.id === 'apr' && poolApr && !shouldHideAprs(pool.id)\"\n          >\n            <BalTooltip\n              v-if=\"isLBP(pool.poolType)\"\n              width=\"36\"\n              :text=\"$t('lbpAprTooltip')\"\n              iconSize=\"sm\"\n              iconClass=\"ml-1\"\n            />\n            <APRTooltip v-else :pool=\"pool\" :poolApr=\"poolApr\" />\n          </template>\n        </div>\n        <div\n          :class=\"[\n            'flex items-center text-xl font-medium',\n            {\n              'text-gray-300 dark:text-gray-600 line-through':\n                stat.id === 'apr' && isLBP(pool.poolType),\n            },\n          ]\"\n        >\n          <span :class=\"{ 'mr-2': stat.tooltip }\">{{ stat.value }}</span>\n          <BalTooltip v-if=\"stat.tooltip\" :text=\"stat.tooltip\">\n            <template #activator>\n              <BalIcon name=\"info\" size=\"sm\" class=\"text-gray-400\" />\n            </template>\n          </BalTooltip>\n        </div>\n      </BalCard>\n    </template>\n  </div>\n</template>\n","import { reactive } from 'vue';\nimport { useInfiniteQuery, UseInfiniteQueryOptions } from '@tanstack/vue-query';\n\nimport { POOLS } from '@/constants/pools';\nimport QUERY_KEYS from '@/constants/queryKeys';\nimport { balancerSubgraphService } from '@/services/balancer/subgraph/balancer-subgraph.service';\nimport { PoolSwap } from '@/services/pool/types';\n\nimport useNetwork from '../useNetwork';\n\ntype PoolSwapsQueryResponse = {\n  poolSwaps: PoolSwap[];\n  skip?: number;\n};\n\ntype QueryOptions = UseInfiniteQueryOptions<PoolSwapsQueryResponse>;\n\nexport default function usePoolSwapsQuery(\n  id: string,\n  subgraphQuery: Record<string, any> = {},\n  options: QueryOptions = {}\n) {\n  // COMPOSABLES\n  const { networkId } = useNetwork();\n\n  // DATA\n  const queryKey = reactive(\n    QUERY_KEYS.Pools.Swaps(networkId, id, subgraphQuery)\n  );\n\n  // METHODS\n  const queryFn = async ({ pageParam = 0 }) => {\n    const pagination =\n      pageParam === 0\n        ? POOLS.Pagination.PerPoolInitial\n        : POOLS.Pagination.PerPool;\n\n    const poolSwaps = await balancerSubgraphService.poolSwaps.get({\n      first: pagination,\n      skip: pageParam,\n      where: Object.assign(\n        {\n          poolId: id,\n        },\n        subgraphQuery\n      ),\n    });\n\n    return {\n      poolSwaps,\n      skip: poolSwaps.length >= pagination ? pageParam + pagination : undefined,\n    };\n  };\n\n  const queryOptions = reactive({\n    getNextPageParam: (lastPage: PoolSwapsQueryResponse) => lastPage.skip,\n    ...options,\n  });\n\n  return useInfiniteQuery<PoolSwapsQueryResponse>(\n    queryKey,\n    queryFn,\n    queryOptions as QueryOptions\n  );\n}\n","import { computed, reactive } from 'vue';\nimport { useInfiniteQuery, UseInfiniteQueryOptions } from '@tanstack/vue-query';\n\nimport { POOLS } from '@/constants/pools';\nimport QUERY_KEYS from '@/constants/queryKeys';\nimport { balancerSubgraphService } from '@/services/balancer/subgraph/balancer-subgraph.service';\nimport { PoolSwap } from '@/services/pool/types';\nimport useWeb3 from '@/services/web3/useWeb3';\n\nimport useNetwork from '../useNetwork';\n\ntype PoolSwapsQueryResponse = {\n  poolSwaps: PoolSwap[];\n  skip?: number;\n};\n\ntype QueryOptions = UseInfiniteQueryOptions<PoolSwapsQueryResponse>;\n\nexport default function useUserPoolSwapsQuery(\n  id: string,\n  options: QueryOptions = {}\n) {\n  // COMPOSABLES\n  const { account, isWalletReady } = useWeb3();\n  const { networkId } = useNetwork();\n\n  // COMPUTED\n  const enabled = computed(() => isWalletReady.value && account.value != null);\n\n  // DATA\n  const queryKey = reactive(QUERY_KEYS.Pools.UserSwaps(networkId, id, account));\n\n  // METHODS\n  const queryFn = async ({ pageParam = 0 }) => {\n    const poolSwaps = await balancerSubgraphService.poolSwaps.get({\n      first: POOLS.Pagination.PerPage,\n      skip: pageParam,\n      where: {\n        userAddress: account.value.toLowerCase(),\n        poolId: id,\n      },\n    });\n\n    return {\n      poolSwaps,\n      skip:\n        poolSwaps.length >= POOLS.Pagination.PerPage\n          ? pageParam + POOLS.Pagination.PerPage\n          : undefined,\n    };\n  };\n\n  const queryOptions = reactive({\n    enabled,\n    getNextPageParam: (lastPage: PoolSwapsQueryResponse) => lastPage.skip,\n    ...options,\n  });\n\n  return useInfiniteQuery<PoolSwapsQueryResponse>(\n    queryKey,\n    queryFn,\n    queryOptions as QueryOptions\n  );\n}\n","export enum PoolTransactionsTab {\n  ALL_ACTIVITY = 'allActivity',\n  USER_ACTIVITY = 'userActivity',\n  SWAPS = 'swaps',\n}\n","<script setup lang=\"ts\">\nimport { formatDistanceToNow } from 'date-fns';\nimport { groupBy } from 'lodash';\nimport { computed } from 'vue';\nimport { useI18n } from 'vue-i18n';\n\nimport { ColumnDefinition } from '@/components/_global/BalTable/types';\n\nimport useBreakpoints from '@/composables/useBreakpoints';\nimport useNumbers, { FNumFormats } from '@/composables/useNumbers';\nimport { useTokens } from '@/providers/tokens.provider';\nimport { bnum } from '@/lib/utils';\nimport { Pool, PoolSwap } from '@/services/pool/types';\nimport useWeb3 from '@/services/web3/useWeb3';\n\n/**\n * TYPES\n */\ntype TokenAmount = {\n  address: string;\n  amount: string;\n};\n\ntype SwapType = 'invest' | 'withdraw' | 'swap';\n\ntype SwapRow = {\n  label: string;\n  timestamp: number;\n  formattedDate: string;\n  value: number;\n  formattedValue: string;\n  type: SwapType;\n  tx: string;\n  tokenAmounts: TokenAmount[];\n};\n\ntype Props = {\n  poolSwaps: PoolSwap[];\n  isLoading?: boolean;\n  isLoadingMore?: boolean;\n  loadMore?: () => void;\n  isPaginated?: boolean;\n  noResultsLabel?: string;\n  pool: Pool;\n};\n\n/**\n * PROPS & EMITS\n */\nconst props = withDefaults(defineProps<Props>(), {\n  isLoading: false,\n  isLoadingMore: false,\n  isPaginated: false,\n  noResultsLabel: '',\n});\n\nconst emit = defineEmits(['loadMore']);\n\n/**\n * COMPOSABLES\n */\nconst { fNum } = useNumbers();\nconst { t } = useI18n();\nconst { priceFor } = useTokens();\nconst { upToLargeBreakpoint } = useBreakpoints();\nconst { explorerLinks } = useWeb3();\n\n/**\n * COMPUTED\n */\nconst columns = computed<ColumnDefinition<SwapRow>[]>(() => [\n  {\n    name: t('action'),\n    id: 'action',\n    accessor: 'tx',\n    Cell: 'actionCell',\n    width: 150,\n    sortable: false,\n  },\n  {\n    name: t('details'),\n    id: 'details',\n    accessor: '',\n    Cell: 'detailsCell',\n    width: 325,\n    sortable: false,\n  },\n  {\n    name: t('value'),\n    id: 'value',\n    accessor: 'value',\n    Cell: 'valueCell',\n    align: 'right',\n    className: 'align-center w-40',\n    sortKey: pool => pool.value,\n    width: 125,\n  },\n  {\n    name: t('time'),\n    id: 'timeAgo',\n    accessor: 'timestamp',\n    Cell: 'timeCell',\n    align: 'right',\n    sortKey: pool => pool.timestamp,\n    width: 200,\n  },\n]);\n\nconst swapRows = computed<SwapRow[]>(() => {\n  if (props.isLoading) {\n    return [];\n  }\n\n  const groupedSwaps = Object.entries(groupBy(props.poolSwaps, 'tx'));\n\n  return groupedSwaps.map(([tx, swaps]) => {\n    const { tokenIn, tokenOut, timestamp } = swaps[0];\n\n    let type: SwapType;\n    let label: string;\n\n    if (tokenOut === props.pool.address) {\n      type = 'invest';\n      label = t('pool');\n    } else if (tokenIn === props.pool.address) {\n      type = 'withdraw';\n      label = t('withdraw.label');\n    } else {\n      type = 'swap';\n      label = t('swap');\n    }\n\n    const tokenAmounts = getTokenAmounts(swaps, type);\n    const value = getTransactionValue(tokenAmounts, type);\n\n    return {\n      label,\n      type,\n      value,\n      formattedValue:\n        value > 0 ? fNum(value, { style: 'currency', abbreviate: true }) : '-',\n      timestamp,\n      formattedDate: t('timeAgo', [formatDistanceToNow(timestamp)]),\n      tx,\n      tokenAmounts,\n    };\n  });\n});\n\n/**\n * METHODS\n */\nfunction getTransactionValue(tokenAmounts: TokenAmount[], type: SwapType) {\n  if (type === 'swap') {\n    const mainTokenAddress = getUnderlyingTokenAddress(tokenAmounts[1].address);\n    const mainEquivAmount = getMainTokenEquivalentAmount(\n      tokenAmounts[1].address,\n      tokenAmounts[1].amount\n    );\n    return bnum(priceFor(mainTokenAddress)).times(mainEquivAmount).toNumber();\n  }\n\n  let total = bnum(0);\n\n  for (const { address, amount } of tokenAmounts) {\n    const mainTokenAddress = getUnderlyingTokenAddress(address);\n    const mainEquivAmount = getMainTokenEquivalentAmount(address, amount);\n    const price = priceFor(mainTokenAddress);\n    const amountNumber = Math.abs(parseFloat(mainEquivAmount.toString()));\n\n    // If the price is unknown for any of the positive amounts - the value cannot be computed.\n    if (amountNumber > 0 && price === 0) {\n      return 0;\n    }\n\n    total = total.plus(bnum(amountNumber).times(price));\n  }\n\n  return total.toNumber();\n}\n\nfunction getTokenAmounts(swaps: PoolSwap[], type: SwapType) {\n  const isInvest = type === 'invest';\n\n  if (type === 'swap') {\n    const swap = swaps[0];\n    const { tokenIn, tokenOut, tokenAmountIn, tokenAmountOut } = swap;\n\n    return [\n      {\n        address: tokenIn,\n        amount: tokenAmountIn,\n      },\n      {\n        address: tokenOut,\n        amount: tokenAmountOut,\n      },\n    ];\n  }\n  return swaps.map(swap => {\n    let address = isInvest ? swap.tokenIn : swap.tokenOut;\n\n    return {\n      address,\n      amount: isInvest ? swap.tokenAmountIn : swap.tokenAmountOut,\n    };\n  });\n}\n\nfunction getUnderlyingTokenAddress(address: string) {\n  const linearPools = props.pool?.onchain?.linearPools;\n  return linearPools != null && linearPools[address] != null\n    ? linearPools[address].mainToken.address\n    : address;\n}\n\nfunction getMainTokenEquivalentAmount(address: string, amount: string) {\n  const linearPools = props.pool?.onchain?.linearPools;\n  return linearPools != null && linearPools[address] != null\n    ? bnum(amount).times(linearPools[address].priceRate)\n    : bnum(amount);\n}\n</script>\n\n<template>\n  <BalCard\n    class=\"overflow-x-auto\"\n    :square=\"upToLargeBreakpoint\"\n    :noBorder=\"upToLargeBreakpoint\"\n    noPad\n  >\n    <BalTable\n      :columns=\"columns\"\n      :data=\"swapRows\"\n      :isLoading=\"isLoading\"\n      :isLoadingMore=\"isLoadingMore\"\n      :isPaginated=\"isPaginated\"\n      skeletonClass=\"h-64\"\n      sticky=\"both\"\n      :noResultsLabel=\"noResultsLabel\"\n      :initialState=\"{\n        sortColumn: 'timeAgo',\n        sortDirection: 'desc',\n      }\"\n      @load-more=\"emit('loadMore')\"\n    >\n      <template #actionCell=\"action\">\n        <div class=\"py-2 px-6\">\n          <div class=\"flex items-center\">\n            <div class=\"flex mr-3 center\">\n              <BalIcon\n                v-if=\"action.type === 'invest'\"\n                name=\"plus\"\n                size=\"sm\"\n                class=\"text-green-500 dark:text-green-400\"\n              />\n              <BalIcon\n                v-else-if=\"action.type === 'withdraw'\"\n                name=\"minus\"\n                size=\"sm\"\n                class=\"text-red-500\"\n              />\n              <BalIcon\n                v-else\n                name=\"repeat\"\n                size=\"sm\"\n                class=\"text-green-500 dark:text-green-400\"\n              />\n            </div>\n            <div>{{ action.label }}</div>\n          </div>\n        </div>\n      </template>\n\n      <template #detailsCell=\"action\">\n        <div class=\"flex flex-wrap items-center py-4 px-6 -mt-1\">\n          <template v-if=\"action.type === 'swap'\">\n            <div class=\"token-item\">\n              <BalAsset\n                :address=\"action.tokenAmounts[0].address\"\n                class=\"mr-2 shrink-0\"\n              />\n              <span class=\"font-numeric\">{{\n                fNum(action.tokenAmounts[0].amount, FNumFormats.token)\n              }}</span>\n            </div>\n            <BalIcon name=\"arrow-right\" class=\"mx-1\" />\n            <div class=\"token-item\">\n              <BalAsset\n                :address=\"action.tokenAmounts[1].address\"\n                class=\"mr-2 shrink-0\"\n              />\n              <span class=\"font-numeric\">{{\n                fNum(action.tokenAmounts[1].amount, FNumFormats.token)\n              }}</span>\n            </div>\n          </template>\n          <template v-else>\n            <template v-for=\"(tokenAmount, i) in action.tokenAmounts\" :key=\"i\">\n              <div\n                v-if=\"tokenAmount.amount !== '0'\"\n                class=\"flex items-center p-1 px-2 m-1 bg-gray-50 dark:bg-gray-700 rounded-lg\"\n              >\n                <BalAsset\n                  :address=\"tokenAmount.address\"\n                  class=\"mr-2 shrink-0\"\n                />\n                <span class=\"font-numeric\">{{\n                  fNum(tokenAmount.amount, FNumFormats.token)\n                }}</span>\n              </div>\n            </template>\n          </template>\n        </div>\n      </template>\n\n      <template #valueCell=\"action\">\n        <div class=\"flex justify-end py-4 px-6 font-numeric\">\n          {{ action.formattedValue }}\n        </div>\n      </template>\n\n      <template #timeCell=\"action\">\n        <div class=\"py-4 px-6\">\n          <div\n            class=\"flex justify-end items-center text-right whitespace-nowrap wrap\"\n          >\n            {{ action.formattedDate }}\n            <BalLink\n              :href=\"explorerLinks.txLink(action.tx)\"\n              external\n              class=\"flex items-center ml-2\"\n            >\n              <BalIcon\n                name=\"arrow-up-right\"\n                size=\"sm\"\n                class=\"hover:text-blue-600 dark:hover:text-blue-400 transition-colors text-secondary\"\n              />\n            </BalLink>\n          </div>\n        </div>\n      </template>\n    </BalTable>\n  </BalCard>\n</template>\n\n<style scoped>\n.token-item {\n  @apply m-1 flex items-center p-1 px-2 bg-gray-50 dark:bg-gray-700 rounded-lg;\n}\n</style>\n","<script setup lang=\"ts\">\nimport { flatten } from 'lodash';\nimport { computed } from 'vue';\n\nimport usePoolSwapsQuery from '@/composables/queries/usePoolSwapsQuery';\nimport useUserPoolSwapsQuery from '@/composables/queries/useUserPoolSwapsQuery';\nimport { Pool } from '@/services/pool/types';\n\nimport { PoolTransactionsTab } from '../types';\nimport Table from './Table.vue';\n\n/**\n * TYPES\n */\ntype Props = {\n  pool: Pool;\n  loading: boolean;\n  poolActivityType: PoolTransactionsTab;\n};\n\n/**\n * PROPS\n */\nconst props = withDefaults(defineProps<Props>(), {\n  loading: false,\n  poolActivityType: PoolTransactionsTab.ALL_ACTIVITY,\n});\n\n/**\n * QUERIES\n */\n\nconst poolSwapsQuery =\n  props.poolActivityType === PoolTransactionsTab.ALL_ACTIVITY\n    ? usePoolSwapsQuery(props.pool.id)\n    : useUserPoolSwapsQuery(props.pool.id);\n\n/**\n * COMPUTED\n */\nconst poolSwaps = computed(() =>\n  poolSwapsQuery.data.value\n    ? flatten(poolSwapsQuery.data.value.pages.map(page => page.poolSwaps))\n    : []\n);\nconst isLoadingPoolSwaps = computed(() => poolSwapsQuery.isLoading.value);\nconst poolSwapsHasNextPage = computed(() => poolSwapsQuery.hasNextPage?.value);\nconst poolSwapsIsFetchingNextPage = computed(\n  () => poolSwapsQuery.isFetchingNextPage?.value\n);\n\n/**\n * METHODS\n */\nfunction loadMorePoolSwaps() {\n  poolSwapsQuery.fetchNextPage();\n}\n</script>\n\n<template>\n  <Table\n    :poolSwaps=\"poolSwaps\"\n    :pool=\"pool\"\n    :isLoading=\"loading || isLoadingPoolSwaps\"\n    :isLoadingMore=\"poolSwapsIsFetchingNextPage\"\n    :isPaginated=\"poolSwapsHasNextPage\"\n    :noResultsLabel=\"\n      poolActivityType === PoolTransactionsTab.ALL_ACTIVITY\n        ? $t('poolTransactions.noResults.allTransactions')\n        : $t('poolTransactions.noResults.myTransactions')\n    \"\n    @load-more=\"loadMorePoolSwaps\"\n  />\n</template>\n","import { reactive } from 'vue';\nimport { useInfiniteQuery, UseInfiniteQueryOptions } from '@tanstack/vue-query';\n\nimport { POOLS } from '@/constants/pools';\nimport QUERY_KEYS from '@/constants/queryKeys';\nimport { balancerSubgraphService } from '@/services/balancer/subgraph/balancer-subgraph.service';\nimport { PoolActivity } from '@/services/pool/types';\n\nimport useNetwork from '../useNetwork';\n\ntype PoolActivitiesQueryResponse = {\n  poolActivities: PoolActivity[];\n  skip?: number;\n};\n\ntype QueryOptions = UseInfiniteQueryOptions<PoolActivitiesQueryResponse>;\n\nexport default function usePoolActivitiesQuery(\n  id: string,\n  options: QueryOptions = {}\n) {\n  // COMPOSABLES\n  const { networkId } = useNetwork();\n\n  // DATA\n  const queryKey = reactive(QUERY_KEYS.Pools.Activities(networkId, id));\n\n  // METHODS\n  const queryFn = async ({ pageParam = 0 }) => {\n    const pagination =\n      pageParam === 0\n        ? POOLS.Pagination.PerPoolInitial\n        : POOLS.Pagination.PerPool;\n\n    const poolActivities = await balancerSubgraphService.poolActivities.get({\n      first: pagination,\n      skip: pageParam,\n      where: {\n        pool: id,\n      },\n    });\n\n    return {\n      poolActivities,\n      skip:\n        poolActivities.length >= pagination\n          ? pageParam + pagination\n          : undefined,\n    };\n  };\n\n  const queryOptions = reactive({\n    getNextPageParam: (lastPage: PoolActivitiesQueryResponse) => lastPage.skip,\n    ...options,\n  });\n\n  return useInfiniteQuery<PoolActivitiesQueryResponse>(\n    queryKey,\n    queryFn,\n    queryOptions as QueryOptions\n  );\n}\n","import { computed, reactive } from 'vue';\nimport { useInfiniteQuery, UseInfiniteQueryOptions } from '@tanstack/vue-query';\n\nimport { POOLS } from '@/constants/pools';\nimport QUERY_KEYS from '@/constants/queryKeys';\nimport { balancerSubgraphService } from '@/services/balancer/subgraph/balancer-subgraph.service';\nimport { PoolActivity } from '@/services/pool/types';\nimport useWeb3 from '@/services/web3/useWeb3';\n\nimport useNetwork from '../useNetwork';\n\ntype UserPoolActivitiesQueryResponse = {\n  poolActivities: PoolActivity[];\n  skip?: number;\n};\n\ntype QueryOptions = UseInfiniteQueryOptions<UserPoolActivitiesQueryResponse>;\n\nexport default function usePoolUserActivitiesQuery(\n  id: string,\n  options: QueryOptions = {}\n) {\n  // COMPOSABLES\n  const { account, isWalletReady } = useWeb3();\n  const { networkId } = useNetwork();\n\n  // COMPUTED\n  const enabled = computed(() => isWalletReady.value && account.value != null);\n\n  // DATA\n  const queryKey = reactive(\n    QUERY_KEYS.Pools.UserActivities(networkId, id, account)\n  );\n\n  // METHODS\n  const queryFn = async ({ pageParam = 0 }) => {\n    const pagination =\n      pageParam === 0\n        ? POOLS.Pagination.PerPoolInitial\n        : POOLS.Pagination.PerPool;\n\n    const poolActivities = await balancerSubgraphService.poolActivities.get({\n      first: pagination,\n      skip: pageParam,\n      where: {\n        pool: id,\n        sender: account.value.toLowerCase(),\n      },\n    });\n\n    return {\n      poolActivities,\n      skip:\n        poolActivities.length >= pagination\n          ? pageParam + pagination\n          : undefined,\n    };\n  };\n\n  const queryOptions = reactive({\n    enabled,\n    getNextPageParam: (lastPage: UserPoolActivitiesQueryResponse) =>\n      lastPage.skip,\n    ...options,\n  });\n\n  return useInfiniteQuery<UserPoolActivitiesQueryResponse>(\n    queryKey,\n    queryFn,\n    queryOptions as QueryOptions\n  );\n}\n","<script setup lang=\"ts\">\nimport { getAddress } from '@ethersproject/address';\nimport { formatDistanceToNow } from 'date-fns';\nimport { computed } from 'vue';\nimport { useI18n } from 'vue-i18n';\n\nimport { ColumnDefinition } from '@/components/_global/BalTable/types';\n\nimport useBreakpoints from '@/composables/useBreakpoints';\nimport useNumbers, { FNumFormats } from '@/composables/useNumbers';\nimport { useTokens } from '@/providers/tokens.provider';\nimport { bnum } from '@/lib/utils';\nimport { Pool, PoolActivity, PoolActivityType } from '@/services/pool/types';\nimport useWeb3 from '@/services/web3/useWeb3';\nimport { preMintedBptIndex } from '@/composables/usePoolHelpers';\n\n/**\n * TYPES\n */\ntype TokenAmount = {\n  address: string;\n  symbol: string;\n  amount: string;\n};\n\ntype ActivityRow = {\n  label: string;\n  formattedValue: string;\n  value: number;\n  timestamp: number;\n  formattedDate: string;\n  tx: string;\n  type: PoolActivityType;\n  tokenAmounts: TokenAmount[];\n};\n\ntype Props = {\n  tokens: string[];\n  pool: Pool;\n  poolActivities: PoolActivity[];\n  isLoading?: boolean;\n  isLoadingMore?: boolean;\n  loadMore?: () => void;\n  isPaginated?: boolean;\n  noResultsLabel?: string;\n};\n\n/**\n * PROPS & EMITS\n */\nconst props = withDefaults(defineProps<Props>(), {\n  isLoading: false,\n  isLoadingMore: false,\n  isPaginated: false,\n  noResultsLabel: '',\n});\n\nconst emit = defineEmits(['loadMore']);\n\n/**\n * COMPOSABLES\n */\nconst { fNum } = useNumbers();\nconst { t } = useI18n();\nconst { explorerLinks } = useWeb3();\nconst { upToLargeBreakpoint } = useBreakpoints();\nconst { getToken, priceFor } = useTokens();\n/**\n * COMPUTED\n */\nconst columns = computed<ColumnDefinition<ActivityRow>[]>(() => [\n  {\n    name: t('action'),\n    id: 'action',\n    accessor: 'tx',\n    Cell: 'actionCell',\n    width: 150,\n    sortable: false,\n  },\n  {\n    name: t('value'),\n    id: 'value',\n    accessor: 'value',\n    Cell: 'valueCell',\n    align: 'right',\n    className: 'align-center w-40',\n    sortKey: pool => pool.value,\n    width: 125,\n  },\n  {\n    name: t('tokens'),\n    id: 'details',\n    accessor: '',\n    Cell: 'detailsCell',\n    width: 325,\n    sortable: false,\n  },\n  {\n    name: t('time'),\n    id: 'timeAgo',\n    accessor: 'timestamp',\n    Cell: 'timeCell',\n    align: 'right',\n    sortKey: pool => pool.timestamp,\n    width: 200,\n  },\n]);\n\nconst activityRows = computed<ActivityRow[]>(() =>\n  props.isLoading\n    ? []\n    : props.poolActivities.map(({ type, timestamp, tx, amounts }) => {\n        const poolTokenItselfIndex = preMintedBptIndex(props.pool);\n\n        const amountExcludedPoolTokenItself = amounts.filter(\n          (amount, index) => index !== poolTokenItselfIndex\n        );\n\n        const isJoin = type === 'Join';\n        const value = getJoinExitValue(amountExcludedPoolTokenItself);\n\n        return {\n          label: isJoin ? t('addTokens') : t('withdraw.label'),\n          value,\n          formattedValue:\n            value > 0\n              ? fNum(value, { style: 'currency', abbreviate: true })\n              : '-',\n          timestamp,\n          formattedDate: t('timeAgo', [formatDistanceToNow(timestamp)]),\n          tx,\n          type,\n          tokenAmounts: getJoinExitDetails(amountExcludedPoolTokenItself),\n        };\n      })\n);\n\n/**\n * METHODS\n */\nfunction getJoinExitValue(amounts: PoolActivity['amounts']) {\n  let total = bnum(0);\n\n  for (let i = 0; i < amounts.length; i++) {\n    const amount = amounts[i];\n    const address = getAddress(props.tokens[i]);\n    const token = getToken(address);\n    const price = priceFor(token?.address);\n    const amountNumber = Math.abs(parseFloat(amount));\n    // If the price is unknown for any of the positive amounts - the value cannot be computed.\n    if (amountNumber > 0 && price === 0) {\n      return 0;\n    }\n    total = total.plus(bnum(amountNumber).times(price));\n  }\n  return total.toNumber();\n}\n\nfunction getJoinExitDetails(amounts: PoolActivity['amounts']) {\n  return amounts.map((amount, i) => {\n    const address = getAddress(props.tokens[i]);\n    const token = getToken(address);\n    const symbol = token ? token.symbol : address;\n    const amountNumber = parseFloat(amount);\n    return {\n      address,\n      symbol,\n      amount: fNum(amountNumber, FNumFormats.token),\n    };\n  });\n}\n</script>\n\n<template>\n  <BalCard\n    class=\"overflow-x-auto\"\n    :square=\"upToLargeBreakpoint\"\n    :noBorder=\"upToLargeBreakpoint\"\n    noPad\n  >\n    <BalTable\n      :columns=\"columns\"\n      :data=\"activityRows\"\n      :isLoading=\"isLoading\"\n      :isLoadingMore=\"isLoadingMore\"\n      :isPaginated=\"isPaginated\"\n      skeletonClass=\"h-64\"\n      sticky=\"both\"\n      :noResultsLabel=\"noResultsLabel\"\n      :initialState=\"{\n        sortColumn: 'timeAgo',\n        sortDirection: 'desc',\n      }\"\n      @load-more=\"emit('loadMore')\"\n    >\n      <template #actionCell=\"action\">\n        <div class=\"py-2 px-6\">\n          <div class=\"flex items-center\">\n            <div class=\"flex mr-3 center\">\n              <BalIcon\n                v-if=\"action.type === 'Join'\"\n                name=\"plus\"\n                size=\"sm\"\n                class=\"text-green-500 dark:text-green-400\"\n              />\n              <BalIcon v-else name=\"minus\" size=\"sm\" class=\"text-red-500\" />\n            </div>\n            <div class=\"text-left\">{{ action.label }}</div>\n          </div>\n        </div>\n      </template>\n\n      <template #detailsCell=\"action\">\n        <div class=\"flex flex-wrap py-4 px-6 -mt-1\">\n          <template v-for=\"(tokenAmount, i) in action.tokenAmounts\" :key=\"i\">\n            <div\n              v-if=\"tokenAmount.amount !== '0'\"\n              class=\"flex items-center p-1 px-2 m-1 bg-gray-50 dark:bg-gray-700 rounded-lg\"\n            >\n              <BalAsset :address=\"tokenAmount.address\" class=\"mr-2 shrink-0\" />\n              <span class=\"font-numeric\">{{ tokenAmount.amount }}</span>\n            </div>\n          </template>\n        </div>\n      </template>\n\n      <template #valueCell=\"action\">\n        <div class=\"flex justify-end py-4 px-6 font-numeric\">\n          {{ action.formattedValue }}\n        </div>\n      </template>\n\n      <template #timeCell=\"action\">\n        <div class=\"py-4 px-6\">\n          <div\n            class=\"flex justify-end items-center text-right whitespace-nowrap wrap\"\n          >\n            {{ action.formattedDate }}\n            <BalLink\n              :href=\"explorerLinks.txLink(action.tx)\"\n              external\n              class=\"flex items-center ml-2\"\n            >\n              <BalIcon\n                name=\"arrow-up-right\"\n                size=\"sm\"\n                class=\"text-gray-500 hover:text-blue-500 transition-colors\"\n              />\n            </BalLink>\n          </div>\n        </div>\n      </template>\n    </BalTable>\n  </BalCard>\n</template>\n","<script setup lang=\"ts\">\nimport { flatten } from 'lodash';\nimport { computed } from 'vue';\n\nimport usePoolActivitiesQuery from '@/composables/queries/usePoolActivitiesQuery';\nimport usePoolUserActivitiesQuery from '@/composables/queries/usePoolUserActivitiesQuery';\nimport { Pool } from '@/services/pool/types';\n\nimport { PoolTransactionsTab } from '../types';\nimport Table from './Table.vue';\nimport { tokensListExclBpt } from '@/composables/usePoolHelpers';\n\n/**\n * TYPES\n */\ntype Props = {\n  pool: Pool;\n  loading: boolean;\n  poolActivityType: PoolTransactionsTab;\n};\n\n/**\n * PROPS\n */\nconst props = withDefaults(defineProps<Props>(), {\n  loading: false,\n  poolActivityType: PoolTransactionsTab.ALL_ACTIVITY,\n});\n\n/**\n * QUERIES\n */\n\nconst poolActivitiesQuery =\n  props.poolActivityType === PoolTransactionsTab.ALL_ACTIVITY\n    ? usePoolActivitiesQuery(props.pool.id)\n    : usePoolUserActivitiesQuery(props.pool.id);\n\n/**\n * COMPUTED\n */\nconst poolActivities = computed(() =>\n  poolActivitiesQuery.data.value\n    ? flatten(\n        poolActivitiesQuery.data.value.pages.map(page => page.poolActivities)\n      )\n    : []\n);\nconst isLoadingPoolActivities = computed(\n  () => poolActivitiesQuery.isLoading.value\n);\nconst poolActivitiesHasNextPage = computed(\n  () => poolActivitiesQuery.hasNextPage?.value\n);\nconst poolActivitiesIsFetchingNextPage = computed(\n  () => poolActivitiesQuery.isFetchingNextPage?.value\n);\n\n/**\n * METHODS\n */\nfunction loadMorePoolActivities() {\n  poolActivitiesQuery.fetchNextPage();\n}\n</script>\n\n<template>\n  <Table\n    :pool=\"pool\"\n    :tokens=\"tokensListExclBpt(pool)\"\n    :poolActivities=\"poolActivities\"\n    :isLoading=\"loading || isLoadingPoolActivities\"\n    :isLoadingMore=\"poolActivitiesIsFetchingNextPage\"\n    :isPaginated=\"poolActivitiesHasNextPage\"\n    :noResultsLabel=\"\n      poolActivityType === PoolTransactionsTab.ALL_ACTIVITY\n        ? $t('poolTransactions.noResults.allInvestments')\n        : $t('poolTransactions.noResults.myInvestments')\n    \"\n    @load-more=\"loadMorePoolActivities\"\n  />\n</template>\n","<script setup lang=\"ts\">\nimport { computed, ref, toRef } from 'vue';\nimport { useI18n } from 'vue-i18n';\n\nimport { usePoolHelpers } from '@/composables/usePoolHelpers';\nimport { Pool } from '@/services/pool/types';\n\nimport BoostedActivities from '../BoostedPoolActivities/Activities.vue';\nimport Activities from '../PoolActivities/Activities.vue';\nimport { PoolTransactionsTab } from '../types';\nimport useWeb3 from '@/services/web3/useWeb3';\n\n/**\n * TYPES\n */\ntype Props = {\n  pool: Pool;\n  loading: boolean;\n};\n\n/**\n * PROPS\n */\nconst props = withDefaults(defineProps<Props>(), {\n  loading: false,\n});\n\n/**\n * COMPOSABLES\n */\nconst { isWalletReady } = useWeb3();\n\n/**\n * COMPUTED\n */\nconst tabs = computed(() =>\n  isDeepPool.value || isStablePhantomPool.value\n    ? [\n        {\n          value: PoolTransactionsTab.ALL_ACTIVITY,\n          label: t('poolTransactions.tabs.allTransactions'),\n        },\n        ...(isWalletReady.value\n          ? [\n              {\n                value: PoolTransactionsTab.USER_ACTIVITY,\n                label: t('poolTransactions.tabs.myTransactions'),\n              },\n            ]\n          : []),\n      ]\n    : [\n        {\n          value: PoolTransactionsTab.ALL_ACTIVITY,\n          label: t('poolTransactions.tabs.allInvestments'),\n        },\n        ...(isWalletReady.value\n          ? [\n              {\n                value: PoolTransactionsTab.USER_ACTIVITY,\n                label: t('poolTransactions.tabs.myInvestments'),\n              },\n            ]\n          : []),\n      ]\n);\n\n/**\n * COMPOSABLES\n */\nconst { isDeepPool, isStablePhantomPool } = usePoolHelpers(\n  toRef(props, 'pool')\n);\nconst { t } = useI18n();\n\n/**\n * STATE\n */\nconst activeTab = ref(tabs.value[0].value);\n\n/**\n * COMPUTED\n */\nconst title = computed((): string => {\n  if (isDeepPool.value || isStablePhantomPool.value) return t('poolActivity');\n\n  return t('liquidityProvision');\n});\n</script>\n\n<template>\n  <div class=\"mb-5\">\n    <div>\n      <h3 class=\"px-4 lg:px-0 mb-3\" v-text=\"title\" />\n      <div\n        class=\"flex justify-between items-end mx-4 lg:mx-0 mb-6 border-b dark:border-gray-900\"\n      >\n        <BalTabs v-model=\"activeTab\" :tabs=\"tabs\" noPad class=\"-mb-px\" />\n      </div>\n    </div>\n\n    <template v-if=\"isStablePhantomPool || isDeepPool\">\n      <BoostedActivities\n        v-if=\"activeTab === PoolTransactionsTab.ALL_ACTIVITY\"\n        :poolActivityType=\"PoolTransactionsTab.ALL_ACTIVITY\"\n        :pool=\"pool\"\n        :loading=\"loading\"\n      />\n      <BoostedActivities\n        v-else-if=\"activeTab === PoolTransactionsTab.USER_ACTIVITY\"\n        :poolActivityType=\"PoolTransactionsTab.USER_ACTIVITY\"\n        :pool=\"pool\"\n        :loading=\"loading\"\n      />\n    </template>\n    <template v-else>\n      <div class=\"mb-20\">\n        <Activities\n          v-if=\"activeTab === PoolTransactionsTab.ALL_ACTIVITY\"\n          :poolActivityType=\"PoolTransactionsTab.ALL_ACTIVITY\"\n          :pool=\"pool\"\n          :loading=\"loading\"\n        />\n        <Activities\n          v-else-if=\"activeTab === PoolTransactionsTab.USER_ACTIVITY\"\n          :poolActivityType=\"PoolTransactionsTab.USER_ACTIVITY\"\n          :pool=\"pool\"\n          :loading=\"loading\"\n        />\n      </div>\n    </template>\n  </div>\n</template>\n","<script setup lang=\"ts\">\nimport { formatDistanceToNow } from 'date-fns';\nimport { computed } from 'vue';\nimport { useI18n } from 'vue-i18n';\n\nimport { ColumnDefinition } from '@/components/_global/BalTable/types';\n\nimport useBreakpoints from '@/composables/useBreakpoints';\nimport useNumbers, { FNumFormats } from '@/composables/useNumbers';\nimport { useTokens } from '@/providers/tokens.provider';\nimport { shortenLabel } from '@/lib/utils';\nimport { bnum } from '@/lib/utils';\nimport { PoolSwap } from '@/services/pool/types';\nimport useWeb3 from '@/services/web3/useWeb3';\n\n/**\n * TYPES\n */\ntype SwapRow = {\n  tokenIn: string;\n  tokenOut: string;\n  tokenAmountIn: string;\n  tokenAmountOut: string;\n  timestamp: number;\n  formattedDate: string;\n  value: number;\n  formattedValue: string;\n  tx: string;\n};\n\ntype Props = {\n  poolSwaps: PoolSwap[];\n  isLoading?: boolean;\n  isLoadingMore?: boolean;\n  loadMore?: () => void;\n  isPaginated?: boolean;\n  noResultsLabel?: string;\n};\n\n/**\n * PROPS & EMITS\n */\nconst props = withDefaults(defineProps<Props>(), {\n  isLoading: false,\n  isLoadingMore: false,\n  isPaginated: false,\n  noResultsLabel: '',\n});\n\nconst emit = defineEmits(['loadMore']);\n\n/**\n * COMPOSABLES\n */\nconst { fNum } = useNumbers();\nconst { t } = useI18n();\nconst { priceFor } = useTokens();\nconst { upToLargeBreakpoint } = useBreakpoints();\nconst { explorerLinks } = useWeb3();\n\n/**\n * COMPUTED\n */\nconst columns = computed<ColumnDefinition<SwapRow>[]>(() => [\n  {\n    name: t('swapper'),\n    id: 'action',\n    accessor: 'tx',\n    Cell: 'actionCell',\n    width: 190,\n    sortable: false,\n  },\n  {\n    name: t('value'),\n    id: 'value',\n    accessor: 'value',\n    Cell: 'valueCell',\n    align: 'right',\n    className: 'align-center w-40',\n    sortKey: pool => pool.value,\n    width: 125,\n  },\n  {\n    name: t('swapDetails'),\n    id: 'details',\n    accessor: '',\n    Cell: 'detailsCell',\n    width: 310,\n    sortable: false,\n  },\n\n  {\n    name: t('time'),\n    id: 'timeAgo',\n    accessor: 'timestamp',\n    Cell: 'timeCell',\n    align: 'right',\n    sortKey: pool => pool.timestamp,\n    width: 190,\n  },\n]);\n\nconst swapRows = computed<SwapRow[]>(() =>\n  props.isLoading\n    ? []\n    : props.poolSwaps.map(\n        ({\n          tokenIn,\n          tokenOut,\n          tokenAmountIn,\n          tokenAmountOut,\n          timestamp,\n          tx,\n          userAddress,\n          ensName,\n          ensAvatar,\n        }) => {\n          const value = bnum(priceFor(tokenOut))\n            .times(tokenAmountOut)\n            .toNumber();\n\n          return {\n            value,\n            formattedValue:\n              value > 0\n                ? fNum(value, { style: 'currency', abbreviate: true })\n                : '-',\n            tokenIn,\n            tokenOut,\n            tokenAmountIn,\n            tokenAmountOut,\n            timestamp,\n            userAddress: userAddress.id,\n            ensName,\n            ensAvatar,\n            formattedDate: t('timeAgo', [formatDistanceToNow(timestamp)]),\n            tx,\n          };\n        }\n      )\n);\n</script>\n\n<template>\n  <BalCard\n    class=\"overflow-x-auto\"\n    :square=\"upToLargeBreakpoint\"\n    :noBorder=\"upToLargeBreakpoint\"\n    noPad\n  >\n    <BalTable\n      :columns=\"columns\"\n      :data=\"swapRows\"\n      :isLoading=\"isLoading\"\n      :isLoadingMore=\"isLoadingMore\"\n      :isPaginated=\"isPaginated\"\n      skeletonClass=\"h-64\"\n      sticky=\"both\"\n      :noResultsLabel=\"noResultsLabel\"\n      :initialState=\"{\n        sortColumn: 'timeAgo',\n        sortDirection: 'desc',\n      }\"\n      @load-more=\"emit('loadMore')\"\n    >\n      <template #actionCell=\"action\">\n        <div class=\"py-2 px-6\">\n          <div class=\"flex items-center\">\n            <BalAsset\n              class=\"mr-2 shrink-0\"\n              :address=\"action.userAddress\"\n              :iconURI=\"action.ensAvatar\"\n              :size=\"30\"\n            />\n            <span :class=\"[action.ensName && 'truncate']\">\n              {{ action.ensName || shortenLabel(action.userAddress) }}\n            </span>\n          </div>\n        </div>\n      </template>\n\n      <template #valueCell=\"action\">\n        <div class=\"flex justify-end py-4 px-6 font-numeric\">\n          {{ action.formattedValue }}\n        </div>\n      </template>\n\n      <template #detailsCell=\"action\">\n        <div class=\"flex flex-wrap items-center py-4 px-6 -mt-1\">\n          <div class=\"token-item\">\n            <BalAsset :address=\"action.tokenIn\" class=\"mr-2 shrink-0\" />\n            <span class=\"font-numeric\">{{\n              fNum(action.tokenAmountIn, FNumFormats.token)\n            }}</span>\n          </div>\n          <BalIcon name=\"arrow-right\" class=\"mx-1\" />\n          <div class=\"token-item\">\n            <BalAsset :address=\"action.tokenOut\" class=\"mr-2 shrink-0\" />\n            <span class=\"font-numeric\">{{\n              fNum(action.tokenAmountOut, FNumFormats.token)\n            }}</span>\n          </div>\n        </div>\n      </template>\n\n      <template #timeCell=\"action\">\n        <div class=\"py-4 px-6\">\n          <div\n            class=\"flex justify-end items-center text-right whitespace-nowrap wrap\"\n          >\n            {{ action.formattedDate }}\n            <BalLink\n              :href=\"explorerLinks.txLink(action.tx)\"\n              external\n              class=\"flex items-center ml-2\"\n            >\n              <BalIcon\n                name=\"arrow-up-right\"\n                size=\"sm\"\n                class=\"text-gray-500 hover:text-blue-500 transition-colors\"\n              />\n            </BalLink>\n          </div>\n        </div>\n      </template>\n    </BalTable>\n  </BalCard>\n</template>\n\n<style scoped>\n.token-item {\n  @apply m-1 flex items-center p-1 px-2 bg-gray-50 dark:bg-gray-700 rounded-lg;\n}\n</style>\n","<script setup lang=\"ts\">\nimport { flatten } from 'lodash';\nimport { computed } from 'vue';\n\nimport usePoolSwapsQuery from '@/composables/queries/usePoolSwapsQuery';\nimport { Pool } from '@/services/pool/types';\n\nimport Table from './Table.vue';\n\n/**\n * TYPES\n */\ntype Props = {\n  pool: Pool;\n  loading: boolean;\n};\n\n/**\n * PROPS\n */\nconst props = withDefaults(defineProps<Props>(), {\n  loading: false,\n});\n\n/**\n * QUERIES\n */\nconst poolSwapsQuery = usePoolSwapsQuery(props.pool.id);\n\n/**\n * COMPUTED\n */\nconst poolSwaps = computed(() =>\n  poolSwapsQuery.data.value\n    ? flatten(poolSwapsQuery.data.value.pages.map(page => page.poolSwaps))\n    : []\n);\nconst isLoadingPoolSwaps = computed(() => poolSwapsQuery.isLoading.value);\nconst poolSwapsHasNextPage = computed(() => poolSwapsQuery.hasNextPage?.value);\nconst poolSwapsIsFetchingNextPage = computed(\n  () => poolSwapsQuery.isFetchingNextPage?.value\n);\n\n/**\n * METHODS\n */\nfunction loadMorePoolSwaps() {\n  poolSwapsQuery.fetchNextPage();\n}\n</script>\n\n<template>\n  <div class=\"mb-20\">\n    <h4 class=\"px-4 lg:px-0 mb-5\" v-text=\"$t('poolTransactions.tabs.swaps')\" />\n\n    <Table\n      :poolSwaps=\"poolSwaps\"\n      :isLoading=\"loading || isLoadingPoolSwaps\"\n      :isLoadingMore=\"poolSwapsIsFetchingNextPage\"\n      :isPaginated=\"poolSwapsHasNextPage\"\n      :noResultsLabel=\"$t('poolTransactions.noResults.swaps')\"\n      @load-more=\"loadMorePoolSwaps\"\n    />\n  </div>\n</template>\n","<script setup lang=\"ts\">\nimport { toRef } from 'vue';\n\nimport { usePoolHelpers } from '@/composables/usePoolHelpers';\nimport { Pool } from '@/services/pool/types';\n\nimport InvestmentTransactions from './InvestmentTransactions/InvestmentTransactions.vue';\nimport SwapTransactions from './SwapTransactions/SwapTransactions.vue';\n\n/**\n * TYPES\n */\ntype Props = {\n  pool: Pool;\n  loading: boolean;\n};\n\n/**\n * PROPS\n */\nconst props = withDefaults(defineProps<Props>(), {\n  loading: false,\n});\n\n/**\n * COMPOSABLES\n */\nconst { isDeepPool, isStablePhantomPool } = usePoolHelpers(\n  toRef(props, 'pool')\n);\n</script>\n\n<template>\n  <InvestmentTransactions :pool=\"pool\" :loading=\"loading\" />\n\n  <SwapTransactions\n    v-if=\"!isStablePhantomPool && !isDeepPool\"\n    :pool=\"pool\"\n    :loading=\"loading\"\n  />\n</template>\n","<script setup lang=\"ts\">\nimport useBreakpoints from '@/composables/useBreakpoints';\nimport { BalDetailsTableData } from '@/services/pool/types';\n\n/**\n * TYPES\n */\ntype Props = {\n  tableData: (BalDetailsTableData | null)[];\n};\n\n/**\n * PROPS\n */\ndefineProps<Props>();\n\n/**\n * COMPOSABLES\n */\nconst { upToLargeBreakpoint } = useBreakpoints();\n</script>\n\n<template>\n  <BalCard class=\"overflow-x-auto\" :square=\"upToLargeBreakpoint\" noPad>\n    <template v-for=\"(row, i) in tableData\" :key=\"i\">\n      <div v-if=\"row\" class=\"table-row\">\n        <div class=\"table-row-title\">\n          {{ row.title }}\n        </div>\n        <div class=\"table-row-value\">\n          {{ row.value }}\n          <BalTooltip\n            v-if=\"row.tooltip\"\n            :text=\"row.tooltip\"\n            iconSize=\"sm\"\n            class=\"mt-1 ml-2\"\n          />\n          <BalLink v-if=\"row.link\" :href=\"row.link\" external noStyle>\n            <BalIcon\n              name=\"arrow-up-right\"\n              size=\"sm\"\n              class=\"mt-2 ml-2 text-gray-500 hover:text-blue-500 transition-colors\"\n            />\n          </BalLink>\n        </div>\n      </div>\n    </template>\n  </BalCard>\n</template>\n\n<style scoped>\n.table-row {\n  @apply flex border-b dark:border-gray-700;\n}\n\n.table-row:first-child {\n  @apply font-semibold bg-gray-50 dark:bg-gray-800;\n}\n\n.table-row:last-child {\n  @apply border-b-0;\n}\n\n.table-row-title {\n  @apply flex items-center py-3 px-4 flex-1 dark:border-gray-700;\n\n  border-right-width: 1px;\n}\n\n.table-row-value {\n  @apply flex py-3 px-4 items-center;\n\n  word-break: break-all;\n  flex: 2;\n}\n</style>","<script setup lang=\"ts\">\nimport useNumbers from '@/composables/useNumbers';\nimport { POOLS } from '@/constants/pools';\nimport { poolMetadata } from '@/lib/config/metadata';\nimport { shortenLabel } from '@/lib/utils';\nimport { Pool, PoolType } from '@/services/pool/types';\nimport useWeb3 from '@/services/web3/useWeb3';\nimport { format } from 'date-fns';\nimport { useI18n } from 'vue-i18n';\n\n/**\n * TYPES\n */\ntype Props = {\n  pool: Pool;\n};\n\n/**\n * PROPS\n */\nconst props = defineProps<Props>();\n\n/**\n * COMPOSABLES\n */\nconst { t } = useI18n();\nconst { explorerLinks: explorer } = useWeb3();\nconst { fNum } = useNumbers();\n\nfunction formSwapFeesHint(owner: string): string {\n  if (owner === POOLS.ZeroAddress) {\n    return t('poolAttrs.feesFixed');\n  }\n\n  if (owner === POOLS.DelegateOwner) {\n    return t('poolAttrs.feesEditableGovernance');\n  }\n\n  return t('poolAttrs.feesEditableOwner');\n}\n/**\n * COMPUTED\n */\nconst data = computed(() => {\n  const {\n    poolType,\n    address,\n    symbol,\n    owner,\n    createTime,\n    swapFee,\n    name,\n    id,\n    onchain,\n  } = props.pool;\n\n  return [\n    {\n      title: t('attribute'),\n      value: t('details'),\n    },\n    {\n      title: t('poolName'),\n      value: poolMetadata(id)?.name || name,\n    },\n    {\n      title: t('poolSymbol'),\n      value: symbol || '',\n    },\n    {\n      title: t('poolType'),\n      value: poolType,\n    },\n    onchain?.amp && Number(onchain?.amp)\n      ? {\n          title: t('ampFactor.title'),\n          value: onchain.amp,\n        }\n      : null,\n    {\n      title: t('swapFees'),\n      value: `${fNum(swapFee, {\n        style: 'percent',\n        maximumFractionDigits: 4,\n      })} (${formSwapFeesHint(owner || '')})`,\n    },\n    {\n      title: t('poolManager'),\n      value: poolType === PoolType.Managed ? t('yes') : t('none'),\n    },\n    owner\n      ? {\n          title: t('poolOwner'),\n          value: poolOwnerData.value.title,\n          link: poolOwnerData.value.link,\n          tooltip: poolOwnerTooltip.value,\n        }\n      : null,\n    {\n      title: t('contractAddress'),\n      value: shortenLabel(address),\n      link: explorer.addressLink(address || ''),\n    },\n    {\n      title: t('createDate'),\n      value: format((createTime || 0) * 1000, 'dd MMMM yyyy'),\n    },\n  ];\n});\n\nconst poolOwnerData = computed(() => {\n  const { owner } = props.pool;\n  if (owner === POOLS.ZeroAddress) {\n    return { title: t('noOwner'), link: '' };\n  }\n\n  if (owner === POOLS.DelegateOwner) {\n    return { title: t('delegateOwner.title'), link: '' };\n  }\n\n  return {\n    title: shortenLabel(owner || ''),\n    link: explorer.addressLink(owner || ''),\n  };\n});\n\nconst poolOwnerTooltip = computed(() => {\n  if (props.pool.owner === POOLS.DelegateOwner) {\n    return t('delegateOwner.tooltip');\n  }\n\n  return '';\n});\n\nconst poolManagementText = computed(() => {\n  if (props.pool.poolType === PoolType.Managed) {\n    return t('');\n  }\n\n  if (props.pool.owner === POOLS.ZeroAddress) {\n    return t('poolAttrs.immutable');\n  }\n\n  if (props.pool.owner === POOLS.DelegateOwner) {\n    return t('poolAttrs.immutableFeesEditableByGovernance');\n  }\n\n  return t('poolAttrs.immutableFeesEditableByOwner');\n});\n</script>\n\n<template>\n  <div class=\"mb-5\">\n    <h3 class=\"px-4 lg:px-0 mb-5\" v-text=\"$t('poolDetails')\" />\n\n    <BalDetailsTable class=\"mb-12\" :tableData=\"data\" />\n    <template v-if=\"poolManagementText\">\n      <h4 class=\"px-4 lg:px-0 mb-2\" v-text=\"$t('poolManagement')\" />\n      <div class=\"px-4 lg:px-0\">\n        {{ poolManagementText }}\n      </div>\n    </template>\n  </div>\n</template>\n","<script setup lang=\"ts\">\nimport useNetwork from '@/composables/useNetwork';\nimport {\n  NetworkSyncState,\n  useCrossChainSync,\n} from '@/providers/cross-chain-sync.provider';\nimport { usePoolStaking } from '@/providers/local/pool-staking.provider';\nimport CheckpointGaugeModal from './CheckpointGaugeModal.vue';\nimport useWeb3 from '@/services/web3/useWeb3';\nimport config from '@/lib/config';\nimport { PoolWarning } from '@/types/pools';\nimport { usePoolWarning } from '@/composables/usePoolWarning';\nimport { useUserStaking } from '@/providers/local/user-staking.provider';\n\ntype Props = {\n  fiatValueOfStakedShares: string;\n  fiatValueOfUnstakedShares: string;\n  poolAddress: string;\n  poolId: string;\n};\n\nconst props = defineProps<Props>();\nconst emit = defineEmits(['shouldStakingCardBeOpened']);\nconst shouldShowWarningAlert = ref(false);\nconst showCheckpointModal = ref(false);\n\nconst { networksSyncState, shouldPokeGauge } = useCrossChainSync();\nconst { hasNonPrefGaugeBalance, poolGauges, stakedShares } = usePoolStaking();\nconst { networkId } = useNetwork();\nconst { isMismatchedNetwork } = useWeb3();\nconst { isAffectedBy } = usePoolWarning(computed(() => props.poolId));\nconst { userGaugeShares } = useUserStaking();\n\nconst canShowSyncAlert = computed(() => {\n  const gauge = userGaugeShares.value?.find(\n    gauge => gauge.gauge.poolAddress === props.poolAddress\n  );\n\n  if (\n    isAffectedBy(PoolWarning.PoolProtocolFeeVulnWarning) ||\n    isAffectedBy(PoolWarning.CspPoolVulnWarning) ||\n    !gauge\n  ) {\n    return false;\n  }\n  return true;\n});\n\nconst tipText = computed(() => {\n  if (hasNonPrefGaugeBalance.value) {\n    const title = 'Restake to be eligible for future incentives';\n    let text = '';\n    if (\n      networksSyncState.value[networkId.value] === NetworkSyncState.Unsynced\n    ) {\n      text = `After your veBAL syncs to ${\n        config[networkId.value].chainName\n      }, restake to move from the deprecated pool gauge to the new boost-aware pool gauge. If you restake before the veBAL syncs, you’ll need to perform another interaction on the gauge to start receiving your staking boost.`;\n    }\n\n    if (networksSyncState.value[networkId.value] === NetworkSyncState.Synced) {\n      text =\n        'To get your staking boost on this pool, restake to move from the deprecated pool gauge to the new boost-aware pool gauge.';\n    }\n\n    return {\n      title,\n      text,\n    };\n  }\n\n  return null;\n});\n\nconst warningAlert = computed(() => {\n  if (shouldShowWarningAlert.value) {\n    return {\n      title: 'You are not getting your max staking boost',\n      text: 'You’ve synced new veBAL but it is not being used to increase your staking boost (since pool gauges don’t automatically recognize veBAL changes). Interact with a pool gauge to trigger an update (e.g. by claiming BAL, staking/unstaking or explicitly triggering an update).',\n    };\n  }\n  return null;\n});\n\nasync function setWarningAlertState() {\n  if (isMismatchedNetwork.value) {\n    return;\n  }\n\n  if (Number(stakedShares.value) === 0) {\n    return;\n  }\n\n  const id = poolGauges.value?.pool.preferentialGauge.id;\n\n  if (!id) {\n    return;\n  }\n\n  try {\n    emit('shouldStakingCardBeOpened');\n\n    const shouldPoke = await shouldPokeGauge(id);\n\n    if (shouldPoke) {\n      shouldShowWarningAlert.value = true;\n    }\n  } catch (error) {\n    console.log(error);\n  }\n}\n\nonMounted(() => {\n  setWarningAlertState();\n});\n</script>\n\n<template>\n  <div v-if=\"canShowSyncAlert\" class=\"flex\">\n    <BalAlert\n      v-if=\"warningAlert\"\n      class=\"flex-grow\"\n      type=\"warning\"\n      :title=\"warningAlert.title\"\n    >\n      <div class=\"flex flex-col\">\n        <span class=\"mb-3\">{{ warningAlert.text }}</span>\n        <div class=\"mb-2\">\n          <BalBtn\n            size=\"sm\"\n            color=\"gradient\"\n            @click=\"showCheckpointModal = true\"\n          >\n            Trigger update\n          </BalBtn>\n        </div>\n      </div>\n    </BalAlert>\n\n    <BalAlert\n      v-else-if=\"tipText\"\n      class=\"flex-grow\"\n      type=\"tip\"\n      :title=\"tipText.title\"\n    >\n      {{ tipText.text }}\n    </BalAlert>\n\n    <CheckpointGaugeModal\n      :poolId=\"poolAddress\"\n      :isVisible=\"showCheckpointModal\"\n      @close=\"showCheckpointModal = false\"\n      @success=\"shouldShowWarningAlert = false\"\n    />\n  </div>\n</template>\n","<script setup lang=\"ts\">\nimport { getAddress } from '@ethersproject/address';\n\nimport BalLoadingBlock from '@/components/_global/BalLoadingBlock/BalLoadingBlock.vue';\nimport AnimatePresence from '@/components/animate/AnimatePresence.vue';\nimport useNumbers, { FNumFormats } from '@/composables/useNumbers';\nimport { useTokens } from '@/providers/tokens.provider';\nimport { bnum } from '@/lib/utils';\nimport { Pool } from '@/services/pool/types';\n\nimport StakePreviewModal from './StakePreviewModal.vue';\nimport { usePoolStaking } from '@/providers/local/pool-staking.provider';\n\nimport { deprecatedDetails } from '@/composables/usePoolHelpers';\nimport { usePoolWarning } from '@/composables/usePoolWarning';\nimport { StakeAction } from './composables/useStakePreview';\nimport StakingCardSyncAlert from '../../vebal/cross-chain-boost/StakingCardSyncAlert.vue';\nimport useNetwork from '@/composables/useNetwork';\nimport { Network } from '@/lib/config/types';\n\ntype Props = {\n  pool: Pool;\n};\nconst props = defineProps<Props>();\n\nconst emit = defineEmits<{\n  (e: 'setRestakeVisibility', value: boolean): void;\n}>();\n/**\n * STATE\n */\n\nconst isStakePreviewVisible = ref(false);\nconst stakeAction = ref<StakeAction>('stake');\nconst poolId = computed(() => props.pool.id);\nconst isOpenedByDefault = ref(false);\n/**\n * COMPOSABLES\n */\nconst { fNum } = useNumbers();\nconst { balanceFor } = useTokens();\nconst {\n  isStakablePool,\n  isLoading: isLoadingStakingData,\n  isRefetchingStakedShares,\n  stakedShares,\n  hasNonPrefGaugeBalance,\n  preferentialGaugeAddress,\n} = usePoolStaking();\nconst { isAffected } = usePoolWarning(poolId);\nconst { networkId } = useNetwork();\n\n/**\n * COMPUTED\n */\nconst fiatValueOfStakedShares = computed(() => {\n  return bnum(props.pool.totalLiquidity)\n    .div(props.pool.totalShares)\n    .times((stakedShares.value || 0).toString())\n    .toString();\n});\n\nconst fiatValueOfUnstakedShares = computed(() => {\n  return bnum(props.pool.totalLiquidity)\n    .div(props.pool.totalShares)\n    .times(balanceFor(getAddress(props.pool.address)))\n    .toString();\n});\n\nconst isStakeDisabled = computed(() => {\n  return (\n    !!deprecatedDetails(props.pool.id) ||\n    fiatValueOfUnstakedShares.value === '0' ||\n    hasNonPrefGaugeBalance.value ||\n    !preferentialGaugeAddress.value\n  );\n});\n\n/**\n * METHODS\n */\nfunction showStakePreview() {\n  if (fiatValueOfUnstakedShares.value === '0') return;\n  stakeAction.value = 'stake';\n  isStakePreviewVisible.value = true;\n}\n\nfunction showUnstakePreview() {\n  if (fiatValueOfStakedShares.value === '0') return;\n  stakeAction.value = 'unstake';\n  isStakePreviewVisible.value = true;\n}\n\nfunction handlePreviewClose() {\n  isStakePreviewVisible.value = false;\n}\n</script>\n\n<template>\n  <div>\n    <AnimatePresence :isVisible=\"!isLoadingStakingData\">\n      <div class=\"relative\">\n        <BalAccordion\n          :class=\"['shadow-2xl', { handle: isStakablePool }]\"\n          :sections=\"[\n            {\n              title: $t('staking.stakingIncentives'),\n              id: 'staking-incentives',\n              handle: 'staking-handle',\n              isDisabled: !isStakablePool,\n            },\n          ]\"\n          :reCalcKey=\"hasNonPrefGaugeBalance ? 0 : 1\"\n          :isOpenedByDefault=\"isOpenedByDefault\"\n        >\n          <template #staking-handle>\n            <button\n              class=\"p-4 w-full hover:bg-gray-50 dark:hover:bg-gray-800 rounded-xl transition-colors\"\n            >\n              <BalStack horizontal justify=\"between\" align=\"center\">\n                <BalStack spacing=\"sm\" align=\"center\">\n                  <div\n                    :class=\"[\n                      'flex items-center p-1 text-white rounded-full',\n                      {\n                        'bg-green-500': isStakablePool,\n                        'bg-gray-400': !isStakablePool,\n                      },\n                    ]\"\n                  >\n                    <BalIcon v-if=\"isStakablePool\" size=\"sm\" name=\"check\" />\n                    <BalIcon v-else size=\"sm\" name=\"x\" />\n                  </div>\n                  <h6>{{ $t('staking.stakingIncentives') }}</h6>\n                </BalStack>\n                <BalStack\n                  v-if=\"isStakablePool\"\n                  horizontal\n                  spacing=\"sm\"\n                  align=\"center\"\n                >\n                  <BalIcon name=\"chevron-down\" class=\"text-blue-500\" />\n                </BalStack>\n              </BalStack>\n            </button>\n          </template>\n          <template #staking-incentives>\n            <div class=\"relative bg-white dark:bg-gray-850 rounded-b-lg\">\n              <BalStack\n                vertical\n                spacing=\"sm\"\n                class=\"p-4 rounded-b-lg border-t dark:border-gray-900\"\n              >\n                <BalStack horizontal justify=\"between\" class=\"rounded-b-lg\">\n                  <span>{{ $t('staked') }} {{ $t('lpTokens') }}</span>\n                  <BalStack horizontal spacing=\"sm\" align=\"center\">\n                    <AnimatePresence :isVisible=\"isRefetchingStakedShares\">\n                      <BalLoadingBlock class=\"h-5\" />\n                    </AnimatePresence>\n                    <AnimatePresence :isVisible=\"!isRefetchingStakedShares\">\n                      <span>\n                        {{ fNum(fiatValueOfStakedShares, FNumFormats.fiat) }}\n                      </span>\n                    </AnimatePresence>\n                    <BalTooltip :text=\"$t('staking.stakedLpTokensTooltip')\" />\n                  </BalStack>\n                </BalStack>\n                <BalStack horizontal justify=\"between\">\n                  <span>{{ $t('unstaked') }} {{ $t('lpTokens') }}</span>\n                  <BalStack horizontal spacing=\"sm\" align=\"center\">\n                    <AnimatePresence :isVisible=\"isRefetchingStakedShares\">\n                      <BalLoadingBlock class=\"h-5\" />\n                    </AnimatePresence>\n                    <AnimatePresence :isVisible=\"!isRefetchingStakedShares\">\n                      <span>\n                        {{ fNum(fiatValueOfUnstakedShares, FNumFormats.fiat) }}\n                      </span>\n                    </AnimatePresence>\n                    <BalTooltip :text=\"$t('staking.unstakedLpTokensTooltip')\" />\n                  </BalStack>\n                </BalStack>\n                <StakingCardSyncAlert\n                  v-if=\"networkId !== Network.MAINNET\"\n                  :poolAddress=\"pool.address\"\n                  :poolId=\"pool.id\"\n                  :fiatValueOfStakedShares=\"fiatValueOfStakedShares\"\n                  :fiatValueOfUnstakedShares=\"fiatValueOfUnstakedShares\"\n                  @should-staking-card-be-opened=\"isOpenedByDefault = true\"\n                />\n                <BalStack\n                  v-if=\"hasNonPrefGaugeBalance && !isAffected\"\n                  horizontal\n                  spacing=\"sm\"\n                  class=\"mt-2\"\n                >\n                  <BalBtn\n                    color=\"gradient\"\n                    size=\"sm\"\n                    @click=\"emit('setRestakeVisibility', true)\"\n                  >\n                    {{ $t('restake') }}\n                  </BalBtn>\n\n                  <BalBtn\n                    outline\n                    color=\"blue\"\n                    size=\"sm\"\n                    :disabled=\"fiatValueOfStakedShares === '0'\"\n                    @click=\"showUnstakePreview\"\n                  >\n                    {{ $t('unstake') }}\n                  </BalBtn>\n                </BalStack>\n\n                <BalStack v-else horizontal spacing=\"sm\" class=\"mt-2\">\n                  <BalBtn\n                    color=\"gradient\"\n                    size=\"sm\"\n                    :disabled=\"isStakeDisabled\"\n                    @click=\"showStakePreview\"\n                  >\n                    {{ $t('stake') }}\n                  </BalBtn>\n                  <BalBtn\n                    outline\n                    color=\"blue\"\n                    size=\"sm\"\n                    :disabled=\"fiatValueOfStakedShares === '0'\"\n                    @click=\"showUnstakePreview\"\n                  >\n                    {{ $t('unstake') }}\n                  </BalBtn>\n                </BalStack>\n                <BalAlert\n                  v-if=\"hasNonPrefGaugeBalance && networkId === Network.MAINNET\"\n                  :title=\"$t('staking.restakeGauge')\"\n                  class=\"mt-2\"\n                >\n                  {{ $t('staking.restakeGaugeDescription') }}\n                </BalAlert>\n              </BalStack>\n            </div>\n          </template>\n        </BalAccordion>\n      </div>\n    </AnimatePresence>\n    <AnimatePresence :isVisible=\"isLoadingStakingData\" unmountInstantly>\n      <BalLoadingBlock class=\"h-12\" />\n    </AnimatePresence>\n    <StakePreviewModal\n      :isVisible=\"isStakePreviewVisible\"\n      :pool=\"pool\"\n      :action=\"stakeAction\"\n      @close=\"handlePreviewClose\"\n    />\n  </div>\n</template>\n\n<style>\n.handle {\n  @apply overflow-hidden rounded-xl;\n}\n\n.handle::before {\n  @apply absolute left-0 w-full opacity-100;\n\n  content: '';\n  top: -2px;\n  height: calc(100% + 4px);\n  background: linear-gradient(90deg, #4254ff, #f441a5, #ffeb3b, #4254ff);\n  background-size: 400%;\n  animation: anim-half 3s ease-out both;\n  border-radius: 14px;\n  z-index: -1;\n}\n\n.handle:hover::before {\n  animation: anim 12s linear infinite;\n}\n\n.handle .bal-card {\n  @apply mx-auto;\n\n  width: calc(100% - 4px);\n}\n\n@keyframes anim-half {\n  from {\n    background-position: 0;\n  }\n\n  to {\n    background-position: 125%;\n  }\n}\n\n@keyframes anim {\n  from {\n    background-position: 125%;\n  }\n\n  to {\n    background-position: 600%;\n  }\n}\n</style>\n","<script setup lang=\"ts\">\nimport { computed, ref } from 'vue';\n\nimport AnimatePresence from '@/components/animate/AnimatePresence.vue';\nimport { useLock } from '@/composables/useLock';\nimport useNumbers, { FNumFormats } from '@/composables/useNumbers';\nimport { useTokens } from '@/providers/tokens.provider';\nimport { bnum } from '@/lib/utils';\nimport { Pool } from '@/services/pool/types';\nimport useWeb3 from '@/services/web3/useWeb3';\nimport UnlockPreviewModal from '@/components/forms/lock_actions/UnlockForm/components/UnlockPreviewModal/UnlockPreviewModal.vue';\nimport useNetwork from '@/composables/useNetwork';\n\ntype Props = {\n  pool: Pool;\n};\nconst props = defineProps<Props>();\n\nconst showUnlockPreviewModal = ref(false);\n\n/**\n * COMPOSABLES\n */\nconst { fNum } = useNumbers();\nconst { balanceFor } = useTokens();\nconst { totalLockedValue, lock, isLoadingLockInfo, lockPool, lockPoolToken } =\n  useLock();\nconst { isWalletReady } = useWeb3();\nconst { networkSlug } = useNetwork();\n\n/**\n * COMPUTED\n */\nconst poolShares = computed(() =>\n  bnum(props.pool.totalLiquidity).div(props.pool.totalShares)\n);\nconst bptBalance = computed(() => balanceFor(props.pool.address));\n\nconst fiatTotal = computed(() =>\n  poolShares.value.times(bptBalance.value).toString()\n);\n\nconst totalExpiredLpTokens = computed(() =>\n  lock.value?.isExpired ? lock.value.lockedAmount : '0'\n);\n\nconst fiatTotalExpiredLpTokens = computed(() =>\n  bnum(lockPool.value?.totalLiquidity || '0')\n    .div(lockPool.value?.totalShares || '0')\n    .times(totalExpiredLpTokens.value)\n    .toString()\n);\n</script>\n\n<template>\n  <div v-if=\"isWalletReady\">\n    <AnimatePresence :isVisible=\"!isLoadingLockInfo\">\n      <div class=\"relative\">\n        <BalAccordion\n          :class=\"[\n            'shadow-2xl overflow-visible',\n            { 'pool-handle': !isLoadingLockInfo },\n          ]\"\n          :sections=\"[\n            {\n              title: 'Locking',\n              id: 'locking-module',\n              handle: 'locking-handle',\n              isDisabled: isLoadingLockInfo,\n            },\n          ]\"\n        >\n          <template #locking-handle>\n            <button\n              class=\"p-4 w-full hover:bg-gray-50 dark:hover:bg-gray-800 rounded-xl transition-colors\"\n            >\n              <BalStack horizontal justify=\"between\" align=\"center\">\n                <BalStack spacing=\"sm\" horizontal>\n                  <div\n                    class=\"flex items-center p-1 text-white bg-green-500 rounded-full\"\n                  >\n                    <BalIcon size=\"sm\" name=\"check\" />\n                  </div>\n                  <BalStack spacing=\"sm\" align=\"center\">\n                    <h6>{{ $t('locking.lockBptForVeBal') }}</h6>\n                  </BalStack>\n                </BalStack>\n                <BalStack horizontal spacing=\"sm\" align=\"center\">\n                  <BalIcon name=\"chevron-down\" class=\"text-blue-500\" />\n                </BalStack>\n              </BalStack>\n            </button>\n          </template>\n          <template #locking-module>\n            <div\n              class=\"overflow-visible relative bg-white dark:bg-gray-850 rounded-b-lg\"\n            >\n              <BalStack\n                vertical\n                spacing=\"sm\"\n                class=\"py-4 px-4 border-t dark:border-gray-900\"\n              >\n                <BalStack horizontal justify=\"between\">\n                  <span v-if=\"!lock?.isExpired\"\n                    >{{ $t('locked') }} {{ $t('lpTokens') }}</span\n                  >\n                  <span v-else class=\"text-red-500\">{{\n                    $t('locking.expiredLockLpTokens')\n                  }}</span>\n                  <BalStack horizontal spacing=\"sm\" align=\"center\">\n                    <AnimatePresence :isVisible=\"false\">\n                      <BalLoadingBlock class=\"h-5\" />\n                    </AnimatePresence>\n                    <AnimatePresence :isVisible=\"true\">\n                      <span :class=\"{ 'text-red-500': lock?.isExpired }\">\n                        {{ fNum(totalLockedValue, FNumFormats.fiat) }}\n                      </span>\n                    </AnimatePresence>\n                    <BalTooltip\n                      v-if=\"!lock?.isExpired\"\n                      :text=\"$t('locking.lockedLpTokensTooltip')\"\n                    />\n                    <BalTooltip v-else :text=\"$t('locking.expiredLockTooltip')\">\n                      <template #activator>\n                        <BalIcon\n                          class=\"text-red-500\"\n                          size=\"sm\"\n                          name=\"alert-triangle\"\n                        />\n                      </template>\n                    </BalTooltip>\n                  </BalStack>\n                </BalStack>\n                <BalStack horizontal justify=\"between\">\n                  <span>{{ $t('unlocked') }} {{ $t('lpTokens') }}</span>\n                  <BalStack horizontal spacing=\"sm\" align=\"center\">\n                    <AnimatePresence :isVisible=\"false\">\n                      <BalLoadingBlock class=\"h-5\" />\n                    </AnimatePresence>\n                    <AnimatePresence :isVisible=\"true\">\n                      <span>\n                        {{ fNum(fiatTotal, FNumFormats.fiat) }}\n                      </span>\n                    </AnimatePresence>\n                    <BalTooltip :text=\"$t('locking.unlockedLpTokensTooltip')\" />\n                  </BalStack>\n                </BalStack>\n                <BalStack horizontal spacing=\"sm\" class=\"mt-2\">\n                  <BalLink\n                    v-if=\"Number(bptBalance) > 0\"\n                    tag=\"router-link\"\n                    :to=\"{\n                      name: 'get-vebal',\n                      query: {\n                        returnRoute: $route.name,\n                        returnParams: JSON.stringify({\n                          id: pool.id,\n                          networkSlug,\n                        }),\n                      },\n                    }\"\n                  >\n                    <BalBtn\n                      :disabled=\"Number(bptBalance) === 0\"\n                      color=\"gradient\"\n                      size=\"sm\"\n                    >\n                      {{ $t('lock') }}\n                    </BalBtn>\n                  </BalLink>\n                  <BalBtn\n                    v-else\n                    :disabled=\"Number(bptBalance) === 0\"\n                    color=\"gradient\"\n                    size=\"sm\"\n                  >\n                    {{ $t('lock') }}\n                  </BalBtn>\n                  <BalBtn\n                    v-if=\"lock?.isExpired\"\n                    outline\n                    color=\"red\"\n                    size=\"sm\"\n                    @click=\"showUnlockPreviewModal = true\"\n                  >\n                    {{ $t('redeem') }}\n                  </BalBtn>\n                </BalStack>\n              </BalStack>\n            </div>\n          </template>\n        </BalAccordion>\n      </div>\n    </AnimatePresence>\n    <AnimatePresence :isVisible=\"isLoadingLockInfo\" unmountInstantly>\n      <BalLoadingBlock class=\"h-12\" />\n    </AnimatePresence>\n    <teleport to=\"#modal\">\n      <UnlockPreviewModal\n        v-if=\"showUnlockPreviewModal && lock && lockPool && lockPoolToken\"\n        :lockablePool=\"lockPool\"\n        :lockablePoolTokenInfo=\"lockPoolToken\"\n        :veBalLockInfo=\"lock\"\n        :totalLpTokens=\"totalExpiredLpTokens\"\n        :fiatTotalLpTokens=\"fiatTotalExpiredLpTokens\"\n        @close=\"showUnlockPreviewModal = false\"\n      />\n    </teleport>\n  </div>\n</template>\n\n<style>\n.pool-handle {\n  @apply rounded-xl;\n}\n\n.pool-handle::before {\n  @apply absolute left-0 w-full opacity-100;\n\n  content: '';\n  top: -2px;\n  height: calc(100% + 4px);\n  background: linear-gradient(90deg, #4254ff, #f441a5, #ffeb3b, #4254ff);\n  background-size: 400%;\n  animation: anim-half 3s ease-out both;\n  border-radius: 14px;\n  z-index: -1;\n}\n\n.pool-handle:hover::before {\n  animation: anim 12s linear infinite;\n}\n\n.pool-handle .bal-card {\n  @apply mx-auto;\n\n  width: calc(100% - 4px);\n}\n\n@keyframes anim-half {\n  from {\n    background-position: 0;\n  }\n\n  to {\n    background-position: 125%;\n  }\n}\n\n@keyframes anim {\n  from {\n    background-position: 125%;\n  }\n\n  to {\n    background-position: 600%;\n  }\n}\n</style>\n","export default \"__VITE_ASSET__f7dc3739__\"","import { computed } from 'vue';\n\nimport { PoolToken } from '@balancer-labs/sdk';\n\nimport { configService } from '@/services/config/config.service';\n\nexport function poolPathSymbolSegment(tokens: PoolToken[]) {\n  return tokens.map(token => token.symbol).join('-');\n}\n\nexport function useApyVisionHelpers() {\n  const apyVisionNetworkName = computed(() => {\n    return configService.network.thirdParty.apyVision?.networkName;\n  });\n\n  return {\n    apyVisionNetworkName,\n    poolPathSymbolSegment,\n  };\n}\n","<script lang=\"ts\" setup>\nimport { useApyVisionHelpers } from '@/composables/external/useApyVisionHelpers';\nimport { getAddressFromPoolId } from '@/lib/utils';\nimport { PoolToken } from '@balancer-labs/sdk';\n\n/**\n * TYPES\n */\ntype Props = {\n  poolId: string;\n  tokens: PoolToken[];\n};\n\n/**\n * PROPS & EMITS\n */\ndefineProps<Props>();\n\n/**\n * COMPOSABLES\n */\nconst { poolPathSymbolSegment, apyVisionNetworkName } = useApyVisionHelpers();\n</script>\n\n<template>\n  <div\n    v-if=\"apyVisionNetworkName\"\n    class=\"group flex items-center mt-6 mb-5 w-fit h-fit\"\n  >\n    <BalLink\n      :href=\"\n        'https://app.apy.vision/pools/balancerv2_' +\n        apyVisionNetworkName +\n        '-' +\n        poolPathSymbolSegment(tokens) +\n        '-' +\n        getAddressFromPoolId(poolId)\n      \"\n      external\n      noStyle\n      class=\"flex items-center font-medium link link-black\"\n    >\n      <img\n        width=\"32\"\n        height=\"32\"\n        class=\"mr-2 rounded-full group-hover:shadow-lg transition\"\n        src=\"@/assets/images/icons/apy-vision.svg\"\n        alt=\"\"\n      />\n      {{ $t('apyvisionPoolInsights') }}\n      <BalIcon\n        name=\"arrow-up-right\"\n        size=\"sm\"\n        class=\"ml-0.5 text-gray-500 group-hover:text-blue-500 hover:text-blue-400 transition-colors\"\n      />\n    </BalLink>\n  </div>\n</template>\n","<template>\n  <svg width=\"20\" height=\"20\" xmlns=\"http://www.w3.org/2000/svg\">\n    <g fill=\"none\" fill-rule=\"evenodd\">\n      <circle fill=\"#192533\" cx=\"10\" cy=\"10\" r=\"10\" />\n      <g fill-rule=\"nonzero\">\n        <path\n          d=\"M11.608 12.19v-2.095H9.453V8h4.31v4.19h-2.155zm2.155-6.285H7.298v6.285H5.143V3.81h8.62v2.095z\"\n          fill=\"#87ABC5\"\n        />\n        <path\n          fill=\"#87ABC5\"\n          d=\"M13.763 13.029v1.257H7.298V12.19h4.31v-.942h2.155z\"\n        />\n        <path fill=\"#FFF\" d=\"M15.918 5.905V8h-2.155V5.905z\" />\n        <path fill=\"#1D252E\" d=\"M7.298 12.19v2.096H5.143V12.19z\" />\n        <path fill=\"#F07F53\" d=\"M7.298 14.286v2.095H5.143v-2.095z\" />\n      </g>\n    </g>\n  </svg>\n</template>\n\n<script lang=\"ts\">\nimport { defineComponent } from 'vue';\n\nexport default defineComponent({\n  name: 'GauntletIcon',\n});\n</script>\n","<script lang=\"ts\" setup>\nimport { useI18n } from 'vue-i18n';\n\nimport BalChipNew from '@/components/chips/BalChipNew.vue';\nimport GauntletIcon from '@/components/images/icons/GauntletIcon.vue';\nimport APRTooltip from '@/components/tooltips/APRTooltip/APRTooltip.vue';\nimport useNumbers from '@/composables/useNumbers';\nimport { usePoolWarning } from '@/composables/usePoolWarning';\nimport { isFx, usePoolHelpers } from '@/composables/usePoolHelpers';\nimport { useTokens } from '@/providers/tokens.provider';\nimport { EXTERNAL_LINKS } from '@/constants/links';\nimport { POOLS } from '@/constants/pools';\nimport { includesAddress } from '@/lib/utils';\nimport { usePoolStaking } from '@/providers/local/pool-staking.provider';\nimport { Pool, PoolToken } from '@/services/pool/types';\nimport useWeb3 from '@/services/web3/useWeb3';\nimport { AprBreakdown } from '@balancer-labs/sdk';\nimport { useDisabledJoinPool } from '@/composables/useDisabledJoinPool';\nimport { poolMetadata as getPoolMetadata } from '@/lib/config/metadata';\n\n/**\n * TYPES\n */\ntype Props = {\n  loadingApr: boolean;\n  isStableLikePool: boolean;\n  pool: Pool;\n  poolApr?: AprBreakdown;\n  titleTokens: PoolToken[];\n  missingPrices: boolean;\n  isLiquidityBootstrappingPool: boolean;\n  isComposableStableLikePool: boolean;\n};\n\n/**\n * PROPS & EMITS\n */\nconst props = withDefaults(defineProps<Props>(), {\n  loadingApr: true,\n  poolApr: undefined,\n});\nconst emit = defineEmits<{\n  (e: 'setRestakeVisibility', value: boolean): void;\n}>();\nconst poolId = computed(() => toRef(props, 'pool').value.id);\n\n/**\n * COMPOSABLES\n */\nconst { isAffected, warnings } = usePoolWarning(poolId);\nconst { hasNonApprovedRateProviders } = usePoolHelpers(toRef(props, 'pool'));\nconst { fNum } = useNumbers();\nconst { t } = useI18n();\nconst { explorerLinks: explorer } = useWeb3();\nconst { balancerTokenListTokens, getToken } = useTokens();\nconst { hasNonPrefGaugeBalance } = usePoolStaking();\nconst { disableJoinsReason, nonAllowedSymbols } = useDisabledJoinPool(\n  props.pool\n);\n\n/**\n * COMPUTED\n */\nconst feesFixed = computed(() => props.pool?.owner == POOLS.ZeroAddress);\n\nconst communityManagedFees = computed(\n  () => props.pool?.owner == POOLS.DelegateOwner\n);\nconst feesManagedByGauntlet = computed(\n  () =>\n    communityManagedFees.value &&\n    POOLS.DynamicFees.Gauntlet.includes(props.pool.id)\n);\nconst swapFeeToolTip = computed(() => {\n  if (feesManagedByGauntlet.value) {\n    return t('feesManagedByGauntlet');\n  } else if (communityManagedFees.value) {\n    return t('delegateFeesTooltip');\n  } else if (feesFixed.value) {\n    return t('fixedFeesTooltip');\n  } else {\n    return t('ownerFeesTooltip');\n  }\n});\n\nconst poolFeeLabel = computed(() => {\n  if (!props.pool || !props.pool?.swapFee) return '';\n\n  const feeLabel = `${fNum(props.pool.swapFee, {\n    style: 'percent',\n    maximumFractionDigits: 4,\n  })}`;\n\n  if (feesFixed.value) {\n    return t('fixedSwapFeeLabel', [feeLabel]);\n  } else if (communityManagedFees.value) {\n    return feesManagedByGauntlet.value\n      ? t('dynamicSwapFeeLabel', [feeLabel])\n      : t('communitySwapFeeLabel', [feeLabel]);\n  }\n\n  // Must be owner-controlled\n  return t('dynamicSwapFeeLabel', [feeLabel]);\n});\n\nconst hasCustomToken = computed(() => {\n  const knownTokens = Object.keys(balancerTokenListTokens.value);\n  return (\n    !props.isLiquidityBootstrappingPool &&\n    !props.isComposableStableLikePool &&\n    props.pool.tokensList.some(\n      address => !includesAddress(knownTokens, address)\n    )\n  );\n});\n\nconst poolTypeLabel = computed(() => {\n  if (!props.pool?.factory) return '';\n  const key = POOLS.Factories[props.pool.factory];\n\n  return key ? t(key) : t('unknownPoolType');\n});\n\nconst poolMetadata = computed(() => getPoolMetadata(props.pool.id));\nconst hasMetadata = computed((): boolean => !!poolMetadata.value);\n\n/**\n * METHODS\n */\nfunction symbolFor(titleTokenIndex: number): string {\n  const token = props.titleTokens[titleTokenIndex];\n  return getToken(token.address)?.symbol || token.symbol || '---';\n}\n</script>\n\n<template>\n  <div class=\"flex flex-col\">\n    <div class=\"flex flex-wrap items-center -mt-2\">\n      <div v-if=\"hasMetadata\">\n        <h3 class=\"pool-title\">\n          {{ poolMetadata?.name }}\n        </h3>\n        <h5 class=\"text-sm\">\n          {{ poolTypeLabel }}\n        </h5>\n      </div>\n      <h3 v-else class=\"pool-title\">\n        {{ poolTypeLabel }}\n      </h3>\n    </div>\n    <div class=\"flex flex-wrap items-center\">\n      <div\n        v-for=\"({ address, weight }, i) in titleTokens\"\n        :key=\"i\"\n        class=\"flex items-center px-2 mt-2 mr-2 h-10 bg-gray-50 dark:bg-gray-850 rounded-lg\"\n      >\n        <BalAsset :address=\"address\" />\n        <span class=\"ml-2\">\n          {{ symbolFor(i) }}\n        </span>\n        <span\n          v-if=\"!isStableLikePool && !!weight && weight !== '0'\"\n          class=\"mt-px ml-1 text-xs font-medium text-gray-400\"\n        >\n          {{\n            fNum(weight || '0', {\n              style: 'percent',\n              maximumFractionDigits: 0,\n            })\n          }}\n        </span>\n      </div>\n      <BalChipNew v-if=\"pool?.isNew\" class=\"mt-2 mr-2\" />\n      <APRTooltip\n        v-if=\"!loadingApr\"\n        :pool=\"pool\"\n        :poolApr=\"poolApr\"\n        class=\"mt-1 -ml-1\"\n      />\n      <BalLink\n        :href=\"explorer.addressLink(pool?.address || '')\"\n        external\n        noStyle\n        class=\"flex items-center\"\n      >\n        <BalIcon\n          name=\"arrow-up-right\"\n          size=\"sm\"\n          class=\"mt-2 ml-2 text-gray-500 hover:text-blue-500 transition-colors\"\n        />\n      </BalLink>\n    </div>\n    <div class=\"flex items-center mt-2\">\n      <div class=\"mr-1 text-sm text-secondary\" v-html=\"poolFeeLabel\" />\n      <BalTooltip>\n        <template #activator>\n          <BalLink\n            v-if=\"feesManagedByGauntlet\"\n            :href=\"EXTERNAL_LINKS.Gauntlet.Home\"\n            external\n          >\n            <GauntletIcon />\n          </BalLink>\n          <BalIcon\n            v-else\n            name=\"info\"\n            size=\"xs\"\n            class=\"text-gray-400 dark:text-gray-500\"\n          />\n        </template>\n        <span>\n          {{ swapFeeToolTip }}\n        </span>\n      </BalTooltip>\n    </div>\n  </div>\n  <BalAlert\n    v-if=\"pool.isInRecoveryMode && pool.isPaused\"\n    type=\"warning\"\n    :title=\"$t('recoveryMode')\"\n    :description=\"$t('recoveryModeDescription')\"\n    class=\"mt-2\"\n    block\n  />\n  <BalAlert\n    v-if=\"hasNonApprovedRateProviders\"\n    type=\"warning\"\n    :title=\"$t('hasNonApprovedRateProviders')\"\n    class=\"mt-2\"\n    block\n  />\n  <BalAlert\n    v-if=\"missingPrices\"\n    type=\"warning\"\n    :title=\"$t('noPriceInfo')\"\n    class=\"mt-2\"\n    block\n  />\n  <BalAlert\n    v-if=\"!disableJoinsReason.nonVettedTokensAfterTimestamp && hasCustomToken\"\n    type=\"warning\"\n    :title=\"$t('highRiskPool')\"\n    class=\"mt-2\"\n    block\n  />\n  <BalAlert\n    v-if=\"hasNonPrefGaugeBalance && !isAffected && !isFx(pool.poolType)\"\n    :title=\"$t('staking.restakeGauge')\"\n    :type=\"'warning'\"\n    class=\"mt-2\"\n  >\n    <BalStack spacing=\"sm\">\n      <span>{{ $t('staking.restakeGaugeDescription') }}</span>\n      <div>\n        <BalBtn\n          :color=\"'gradient'\"\n          class=\"p-2\"\n          :size=\"'sm'\"\n          @click=\"emit('setRestakeVisibility', true)\"\n        >\n          {{ $t('restake') }}\n        </BalBtn>\n      </div>\n    </BalStack>\n  </BalAlert>\n  <template v-if=\"isAffected\">\n    <BalAlert\n      v-for=\"(warning, i) in warnings\"\n      :key=\"`warning-${i}`\"\n      type=\"error\"\n      class=\"mt-2\"\n      block\n    >\n      <template #title>\n        <div v-html=\"warning.title\" />\n      </template>\n      <template #description>\n        <div v-html=\"warning.description\" />\n      </template>\n    </BalAlert>\n  </template>\n  <BalAlert\n    v-if=\"disableJoinsReason.notInitialLiquidity\"\n    type=\"warning\"\n    :title=\"$t('noInitLiquidity')\"\n    :description=\"$t('noInitLiquidityDetail')\"\n    class=\"mt-2\"\n    block\n  />\n  <BalAlert\n    v-if=\"disableJoinsReason.nonVettedTokensAfterTimestamp\"\n    type=\"warning\"\n    :title=\"$t('investment.warning.blockedPool.title', [nonAllowedSymbols])\"\n    class=\"mt-2\"\n    block\n  >\n    {{ $t('investment.warning.blockedPool.description') }}\n    <a\n      href=\"https://github.com/balancer/frontend-v2/wiki/How-tos#add-a-new-pool\"\n      target=\"_blank\"\n      class=\"underline\"\n      >{{ $t('here') }}</a\n    >\n    {{ $t('investment.warning.blockedPool.description2') }}\n  </BalAlert>\n\n  <BalAlert\n    v-if=\"\n      disableJoinsReason.requiresAllowListing ||\n      disableJoinsReason.nonAllowedWeightedPoolAfterTimestamp\n    \"\n    type=\"warning\"\n    :title=\"$t('requiresAllowListing1')\"\n    class=\"mt-2\"\n    block\n  >\n    {{ $t('Click') }}\n    <a\n      href=\"https://github.com/balancer/frontend-v2/wiki/How-tos#add-a-new-pool\"\n      target=\"_blank\"\n      class=\"underline\"\n      >{{ $t('here') }}</a\n    >\n    {{ $t('requiresAllowListing2') }}\n  </BalAlert>\n</template>\n<style scoped>\n.pool-title {\n  @apply mr-4 capitalize mt-2;\n\n  font-variation-settings: 'wght' 700;\n}\n</style>\n","import { computed, reactive } from 'vue';\nimport { useQuery, QueryObserverOptions } from '@tanstack/vue-query';\n\nimport QUERY_KEYS from '@/constants/queryKeys';\nimport { poolsStoreService } from '@/services/pool/pools-store.service';\nimport { Pool } from '@/services/pool/types';\n\nimport useNetwork from '../useNetwork';\nimport usePoolQuery from './usePoolQuery';\nimport { AprBreakdown } from '@balancer-labs/sdk';\nimport { getBalancerSDK } from '@/dependencies/balancer-sdk';\n\ntype QueryOptions = QueryObserverOptions<AprBreakdown>;\n\nexport default function usePoolAprQuery(\n  id: string,\n  options: QueryObserverOptions<AprBreakdown> = {}\n) {\n  /**\n   * @description\n   * If pool is already downloaded, we can use it instantly\n   * it may be if user came to pool page from home page\n   */\n  const storedPool = poolsStoreService.findPool(id);\n\n  /**\n   * COMPOSABLES\n   */\n  const poolQuery = usePoolQuery(id);\n\n  /**\n   * QUERY DEPENDENCIES\n   */\n  const { networkId } = useNetwork();\n\n  /**\n   * COMPUTED\n   */\n  const pool = computed(() => poolQuery.data.value);\n  const enabled = computed(() => !!pool.value?.id || !!storedPool);\n\n  /**\n   * QUERY INPUTS\n   */\n  const queryKey = QUERY_KEYS.Pools.APR(networkId, id);\n\n  const queryFn = async (): Promise<AprBreakdown> => {\n    let _pool: Pool;\n    if (storedPool) {\n      _pool = storedPool;\n    } else if (pool.value) {\n      // copy computed pool to avoid mutation warnings\n      _pool = { ...pool.value, tokens: [...pool.value.tokens] };\n    } else {\n      throw new Error('No pool');\n    }\n\n    if (_pool?.apr) {\n      return _pool.apr;\n    }\n\n    _pool.chainId = networkId.value;\n\n    const apr = await getBalancerSDK().pools.apr(_pool);\n\n    return apr;\n  };\n  const queryOptions = reactive({\n    enabled,\n    ...options,\n  });\n  return useQuery<AprBreakdown>(\n    queryKey,\n    queryFn,\n    queryOptions as QueryOptions\n  );\n}\n","import { computed, reactive } from 'vue';\nimport { QueryObserverOptions, useQuery } from '@tanstack/vue-query';\n\nimport QUERY_KEYS from '@/constants/queryKeys';\nimport { balancerSubgraphService } from '@/services/balancer/subgraph/balancer-subgraph.service';\nimport { poolsStoreService } from '@/services/pool/pools-store.service';\nimport { PoolSnapshots } from '@/services/pool/types';\n\nimport useNetwork from '../useNetwork';\nimport usePoolQuery from './usePoolQuery';\n\ntype QueryOptions = QueryObserverOptions<PoolSnapshots>;\n\n/**\n * HELPERS\n */\nexport default function usePoolSnapshotsQuery(\n  id: string,\n  days?: number,\n  options: QueryOptions = {}\n) {\n  /**\n   * @description\n   * If pool is already downloaded, we can use it instantly\n   * it may be if user came to pool page from home page\n   */\n  const storedPool = poolsStoreService.findPool(id);\n\n  /**\n   * QUERY DEPENDENCIES\n   */\n  const { networkId } = useNetwork();\n  const poolQuery = usePoolQuery(id);\n\n  /**\n   * COMPUTED\n   */\n  const pool = computed(() => poolQuery.data.value);\n  const enabled = computed(() => !!pool.value?.id || !!storedPool);\n\n  /**\n   * QUERY INPUTS\n   */\n  const queryKey = QUERY_KEYS.Pools.Snapshot(networkId, id);\n\n  const queryFn = async () => {\n    if (!pool.value && !storedPool) throw new Error('No pool');\n\n    const createTime = storedPool?.createTime || pool.value?.createTime || 0;\n    return await balancerSubgraphService.poolSnapshots.get({\n      where: {\n        pool: id.toLowerCase(),\n        timestamp_gt: createTime,\n      },\n    });\n  };\n\n  const queryOptions = reactive({\n    enabled,\n    ...options,\n  });\n\n  return useQuery<PoolSnapshots>(\n    queryKey,\n    queryFn,\n    queryOptions as QueryOptions\n  );\n}\n","import differenceInDays from 'date-fns/differenceInDays';\nimport { QueryObserverOptions, useQuery } from '@tanstack/vue-query';\n\nimport QUERY_KEYS from '@/constants/queryKeys';\nimport { HistoricalPrices } from '@/services/coingecko/api/price.service';\nimport { coingeckoService } from '@/services/coingecko/coingecko.service';\nimport { poolsStoreService } from '@/services/pool/pools-store.service';\n\nimport useNetwork from '../useNetwork';\nimport usePoolQuery from './usePoolQuery';\nimport { tokensListExclPoolTokens } from '../usePoolHelpers';\n\ntype QueryOptions = QueryObserverOptions<HistoricalPrices>;\n\n/**\n * HELPERS\n */\nexport default function useHistoricalPricesQuery(\n  id: string,\n  days?: number,\n  options: QueryOptions = {}\n) {\n  /**\n   * @description\n   * If pool is already downloaded, we can use it instantly\n   * it may be if user came to pool page from home page\n   */\n  const storedPool = poolsStoreService.findPool(id);\n\n  /**\n   * QUERY DEPENDENCIES\n   */\n  const { networkId } = useNetwork();\n  const poolQuery = usePoolQuery(id);\n\n  /**\n   * COMPUTED\n   */\n  const pool = computed(() => poolQuery.data.value);\n  const enabled = computed(() => !!pool.value?.id || !!storedPool);\n\n  /**\n   * QUERY INPUTS\n   */\n  const queryKey = QUERY_KEYS.Pools.HistoricalPrices(networkId, id);\n\n  const queryFn = async () => {\n    if (!pool.value && !storedPool) throw new Error('No pool');\n\n    const createTime = storedPool?.createTime || pool.value?.createTime || 0;\n    const tokensList = storedPool\n      ? tokensListExclPoolTokens(storedPool)\n      : pool.value\n      ? tokensListExclPoolTokens(pool.value)\n      : [];\n\n    const shapshotDaysNum =\n      days || differenceInDays(new Date(), new Date(createTime * 1000));\n\n    /**\n     * @description\n     * due to coin gecko docs if we query from 1 to 90 days from current time it returns hourly data\n     * @see https://www.coingecko.com/en/api/documentation\n     */\n    const aggregateBy = shapshotDaysNum <= 90 ? 'hour' : 'day';\n\n    // if the coingecko query fails for this query key, we can pretty safely assume it'll keep failing\n    // by returning an empty object we signal to stop retrying this hook.\n    try {\n      const historicalPrices =\n        await coingeckoService.prices.getTokensHistorical(\n          tokensList,\n          shapshotDaysNum,\n          1,\n          aggregateBy\n        );\n\n      return historicalPrices;\n    } catch {\n      return {};\n    }\n  };\n\n  const queryOptions = reactive({\n    enabled,\n    ...options,\n  });\n\n  return useQuery<HistoricalPrices>(\n    queryKey,\n    queryFn,\n    queryOptions as QueryOptions\n  );\n}\n","interface BrandedRedirectData {\n  id: string;\n  title: string;\n  description: string;\n  btnText: string;\n  link: string;\n  buildBannerPath?: () => string;\n}\n\nexport const BRANDED_REDIRECT_DATA: Record<string, BrandedRedirectData> = {\n  xave: {\n    id: 'xave',\n    title: 'brandedRedirect.xave.title',\n    description: 'brandedRedirect.xave.description',\n    btnText: 'brandedRedirect.xave.btnText',\n    link: 'https://app.xave.co/',\n    buildBannerPath: buildXaveBannerPath,\n  },\n  gyro: {\n    id: 'gyro',\n    title: 'brandedRedirect.gyro.title',\n    description: 'brandedRedirect.gyro.description',\n    btnText: 'brandedRedirect.gyro.btnText',\n    link: 'https://app.gyro.finance/',\n  },\n};\n\nexport function buildXaveBannerPath(): string {\n  return new URL(\n    // https://vitejs.dev/guide/assets.html#new-url-url-import-meta-url\n    // Warning: Don't extract this string into a variable or it will stop working in production builds\n    '/src/assets/images/branded-redirect-logos/xave.png',\n    import.meta.url\n  ).href;\n}\n","<script setup lang=\"ts\">\nimport { BRANDED_REDIRECT_DATA } from './constants';\nimport { POOLS } from '@/constants/pools';\nimport { PoolType } from '@/services/pool/types';\n\nconst props = defineProps<{\n  poolType: PoolType | undefined;\n}>();\n\nconst redirectData = computed(() => {\n  if (!props.poolType) return;\n  const brand = POOLS.BrandedRedirect?.[props.poolType];\n  if (!brand) return;\n  return BRANDED_REDIRECT_DATA[brand];\n});\n\nconst hasBannerImage = computed<boolean>(() => {\n  return typeof redirectData.value?.buildBannerPath === 'function';\n});\n\nconst bannerSrc = computed<string>(() => {\n  //@ts-ignore\n  if (hasBannerImage.value) return redirectData.value.buildBannerPath();\n  return '';\n});\n</script>\n\n<template>\n  <BalStack v-if=\"redirectData\" vertical>\n    <BalCard shadow=\"2xl\" noPad class=\"rounded-xl\" growContent>\n      <div class=\"flex flex-col items-center\">\n        <img v-if=\"hasBannerImage\" :src=\"bannerSrc\" :alt=\"redirectData.title\" />\n        <div class=\"py-4 px-6 w-full\">\n          <div class=\"mb-1.5 text-lg font-semibold\">\n            {{ $t(redirectData.title) }}\n          </div>\n          <div class=\"mb-3\">\n            {{ $t(redirectData.description) }}\n          </div>\n          <BalBtn\n            v-if=\"redirectData.link\"\n            color=\"blue\"\n            block\n            tag=\"a\"\n            :href=\"redirectData.link\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            {{ $t(redirectData.btnText) }}\n            <BalIcon name=\"arrow-up-right\" size=\"sm\" class=\"ml-2\" />\n          </BalBtn>\n        </div>\n      </div>\n    </BalCard>\n  </BalStack>\n</template>\n","<script setup lang=\"ts\">\nimport { Pool } from '@/services/pool/types';\nimport {\n  hasIcon,\n  orderedPoolTokens,\n  orderedTokenAddresses,\n} from '@/composables/usePoolHelpers';\nimport TokenPills from '@/components/tables/PoolsTable/TokenPills/TokenPills.vue';\nimport BalChipNew from '@/components/chips/BalChipNew.vue';\nimport useNetwork from '@/composables/useNetwork';\n\n/**\n * TYPES\n */\ntype Props = {\n  pool: Pool;\n};\n\n/**\n * PROPS\n */\ndefineProps<Props>();\n\nfunction iconAddresses(pool: Pool) {\n  return hasIcon(pool.id) ? [pool.address] : orderedTokenAddresses(pool);\n}\n\n/**\n * COMPOSABLES\n */\nconst { networkSlug } = useNetwork();\n\nconst isHovered = ref(false);\n</script>\n\n<template>\n  <router-link\n    as=\"div\"\n    :to=\"{\n      name: 'pool',\n      params: { id: pool.id, networkSlug },\n    }\"\n    class=\"flex justify-between items-center py-3 pl-1 transition-all cursor-pointer hover:bg-[#11182766]\"\n    @mouseleave=\"isHovered = false\"\n    @mouseover=\"isHovered = true\"\n  >\n    <div class=\"flex gap-2 items-center\">\n      <BalAssetSet :addresses=\"iconAddresses(pool)\" :width=\"60\" />\n      <TokenPills\n        :tokens=\"orderedPoolTokens(pool, pool.tokens)\"\n        isOnMigrationCard\n        :isHovered=\"isHovered\"\n      />\n      <BalChipNew v-if=\"pool.isNew\" class=\"mb-1\" />\n    </div>\n    <BalIcon\n      name=\"arrow-right\"\n      size=\"sm\"\n      :class=\"['arrow', { 'arrow-hovered': isHovered }]\"\n    />\n  </router-link>\n</template>\n\n<style scoped>\n.arrow {\n  @apply mb-1;\n\n  color: rgb(255 255 255 / 50%);\n}\n\n.arrow-hovered {\n  @apply text-white;\n}\n</style>\n","<template>\n  <BalCard shadow=\"2xl\" noPad class=\"bg-cover rounded-xl gradients\" growContent>\n    <slot></slot>\n  </BalCard>\n</template>\n\n<style scoped>\n.gradients {\n  background-image: url('/images/gradients/gradient-1.avif'),\n    url('/images/gradients/gradient-1.jpg');\n}\n</style>","<script setup lang=\"ts\">\nimport useNetwork from '@/composables/useNetwork';\nimport {\n  deprecatedDetails,\n  gaugeMigrationDetails,\n  newVersionDetails,\n} from '@/composables/usePoolHelpers';\nimport NewPoolData from './NewPoolData.vue';\nimport usePoolsQuery from '@/composables/queries/usePoolsQuery';\nimport usePoolQuery from '@/composables/queries/usePoolQuery';\nimport GradientCard from '@/components/cards/GradientCard/GradientCard.vue';\nimport { useI18n } from 'vue-i18n';\n\n/**\n * TYPES\n */\ntype Props = {\n  poolId: string;\n};\n\n/**\n * PROPS\n */\nconst props = defineProps<Props>();\n\n/**\n * COMPOSABLES\n */\nconst { networkSlug } = useNetwork();\nconst { t } = useI18n();\n\nconst migrationInfo = computed(\n  () =>\n    deprecatedDetails(props.poolId) ||\n    gaugeMigrationDetails(props.poolId) ||\n    newVersionDetails(props.poolId)\n);\n\nconst newPoolQueryEnabled = computed(\n  (): boolean => !!migrationInfo.value?.newPool\n);\n\nconst newPoolQuery = usePoolQuery(\n  migrationInfo.value?.newPool as string,\n  newPoolQueryEnabled\n);\n\nconst suggestPoolsQueryEnabled = computed(() => {\n  return !!migrationInfo.value?.suggestedPools?.length;\n});\n\nconst filterOptions = computed(() => ({\n  poolIds: migrationInfo.value?.suggestedPools as string[],\n}));\nconst suggestedPoolsQuery = usePoolsQuery(filterOptions);\n\n/**\n * COMPUTED\n */\nconst loadingNewPool = computed(\n  () => newPoolQuery && newPoolQuery.isLoading.value\n);\nconst newPool = computed(() => {\n  if (!newPoolQuery) {\n    return;\n  }\n  return newPoolQuery.data.value;\n});\n\nconst loadingSuggestedPools = computed(\n  () => suggestedPoolsQuery && suggestedPoolsQuery.isLoading.value\n);\nconst suggestedPools = computed(() => {\n  if (!suggestedPoolsQuery) {\n    return;\n  }\n  return suggestedPoolsQuery.data.value?.pages?.[0].pools;\n});\n\nconst showLoadingBlock = computed(() => {\n  return (\n    (newPoolQueryEnabled.value && loadingNewPool.value) ||\n    (suggestPoolsQueryEnabled.value && loadingSuggestedPools.value)\n  );\n});\n\nconst description = computed(() => {\n  const poolDescription = migrationInfo.value?.description;\n  if (poolDescription) {\n    return t(poolDescription);\n  }\n\n  return t('migrateCard.description');\n});\n\nconst title = computed(() => {\n  const cardTitle = migrationInfo.value?.title;\n  if (cardTitle) {\n    return t(cardTitle);\n  }\n\n  return t('migrateCard.title');\n});\n</script>\n\n<template>\n  <BalLoadingBlock\n    v-if=\"showLoadingBlock\"\n    class=\"mb-4 h-60 pool-actions-card\"\n  />\n  <BalStack v-else vertical>\n    <GradientCard>\n      <div class=\"flex flex-col items-center text-white\">\n        <div class=\"container pt-5\">\n          <div class=\"mb-2 text-3xl font-bold text-opacity-90\">\n            {{ title }}\n          </div>\n          <div class=\"mb-3 text-sm font-medium text-opacity-80\">\n            {{ description }}\n          </div>\n          <div v-if=\"newPool\" class=\"no-pad\">\n            <div\n              class=\"pb-3 mx-5 font-bold border-b border-gray-300 border-opacity-25 no-pad pools\"\n            >\n              {{ $t('migrateCard.upgradedPool') }}\n            </div>\n            <NewPoolData :pool=\"newPool\" />\n          </div>\n          <div v-else-if=\"suggestedPools\" class=\"no-pad\">\n            <div\n              class=\"pb-3 mx-5 font-bold border-b border-gray-300 border-opacity-25 no-pad\"\n            >\n              {{ $t('migrateCard.recommendedPool') }}\n            </div>\n            <div class=\"no-pad\">\n              <NewPoolData\n                v-for=\"sPool in suggestedPools\"\n                :key=\"sPool.id\"\n                :pool=\"sPool\"\n              />\n            </div>\n          </div>\n          <div v-else class=\"flex py-3\">\n            <BalBtn\n              class=\"flex-grow hover:!text-white\"\n              color=\"transparent\"\n              outline\n              :label=\"$t('migrateCard.viewBtn')\"\n              @click=\"$router.push({ name: 'vebal', params: { networkSlug } })\"\n            />\n          </div>\n        </div>\n      </div>\n    </GradientCard>\n  </BalStack>\n</template>\n<style scoped>\n.container *:not(.no-pad) {\n  @apply px-5;\n}\n</style>\n","import { Protocol } from '@/composables/useProtocols';\nimport {\n  isArbitrum,\n  isGnosis,\n  isOptimism,\n  isPolygon,\n} from '@/composables/useNetwork';\nimport {\n  boostedProtocols,\n  isBoosted,\n  isComposableStable,\n  isMetaStable,\n  isStable,\n  isWeighted,\n} from '@/composables/usePoolHelpers';\nimport { POOLS } from '@/constants/pools';\nimport { Pool } from '@/services/pool/types';\nimport { RiskKey } from '@/types/pools';\nimport { capitalize } from 'lodash';\n\nexport const riskTitles = {\n  [RiskKey.General]: 'General Symmetric protocol risks',\n  [RiskKey.Weighted]: 'Weighted pool risks',\n  [RiskKey.Stable]: 'Stable pool risks',\n  [RiskKey.ComposableStable]: 'Composable stable pool risks',\n  [RiskKey.MetaStable]: 'MetaStable pool risks',\n  [RiskKey.Boosted]: 'Boosted pool risks',\n  [RiskKey.Arbitrum]: 'Layer 2 network risks: Arbitrum',\n  [RiskKey.Polygon]: 'Layer 2 network risks: Polygon',\n  [RiskKey.Optimism]: 'Layer 2 network risks: Optimism',\n  [RiskKey.Gnosis]: 'Layer 2 network risks: Gnosis',\n  [RiskKey.Mutable]: 'Mutable attributes risks',\n  [RiskKey.Composability]: 'Composability risks',\n  [RiskKey.RateProvider]: 'Rate provider risks',\n  [RiskKey.RateProviderBridge]:\n    'Rate provider cross-chain bridge risks: Layer Zero',\n};\n\nexport interface Risk {\n  title: string;\n  hash: string;\n}\n\nfunction aLink(key: RiskKey, title?: string) {\n  return {\n    title: title || riskTitles[key],\n    hash: `#${key}`,\n  };\n}\n\n// Pool type risks\nconst weightedRisks = aLink(RiskKey.Weighted);\nconst stableRisks = aLink(RiskKey.Stable);\nconst composableRisks = aLink(\n  RiskKey.ComposableStable,\n  // Explicit title because RiskKey.ComposableStable and RiskKey.MetaStable share the same key (hash)\n  'Composable Stable pool risks'\n);\nconst metaStableRisks = aLink(\n  RiskKey.ComposableStable,\n  riskTitles[RiskKey.MetaStable]\n);\nconst boostedRisks = aLink(RiskKey.Boosted);\nconst arbitrumRisks = aLink(RiskKey.Arbitrum);\nconst polygonRisks = aLink(RiskKey.Polygon);\nconst optimismRisks = aLink(RiskKey.Optimism);\nconst gnosisRisks = aLink(RiskKey.Gnosis);\nconst mutableRisks = aLink(RiskKey.Mutable);\n\nexport function riskLinks(pool: Pool): Risk[] {\n  const result: Risk[] = [];\n\n  if (isWeighted(pool.poolType)) result.push(weightedRisks);\n  if (isStable(pool.poolType)) result.push(stableRisks);\n  if (isComposableStable(pool.poolType)) result.push(composableRisks);\n  if (isMetaStable(pool.poolType)) result.push(metaStableRisks);\n\n  if (isBoosted(pool)) {\n    result.push(boostedRisks);\n    const thirdPartyRisks = generateThirdPartyComposabilityRisks(pool);\n    if (thirdPartyRisks) result.push(thirdPartyRisks);\n  }\n\n  if (isArbitrum.value) result.push(arbitrumRisks);\n  if (isOptimism.value) result.push(optimismRisks);\n  if (isPolygon.value) result.push(polygonRisks);\n  if (isGnosis.value) result.push(gnosisRisks);\n\n  if (hasOwner(pool)) result.push(mutableRisks);\n\n  result.push(aLink(RiskKey.General));\n\n  return result;\n}\n\nexport function generateThirdPartyComposabilityRisks(pool): Risk | undefined {\n  const protocols = boostedProtocols(pool);\n\n  if (protocols?.includes(Protocol.Tetu) || protocols?.includes(Protocol.Idle))\n    return aLink(\n      RiskKey.Composability,\n      'Third party DeFi composability risks: May use multiple yield protocols'\n    );\n\n  if (protocols?.includes(Protocol.Reaper)) protocols.push(Protocol.Granary);\n\n  if (protocols) {\n    return aLink(\n      RiskKey.Composability,\n      `Third party DeFi composability risks: ${protocols\n        .map(protocol => capitalize(protocol))\n        .join(', ')}`\n    );\n  }\n}\n\nfunction hasOwner(pool) {\n  return ![undefined, POOLS.ZeroAddress].includes(pool?.owner);\n}\n\nexport function risksTitle(pool: Pool) {\n  return `Liquidity Providers in this pool${alsoWhenSpecificRisks(\n    pool\n  )} face the following risks:`;\n}\n\nfunction alsoWhenSpecificRisks(pool: Pool) {\n  if (poolSpecificRisks(pool).length > 0) return ' also';\n  return '';\n}\n\nexport function poolSpecificRisks(pool: Pool): Risk[] {\n  const risks = POOLS?.Risks?.[pool.id.toLowerCase()];\n\n  if (risks) {\n    return risks.map(risk => aLink(risk));\n  }\n\n  return [];\n}\n","<script setup lang=\"ts\">\nimport { Pool } from '@/services/pool/types';\nimport {\n  riskLinks,\n  risksTitle,\n  poolSpecificRisks,\n} from '@/composables/usePoolRisks';\nimport PoolRiskList from './PoolRiskList.vue';\n\n/**\n * TYPES\n */\ntype Props = {\n  pool: Pool;\n};\n\n/**\n * PROPS\n */\nconst props = defineProps<Props>();\n\nconst _poolSpecificRisks = poolSpecificRisks(props.pool);\nconst _poolGeneralRisks = riskLinks(props.pool);\n\nconst hasSpecificRisks = _poolSpecificRisks.length > 0;\n</script>\n\n<template>\n  <div id=\"risks-section\">\n    <h3 class=\"px-4 lg:px-0 mb-3\" v-text=\"$t('poolRisks.title')\" />\n\n    <PoolRiskList\n      v-if=\"hasSpecificRisks\"\n      :risks=\"_poolSpecificRisks\"\n      class=\"mb-3\"\n    />\n\n    <p class=\"px-4 lg:px-0 mb-3\">\n      {{ risksTitle(pool) }}\n    </p>\n\n    <PoolRiskList :risks=\"_poolGeneralRisks\" />\n  </div>\n</template>\n\n","<script setup lang=\"ts\">\nimport { useRoute } from 'vue-router';\nimport {\n  PoolChart,\n  PoolStatCards,\n  PoolTransactionsCard,\n  MyPoolBalancesCard,\n  PoolCompositionCard,\n  PoolContractDetails,\n} from '@/components/contextual/pages/pool';\nimport StakingIncentivesCard from '@/components/contextual/pages/pool/staking/StakingIncentivesCard.vue';\nimport PoolLockingCard from '@/components/contextual/pages/pool/PoolLockingCard/PoolLockingCard.vue';\nimport ApyVisionPoolLink from '@/components/links/ApyVisionPoolLink.vue';\nimport PoolPageHeader from '@/components/pool/PoolPageHeader.vue';\nimport usePoolAprQuery from '@/composables/queries/usePoolAprQuery';\nimport usePoolSnapshotsQuery from '@/composables/queries/usePoolSnapshotsQuery';\nimport {\n  isVeBalPool,\n  preMintedBptIndex,\n  usePoolHelpers,\n  tokensListExclBpt,\n  tokenTreeLeafs,\n  orderedPoolTokens,\n} from '@/composables/usePoolHelpers';\nimport { useTokens } from '@/providers/tokens.provider';\nimport { POOLS } from '@/constants/pools';\nimport { includesAddress } from '@/lib/utils';\nimport useHistoricalPricesQuery from '@/composables/queries/useHistoricalPricesQuery';\nimport { PoolToken } from '@/services/pool/types';\nimport useWeb3 from '@/services/web3/useWeb3';\nimport BrandedRedirectCard from '@/components/pool/branded-redirect/BrandedRedirectCard.vue';\nimport metaService from '@/services/meta/meta.service';\nimport PoolMigrationCard from '@/components/contextual/pages/pool/PoolMigrationCard/PoolMigrationCard.vue';\nimport StakePreviewModal from '@/components/contextual/pages/pool/staking/StakePreviewModal.vue';\nimport PoolRisks from '@/components/contextual/pages/pool/risks/PoolRisks.vue';\nimport { usePool } from '@/providers/local/pool.provider';\nimport { provideUserStaking } from '@/providers/local/user-staking.provider';\nimport { providerUserPools } from '@/providers/local/user-pools.provider';\n\nconst userStaking = provideUserStaking();\nproviderUserPools(userStaking);\n\n/**\n * STATE\n */\nconst route = useRoute();\nconst router = useRouter();\nconst poolId = (route.params.id as string).toLowerCase();\nconst isRestakePreviewVisible = ref(false);\n\n/**\n * COMPOSABLES\n */\nconst { prices, priceQueryLoading } = useTokens();\nconst { isWalletReady } = useWeb3();\nconst _isVeBalPool = isVeBalPool(poolId);\nconst { pool, isLoadingPool } = usePool();\nconsole.log('pool', pool);\nconst {\n  isStableLikePool,\n  isLiquidityBootstrappingPool,\n  isComposableStableLikePool,\n  isDeprecatedPool,\n  isNewPoolAvailable,\n} = usePoolHelpers(pool);\n\n/**\n * COMPUTED\n */\nconst loadingPool = computed(() => isLoadingPool.value || !pool.value);\n\n//#region pool snapshot query\nconst poolSnapshotsQuery = usePoolSnapshotsQuery(poolId, undefined, {\n  refetchOnWindowFocus: false,\n});\nconst isLoadingSnapshots = computed(() => poolSnapshotsQuery.isLoading.value);\n\nconst snapshots = computed(() => poolSnapshotsQuery.data.value);\n//#endregion\n\n//#region historical prices query\nconst historicalPricesQuery = useHistoricalPricesQuery(\n  poolId,\n  undefined,\n  // in order to prevent multiple coingecko requests\n  { refetchOnWindowFocus: false }\n);\nconst historicalPrices = computed(() => historicalPricesQuery.data.value);\n//#endregion\n\n//#region APR query\nconst aprQuery = usePoolAprQuery(poolId);\nconst loadingApr = computed(\n  () => aprQuery.isLoading.value || Boolean(aprQuery.error.value)\n);\nconst poolApr = computed(() => aprQuery.data.value);\n//#endregion\n\n//#region Intersection Observer\nconst intersectionSentinel = ref<HTMLDivElement | null>(null);\nconst isSentinelIntersected = ref(false);\nlet observer: IntersectionObserver | undefined;\n\nfunction addIntersectionObserver(): void {\n  if (\n    !('IntersectionObserver' in window) ||\n    !('IntersectionObserverEntry' in window) ||\n    !intersectionSentinel.value\n  ) {\n    isSentinelIntersected.value = true;\n    return;\n  }\n\n  const options = {\n    rootMargin: '-100px',\n  };\n\n  const callback = (entries: IntersectionObserverEntry[]): void => {\n    entries.forEach(entry => {\n      if (entry.isIntersecting) {\n        isSentinelIntersected.value = true;\n      }\n    });\n  };\n  observer = new IntersectionObserver(callback, options);\n  observer.observe(intersectionSentinel.value);\n}\n\nasync function goToRisksSection() {\n  isSentinelIntersected.value = true;\n  // Wait for risks section to be rendered\n  await nextTick();\n  router.push({ path: route.fullPath, hash: '#risks-section' });\n}\n\nonMounted(() => {\n  addIntersectionObserver();\n});\nonBeforeUnmount(() => {\n  observer?.disconnect();\n});\n//#endregion\n\nconst missingPrices = computed(() => {\n  if (pool.value && prices.value && !priceQueryLoading.value) {\n    const tokensWithPrice = Object.keys(prices.value);\n    const tokens = tokenTreeLeafs(pool.value.tokens);\n\n    return !tokens.every(token => includesAddress(tokensWithPrice, token));\n  }\n  return false;\n});\n\nconst titleTokens = computed<PoolToken[]>(() => {\n  if (!pool.value || !pool.value.tokens) return [];\n\n  return orderedPoolTokens(pool.value, pool.value.tokens);\n});\n\nconst isStakablePool = computed(\n  (): boolean =>\n    POOLS.Stakable.VotingGaugePools.includes(poolId) ||\n    POOLS.Stakable.AllowList.includes(poolId)\n);\n\nconst poolPremintedBptIndex = computed(() => {\n  if (!pool.value) return null;\n  return preMintedBptIndex(pool.value) ?? null;\n});\n\nconst showBrandedRedirectCard = computed(() => {\n  if (!pool.value) return false;\n  return POOLS.BrandedRedirect?.[pool.value.poolType] || false;\n});\n\nfunction setRestakeVisibility(value: boolean): void {\n  isRestakePreviewVisible.value = value;\n}\n\n/**\n * WATCHERS\n */\nwatch(\n  () => pool.value,\n  () => {\n    if (pool.value) {\n      metaService.setMeta(route, pool.value);\n    }\n  }\n);\n</script>\n\n<template>\n  <div class=\"xl:container lg:px-4 pt-8 xl:mx-auto\">\n    <div\n      class=\"grid grid-cols-1 lg:grid-cols-3 gap-x-0 lg:gap-x-4 xl:gap-x-8 gap-y-8\"\n    >\n      <div class=\"col-span-2 px-4 lg:px-0\">\n        <BalLoadingBlock\n          v-if=\"loadingPool || !pool\"\n          class=\"header-loading-block\"\n        />\n        <PoolPageHeader\n          v-else\n          :loadingApr=\"loadingApr\"\n          :pool=\"pool\"\n          :poolApr=\"poolApr\"\n          :isStableLikePool=\"isStableLikePool\"\n          :titleTokens=\"titleTokens\"\n          :missingPrices=\"missingPrices\"\n          :isLiquidityBootstrappingPool=\"isLiquidityBootstrappingPool\"\n          :isComposableStableLikePool=\"isComposableStableLikePool\"\n          @set-restake-visibility=\"setRestakeVisibility\"\n        />\n      </div>\n      <div class=\"hidden lg:block\" />\n      <div class=\"order-2 lg:order-1 col-span-2\">\n        <div class=\"grid grid-cols-1 gap-y-8\">\n          <div class=\"px-4 lg:px-0\">\n            <PoolChart\n              :historicalPrices=\"historicalPrices\"\n              :snapshots=\"snapshots\"\n              :loading=\"isLoadingSnapshots\"\n              :totalLiquidity=\"pool?.totalLiquidity\"\n              :tokensList=\"pool ? tokensListExclBpt(pool) : []\"\n              :poolType=\"pool?.poolType\"\n              :poolPremintedBptIndex=\"poolPremintedBptIndex\"\n            />\n          </div>\n          <div class=\"px-4 lg:px-0 mb-4\">\n            <PoolStatCards\n              :pool=\"pool\"\n              :poolApr=\"poolApr\"\n              :loading=\"loadingPool\"\n              :loadingApr=\"loadingApr\"\n            />\n            <ApyVisionPoolLink\n              v-if=\"!loadingPool && pool\"\n              :poolId=\"pool.id\"\n              :tokens=\"titleTokens\"\n            />\n          </div>\n          <div class=\"mb-4\">\n            <h3\n              class=\"px-4 lg:px-0 mb-3\"\n              v-text=\"$t('poolComposition.title')\"\n            />\n            <BalLoadingBlock v-if=\"loadingPool\" class=\"h-64\" />\n            <PoolCompositionCard v-else-if=\"pool\" :pool=\"pool\" />\n          </div>\n\n          <div ref=\"intersectionSentinel\" />\n          <template v-if=\"isSentinelIntersected && pool\">\n            <PoolTransactionsCard :pool=\"pool\" :loading=\"loadingPool\" />\n            <PoolContractDetails :pool=\"pool\" />\n            <PoolRisks :pool=\"pool\" />\n          </template>\n        </div>\n      </div>\n\n      <div class=\"order-1 lg:order-2 px-4 lg:px-0\">\n        <BalStack vertical>\n          <BrandedRedirectCard\n            v-if=\"showBrandedRedirectCard && pool\"\n            :poolType=\"pool?.poolType\"\n          />\n\n          <div v-else>\n            <BalLoadingBlock\n              v-if=\"loadingPool || !pool\"\n              class=\"mb-4 h-60 pool-actions-card\"\n            />\n            <MyPoolBalancesCard\n              v-else-if=\"!isLiquidityBootstrappingPool\"\n              :pool=\"pool\"\n              :missingPrices=\"missingPrices\"\n              class=\"mb-4\"\n              @risks-clicked=\"goToRisksSection()\"\n            />\n          </div>\n\n          <BalLoadingBlock v-if=\"loadingPool\" class=\"h-40 pool-actions-card\" />\n          <StakingIncentivesCard\n            v-if=\"isStakablePool && !loadingPool && pool && isWalletReady\"\n            :pool=\"pool\"\n            class=\"staking-incentives\"\n            @set-restake-visibility=\"setRestakeVisibility\"\n          />\n          <PoolLockingCard\n            v-if=\"_isVeBalPool && !loadingPool && pool\"\n            :pool=\"pool\"\n            class=\"pool-locking\"\n          />\n          <PoolMigrationCard\n            v-if=\"\n              poolId &&\n              isWalletReady &&\n              (isDeprecatedPool || isNewPoolAvailable)\n            \"\n            :poolId=\"poolId\"\n          />\n        </BalStack>\n      </div>\n      <StakePreviewModal\n        v-if=\"!!pool\"\n        :isVisible=\"isRestakePreviewVisible\"\n        :pool=\"pool\"\n        action=\"restake\"\n        @close=\"isRestakePreviewVisible = false\"\n        @success=\"isRestakePreviewVisible = false\"\n      />\n    </div>\n  </div>\n</template>\n\n<style scoped>\n.pool-actions-card {\n  @apply relative;\n}\n\n@media (min-width: 768px) and (min-height: 600px) {\n  .pool-actions-card {\n    @apply sticky top-24;\n  }\n}\n\n.staking-incentives :deep(.active-section) {\n  @apply border-transparent;\n}\n\n.header-loading-block {\n  height: 6.75rem;\n}\n</style>\n"],"names":["MILLISECONDS_IN_MINUTE","addMinutes","dirtyDate","dirtyAmount","requiredArgs","amount","toInteger","addMilliseconds","isMigratablePool","hasNonApprovedRateProviders","usePoolHelpers","toRef","props","isWalletReady","startConnectWithInjectedProvider","useWeb3","networkSlug","useNetwork","shouldDisableJoins","useDisabledJoinPool","balanceFor","useTokens","isAffectedBy","usePoolWarning","computed","hasBpt","bnum","joinDisabled","deprecatedDetails","isJoinsDisabled","fNum","useNumbers","stakedShares","usePoolStaking","router","useRouter","totalLockedValue","useLock","isVeBalPool","bptBalance","fiatValue","fiatValueOf","showMigrateButton","navigateToPoolMigration","pool","_a","configService","useUserPoolPercentage","isVeBal","totalLockedShares","userPoolPercentage","userPoolPercentageLabel","token","showUserShares","rootPool","toRefs","tokenData","explorerLinks","isDeepPool","isWeighted","isWeightedLike","getToken","currentLevel","nestedPaddingClass","symbolFor","token2","isNumber","str","useTokenBreakdown","toFiat","isDeep","tokensData","totalFiat","calculateAllTokensData","calculateTokenData","shareOfParentInPool","balance","isParentTokenInDeepPool","_b","balanceValue","calculateBalanceValue","calculateFiatValue","userFiat","applyUserPoolPercentageTo","userFiatLabel","formatFiatValue","userBalanceLabel","formatBalanceValue","tokenWeightLabel","FNumFormats","getTokenPercentageLabel","tokenPercentage","_c","shareOfTokenInPool","_e","_d","_h","_g","_f","value","textColorClasses","TOTAL_COMPOSITION","MY_POOL_SHARE","upToLargeBreakpoint","useBreakpoints","t","useI18n","removeBptFrom","compositionTab","mySharesTab","activeTab","ref","userHasShares","tabs","onMounted","nextTick","_hoisted_1","_openBlock","_createBlock","_component_BalAlert","_withCtx","_createElementVNode","_createVNode","_component_BalLink","_hoisted_2","_component_BalIcon","MIN_CHART_VALUES","tailwind","useTailwind","isMobile","darkMode","useDarkMode","currentChartValue","currentChartDate","isFocusedOnChart","snapshotValues","periodOptions","currentPeriod","timestamps","snapshot","format","getTVLData","periodSnapshots","tvlValues","PoolType","idx","timestamp","prices","amounts","_","index","snapshotPoolValue","sum","echarts.graphic.LinearGradient","getFeesData","isAllTimeSelected","pariodLastSnapshotIdx","feesValues","prevValue","addLaggingTimestamps","defaultHeaderStateValue","getVolumeData","volumeData","chartData","defaultChartData","currentPeriodOption","option","title","showFxPoolWarning","poolType","isFx","setCurrentPeriod","period","setCurrentChartValue","payload","PRETTY_DATE_FORMAT","lastDate","days","timestampsArr","i","twentyFourHoursInSecs","aprLabel","poolAPRs","totalAprLabel","stats","volumeSnapshot","feesSnapshot","VOLUME_THRESHOLD","APR_THRESHOLD","shouldHideAprs","usePoolSwapsQuery","id","subgraphQuery","options","networkId","queryKey","reactive","QUERY_KEYS","queryFn","pageParam","pagination","POOLS","poolSwaps","balancerSubgraphService","queryOptions","lastPage","useInfiniteQuery","useUserPoolSwapsQuery","account","enabled","PoolTransactionsTab","priceFor","columns","swapRows","groupBy","tx","swaps","tokenIn","tokenOut","type","label","tokenAmounts","getTokenAmounts","getTransactionValue","formatDistanceToNow","mainTokenAddress","getUnderlyingTokenAddress","mainEquivAmount","getMainTokenEquivalentAmount","total","address","price","amountNumber","isInvest","swap","tokenAmountIn","tokenAmountOut","linearPools","poolSwapsQuery","flatten","page","isLoadingPoolSwaps","poolSwapsHasNextPage","poolSwapsIsFetchingNextPage","loadMorePoolSwaps","usePoolActivitiesQuery","poolActivities","usePoolUserActivitiesQuery","activityRows","poolTokenItselfIndex","preMintedBptIndex","amountExcludedPoolTokenItself","isJoin","getJoinExitValue","getJoinExitDetails","getAddress","symbol","poolActivitiesQuery","isLoadingPoolActivities","poolActivitiesHasNextPage","poolActivitiesIsFetchingNextPage","loadMorePoolActivities","isStablePhantomPool","userAddress","ensName","ensAvatar","explorer","formSwapFeesHint","owner","data","createTime","swapFee","name","onchain","poolMetadata","poolOwnerData","poolOwnerTooltip","shortenLabel","poolManagementText","shouldShowWarningAlert","showCheckpointModal","networksSyncState","shouldPokeGauge","useCrossChainSync","hasNonPrefGaugeBalance","poolGauges","isMismatchedNetwork","userGaugeShares","useUserStaking","canShowSyncAlert","gauge","gauge2","PoolWarning","tipText","text","NetworkSyncState","config","warningAlert","setWarningAlertState","emit","error","isStakePreviewVisible","stakeAction","poolId","isOpenedByDefault","isStakablePool","isLoadingStakingData","isRefetchingStakedShares","preferentialGaugeAddress","isAffected","fiatValueOfStakedShares","fiatValueOfUnstakedShares","isStakeDisabled","showStakePreview","showUnstakePreview","handlePreviewClose","showUnlockPreviewModal","lock","isLoadingLockInfo","lockPool","lockPoolToken","poolShares","fiatTotal","totalExpiredLpTokens","fiatTotalExpiredLpTokens","_imports_0","poolPathSymbolSegment","tokens","useApyVisionHelpers","apyVisionNetworkName","_sfc_main$8","defineComponent","warnings","balancerTokenListTokens","disableJoinsReason","nonAllowedSymbols","feesFixed","communityManagedFees","feesManagedByGauntlet","swapFeeToolTip","poolFeeLabel","feeLabel","hasCustomToken","knownTokens","includesAddress","poolTypeLabel","key","getPoolMetadata","hasMetadata","titleTokenIndex","usePoolAprQuery","storedPool","poolsStoreService","poolQuery","usePoolQuery","_pool","getBalancerSDK","useQuery","usePoolSnapshotsQuery","useHistoricalPricesQuery","tokensList","tokensListExclPoolTokens","shapshotDaysNum","differenceInDays","aggregateBy","coingeckoService","BRANDED_REDIRECT_DATA","buildXaveBannerPath","redirectData","brand","hasBannerImage","bannerSrc","iconAddresses","hasIcon","orderedTokenAddresses","isHovered","_component_BalCard","migrationInfo","gaugeMigrationDetails","newVersionDetails","newPoolQueryEnabled","newPoolQuery","suggestPoolsQueryEnabled","filterOptions","suggestedPoolsQuery","usePoolsQuery","loadingNewPool","newPool","loadingSuggestedPools","suggestedPools","showLoadingBlock","description","poolDescription","cardTitle","riskTitles","RiskKey","aLink","weightedRisks","stableRisks","composableRisks","metaStableRisks","boostedRisks","arbitrumRisks","polygonRisks","optimismRisks","gnosisRisks","mutableRisks","riskLinks","result","isStable","isComposableStable","isMetaStable","isBoosted","thirdPartyRisks","generateThirdPartyComposabilityRisks","isArbitrum","isOptimism","isPolygon","isGnosis","hasOwner","protocols","boostedProtocols","Protocol","protocol","capitalize","risksTitle","alsoWhenSpecificRisks","poolSpecificRisks","risks","risk","_poolSpecificRisks","_poolGeneralRisks","hasSpecificRisks","userStaking","provideUserStaking","providerUserPools","route","useRoute","isRestakePreviewVisible","priceQueryLoading","_isVeBalPool","isLoadingPool","usePool","isStableLikePool","isLiquidityBootstrappingPool","isComposableStableLikePool","isDeprecatedPool","isNewPoolAvailable","loadingPool","poolSnapshotsQuery","isLoadingSnapshots","snapshots","historicalPricesQuery","historicalPrices","aprQuery","loadingApr","poolApr","intersectionSentinel","isSentinelIntersected","observer","addIntersectionObserver","callback","entries","entry","goToRisksSection","onBeforeUnmount","missingPrices","tokensWithPrice","tokenTreeLeafs","titleTokens","orderedPoolTokens","poolPremintedBptIndex","showBrandedRedirectCard","setRestakeVisibility","watch","metaService"],"mappings":"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"}