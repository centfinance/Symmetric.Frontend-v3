{"version":3,"file":"BalStack.vue_vue_type_script_lang-342e535e.js","sources":["../../src/components/_global/BalStack/BalStack.vue"],"sourcesContent":["<script lang=\"ts\">\ntype Spacing = 'xs' | 'sm' | 'base' | 'lg' | 'xl' | '2xl' | 'none';\ntype Alignment = 'center' | 'start' | 'end' | 'between';\n\n/**\n * Maps discrete spacing types to a tailwind spacing tier\n */\nconst SpacingMap: Record<Spacing, number> = {\n  xs: 1,\n  sm: 2,\n  base: 4,\n  lg: 8,\n  xl: 12,\n  '2xl': 16,\n  none: 0,\n};\n\nexport default defineComponent({\n  props: {\n    /**\n     * Stacked top down\n     */\n    vertical: { type: Boolean, default: () => false },\n    /**\n     * Stacked left to right\n     */\n    horizontal: { type: Boolean, default: () => false },\n    spacing: {\n      type: String as PropType<Spacing>,\n      default: () => 'base',\n    },\n    /**\n     * Show a hairline border after each stack element\n     */\n    withBorder: {\n      type: Boolean,\n      default: () => false,\n    },\n    /**\n     * Flex align prop\n     */\n    align: {\n      type: String as PropType<Alignment>,\n      default: null,\n    },\n    /**\n     * Flex justify prop\n     */\n    justify: {\n      type: String as PropType<Alignment>,\n      default: null,\n    },\n    /**\n     * Will cause children of the stack to occupy\n     * as much space as possible.\n     */\n    expandChildren: {\n      type: Boolean,\n      default: () => false,\n    },\n  },\n  setup(props, { slots, attrs }) {\n    return {\n      slotsWithContent: [],\n      slots,\n      attrs,\n    };\n  },\n  render() {\n    const spacingType = this.vertical ? 'mb' : 'mr';\n    const borderType = this.vertical ? 'b' : 'r';\n    const widthClass = this.expandChildren ? 'w-full' : '';\n    const borderClass = this.withBorder ? `border-${borderType}` : '';\n    const stackNodeClass = `${spacingType}-${\n      SpacingMap[this.spacing]\n    } ${borderClass} ${widthClass}`;\n\n    // @ts-ignore\n    const vNodes = this.$slots.default() || [];\n    // if a childs 'value' is 'v-if', it is not visible so filter it out\n    // to not cause an empty node to render with margin\n    const children = vNodes.filter(vNode => vNode.children !== 'v-if');\n    // need to apply margin and decorator classes to all children\n    const styledChildren = children.map((child, childIndex) => {\n      let styledNestedChildren = child.children;\n      // a child can have an array of nested children, this is when\n      // those children are rendered as part of a 'v-for directive'\n      if (Array.isArray(styledNestedChildren)) {\n        // and those children can be nullish too\n        const nonNullishChildren = styledNestedChildren.filter(\n          nestedChild => nestedChild !== undefined || nestedChild !== null\n        );\n        styledNestedChildren = nonNullishChildren.map(\n          (nestedChild, nestedChildIndex) => {\n            //@ts-ignore\n            return h(nestedChild, {\n              class:\n                nestedChildIndex !== nonNullishChildren.length - 1\n                  ? stackNodeClass\n                  : null,\n            });\n          }\n        );\n        return h(\n          child,\n          {\n            class: childIndex !== children.length - 1 ? stackNodeClass : null,\n          },\n          [styledNestedChildren]\n        );\n      }\n      return h(child, {\n        class: childIndex !== children.length - 1 ? stackNodeClass : null,\n      });\n    });\n    return h(\n      'div',\n      {\n        attrs: this.$attrs,\n        class: [\n          'flex',\n          {\n            'flex-row': this.horizontal,\n            'flex-col': this.vertical,\n            'items-center': this.align === 'center',\n            'items-start': this.align === 'start',\n            'items-end': this.align === 'end',\n            'items-between': this.align === 'between',\n            'justify-center': this.justify === 'center',\n            'justify-start': this.justify === 'start',\n            'justify-end': this.justify === 'end',\n            'justify-between': this.justify === 'between',\n          },\n        ],\n      },\n      [styledChildren]\n    );\n  },\n});\n</script>\n"],"names":["SpacingMap","_sfc_main","defineComponent","props","slots","attrs","spacingType","borderType","widthClass","borderClass","stackNodeClass","children","vNode","styledChildren","child","childIndex","styledNestedChildren","nonNullishChildren","nestedChild","nestedChildIndex","h"],"mappings":"kEAOA,MAAAA,EAAA,CAA4C,GAAA,EACtC,GAAA,EACA,KAAA,EACE,GAAA,EACF,GAAA,GACA,MAAA,GACG,KAAA,CAET,EAEAC,EAAAC,EAAA,CAA+B,MAAA,CACtB,SAAA,CAAA,KAAA,QAAA,QAAA,IAAA,EAAA,EAI2C,WAAA,CAAA,KAAA,QAAA,QAAA,IAAA,EAAA,EAIE,QAAA,CACzC,KAAA,OACD,QAAA,IAAA,MACS,EACjB,WAAA,CAIY,KAAA,QACJ,QAAA,IAAA,EACS,EACjB,MAAA,CAIO,KAAA,OACC,QAAA,IACG,EACX,QAAA,CAIS,KAAA,OACD,QAAA,IACG,EACX,eAAA,CAKgB,KAAA,QACR,QAAA,IAAA,EACS,CACjB,EACF,MAAAC,EAAA,CAAA,MAAAC,EAAA,MAAAC,CAAA,EAAA,CAEE,MAAA,CAAO,iBAAA,CAAA,EACc,MAAAD,EACnB,MAAAC,CACA,CACF,EACF,QAAA,CAEE,MAAAC,EAAA,KAAA,SAAA,KAAA,KACAC,EAAA,KAAA,SAAA,IAAA,IACAC,EAAA,KAAA,eAAA,SAAA,GACAC,EAAA,KAAA,WAAA,UAAAF,IAAA,GACAG,EAAA,GAAAJ,KAAAN,EAAA,KAAA,OAAA,KAAAS,KAAAD,IAQAG,GAHA,KAAA,OAAA,QAAA,GAAA,CAAA,GAGA,OAAAC,GAAAA,EAAA,WAAA,MAAA,EAEAC,EAAAF,EAAA,IAAA,CAAAG,EAAAC,IAAA,CACE,IAAAC,EAAAF,EAAA,SAGA,GAAA,MAAA,QAAAE,CAAA,EAAA,CAEE,MAAAC,EAAAD,EAAA,OAAgDE,GAAAA,IAAA,QAAAA,IAAA,IACc,EAE9D,OAAAF,EAAAC,EAAA,IAA0C,CAAAC,EAAAC,IAGtCC,EAAAF,EAAA,CAAsB,MAAAC,IAAAF,EAAA,OAAA,EAAAP,EAAA,IAId,CAAA,CAEV,EAEFU,EAAON,EACL,CACA,MAAAC,IAAAJ,EAAA,OAAA,EAAAD,EAAA,IAC+D,EAC/D,CAAAM,CAAA,CACqB,CACvB,CAEF,OAAAI,EAAAN,EAAA,CAAgB,MAAAC,IAAAJ,EAAA,OAAA,EAAAD,EAAA,IAC+C,CAAA,CAC9D,CAAA,EAEH,OAAAU,EAAO,MACL,CACA,MAAA,KAAA,OACc,MAAA,CACL,OACL,CACA,WAAA,KAAA,WACmB,WAAA,KAAA,SACA,eAAA,KAAA,QAAA,SACc,cAAA,KAAA,QAAA,QACD,YAAA,KAAA,QAAA,MACF,gBAAA,KAAA,QAAA,UACI,iBAAA,KAAA,UAAA,SACG,gBAAA,KAAA,UAAA,QACD,cAAA,KAAA,UAAA,MACF,kBAAA,KAAA,UAAA,SACI,CACtC,CACF,EACF,CAAAP,CAAA,CACe,CACjB,CAEJ,CAAA"}