{"version":3,"file":"legacy-5bada861.js","sources":["../../src/composables/queries/useUserClaimsQuery.ts","../../node_modules/promise-worker/index.js","../../src/services/claim/claim-worker-pool.service.ts","../../src/services/claim/claim.service.ts","../../src/components/contextual/pages/claim/LegacyClaims.vue","../../src/pages/claim/legacy.vue"],"sourcesContent":["import { computed, reactive } from 'vue';\nimport { useQuery, UseQueryOptions } from '@tanstack/vue-query';\n\nimport useNetwork from '@/composables/useNetwork';\nimport QUERY_KEYS from '@/constants/queryKeys';\nimport { ClaimService } from '@/services/claim/claim.service';\nimport { MultiTokenPendingClaims } from '@/services/claim/types';\nimport useWeb3 from '@/services/web3/useWeb3';\n\ntype UserClaimsQueryResponse = {\n  multiTokenPendingClaims: MultiTokenPendingClaims[];\n};\n\ntype QueryOptions = UseQueryOptions<UserClaimsQueryResponse>;\n\nexport default function useUserClaimsQuery(\n  claimService: ClaimService,\n  options: QueryOptions = {}\n) {\n  // COMPOSABLES\n  const { account, isWalletReady } = useWeb3();\n  const { networkId } = useNetwork();\n\n  // DATA\n  const queryKey = reactive(\n    QUERY_KEYS.Claims.All(networkId, account, claimService.merkleOrchardVersion)\n  );\n\n  // COMPUTED\n  const enabled = computed(() => isWalletReady.value && account.value != null);\n\n  // METHODS\n  const queryFn = async () => {\n    const multiTokenPendingClaims =\n      await claimService.getMultiTokensPendingClaims(account.value);\n\n    return {\n      multiTokenPendingClaims,\n    };\n  };\n\n  const queryOptions = reactive({\n    enabled,\n    refetchOnMount: false,\n    refetchOnWindowFocus: false,\n    ...options,\n  });\n\n  return useQuery<UserClaimsQueryResponse>(\n    queryKey,\n    queryFn,\n    queryOptions as QueryOptions\n  );\n}\n","'use strict'\n\nvar messageIds = 0\n\nfunction onMessage (self, e) {\n  var message = e.data\n  if (!Array.isArray(message) || message.length < 2) {\n    // Ignore - this message is not for us.\n    return\n  }\n  var messageId = message[0]\n  var error = message[1]\n  var result = message[2]\n\n  var callback = self._callbacks[messageId]\n\n  if (!callback) {\n    // Ignore - user might have created multiple PromiseWorkers.\n    // This message is not for us.\n    return\n  }\n\n  delete self._callbacks[messageId]\n  callback(error, result)\n}\n\nfunction PromiseWorker (worker) {\n  var self = this\n  self._worker = worker\n  self._callbacks = {}\n\n  worker.addEventListener('message', function (e) {\n    onMessage(self, e)\n  })\n}\n\nPromiseWorker.prototype.postMessage = function (userMessage) {\n  var self = this\n  var messageId = messageIds++\n\n  var messageToSend = [messageId, userMessage]\n\n  return new Promise(function (resolve, reject) {\n    self._callbacks[messageId] = function (error, result) {\n      if (error) {\n        return reject(new Error(error.message))\n      }\n      resolve(result)\n    }\n\n    /* istanbul ignore if */\n    if (typeof self._worker.controller !== 'undefined') {\n      // service worker, use MessageChannels because e.source is broken in Chrome < 51:\n      // https://bugs.chromium.org/p/chromium/issues/detail?id=543198\n      var channel = new MessageChannel()\n      channel.port1.onmessage = function (e) {\n        onMessage(self, e)\n      }\n      self._worker.controller.postMessage(messageToSend, [channel.port2])\n    } else {\n      // web worker\n      self._worker.postMessage(messageToSend)\n    }\n  })\n}\n\nmodule.exports = PromiseWorker\n","import { times } from 'lodash';\nimport PromiseWorker from 'promise-worker';\n// @ts-ignore\nimport ClaimWorker from './claim.worker?worker';\n\nclass ClaimWorkerPoolService {\n  workers: PromiseWorker[];\n  workerIndex: number;\n\n  constructor(numberOfWorkers = 4) {\n    this.workers = times(\n      numberOfWorkers,\n      () => new PromiseWorker(new ClaimWorker())\n    );\n\n    this.workerIndex = 0;\n  }\n\n  public get worker() {\n    return this.workers[this.workerIndex++ % this.workers.length];\n  }\n}\n\nexport const claimWorkerPoolService = new ClaimWorkerPoolService(8);\n","import { getAddress } from '@ethersproject/address';\nimport { TransactionResponse } from '@ethersproject/providers';\nimport { WalletProvider } from '@/dependencies/wallets/Web3Provider';\n\nimport axios from 'axios';\nimport { ethers } from 'ethers';\nimport { chunk, flatten } from 'lodash';\n\nimport { networkId } from '@/composables/useNetwork';\nimport merkleOrchardAbi from '@/lib/abi/MerkleOrchard.json';\nimport { bnum } from '@/lib/utils';\nimport { multicall } from '@/lib/utils/balancer/contract';\nimport { ipfsService } from '@/services/ipfs/ipfs.service';\nimport { rpcProviderService } from '@/services/rpc-provider/rpc-provider.service';\n\nimport { configService } from '../config/config.service';\nimport { claimWorkerPoolService } from './claim-worker-pool.service';\nimport MerkleOrchardV1Config from './MerkleOrchardV1Config.json';\nimport MerkleOrchardV2Config from './MerkleOrchardV2Config.json';\nimport TokenDecimals from './TokenDecimals.json';\nimport {\n  ClaimProofTuple,\n  ClaimStatus,\n  ClaimWorkerMessage,\n  ComputeClaimProofPayload,\n  MultiTokenPendingClaims,\n  Report,\n  Snapshot,\n  TokenClaimInfo,\n} from './types';\nimport { TransactionBuilder } from '../web3/transactions/transaction.builder';\n\nexport enum MerkleOrchardVersion {\n  V1 = 'v1',\n  V2 = 'v2',\n}\n\nexport class ClaimService {\n  merkleOrchardConfig: any;\n  merkleOrchardAddress: string;\n\n  constructor(\n    public readonly merkleOrchardVersion: MerkleOrchardVersion = MerkleOrchardVersion.V1\n  ) {\n    switch (merkleOrchardVersion) {\n      case MerkleOrchardVersion.V1:\n        this.merkleOrchardConfig = MerkleOrchardV1Config;\n        this.merkleOrchardAddress =\n          configService.network.addresses.merkleOrchard;\n        break;\n      case MerkleOrchardVersion.V2:\n        if (!configService.network.addresses.merkleOrchardV2) {\n          throw new Error('Merkle Orchard V2 not deployed on this network');\n        }\n        this.merkleOrchardConfig = MerkleOrchardV2Config;\n        this.merkleOrchardAddress = configService.network.addresses\n          .merkleOrchardV2 as string;\n        break;\n      default:\n        throw new Error('Invalid Merkle Orchard version');\n    }\n  }\n\n  public async getMultiTokensPendingClaims(\n    account: string\n  ): Promise<MultiTokenPendingClaims[]> {\n    const tokenClaimsInfo = this.getTokenClaimsInfo();\n    if (tokenClaimsInfo != null) {\n      const multiTokenPendingClaims = await Promise.all(\n        tokenClaimsInfo.map(tokenClaimInfo =>\n          this.getTokenPendingClaims(tokenClaimInfo, account)\n        )\n      );\n\n      const multiTokenPendingClaimsWithRewards = multiTokenPendingClaims.filter(\n        pendingClaim => Number(pendingClaim.availableToClaim) > 0\n      );\n\n      return multiTokenPendingClaimsWithRewards;\n    }\n    return [];\n  }\n\n  public async getTokenPendingClaims(\n    tokenClaimInfo: TokenClaimInfo,\n    account: string\n  ): Promise<MultiTokenPendingClaims> {\n    const snapshot = await this.getSnapshot(tokenClaimInfo.manifest);\n    const weekStart = tokenClaimInfo.weekStart;\n    const claimStatus = await this.getClaimStatus(\n      Object.keys(snapshot).length,\n      account,\n      tokenClaimInfo\n    );\n\n    const pendingWeeks = claimStatus\n      .map((status, i) => [i + weekStart, status])\n      .filter(([, status]) => !status)\n      .map(([i]) => i) as number[];\n\n    const reports = await this.getReports(snapshot, pendingWeeks);\n\n    const claims = Object.entries(reports)\n      .filter((report: Report) => report[1][account])\n      .map((report: Report) => {\n        return {\n          id: report[0],\n          amount: report[1][account],\n        };\n      });\n\n    const availableToClaim = claims\n      .map(claim => parseFloat(claim.amount))\n      .reduce((total, amount) => total.plus(amount), bnum(0))\n      .toString();\n\n    return {\n      claims,\n      reports,\n      tokenClaimInfo,\n      availableToClaim,\n    };\n  }\n  public async multiTokenClaimRewards(\n    provider: WalletProvider,\n    account: string,\n    multiTokenPendingClaims: MultiTokenPendingClaims[]\n  ): Promise<TransactionResponse> {\n    try {\n      const tokens = multiTokenPendingClaims.map(\n        tokenPendingClaims => tokenPendingClaims.tokenClaimInfo.token\n      );\n\n      const multiTokenClaims = await Promise.all(\n        multiTokenPendingClaims.map((tokenPendingClaims, tokenIndex) =>\n          this.computeClaimProofs(tokenPendingClaims, account, tokenIndex)\n        )\n      );\n\n      const txBuilder = new TransactionBuilder(provider.getSigner());\n      return await txBuilder.contract.sendTransaction({\n        contractAddress: this.merkleOrchardAddress,\n        abi: merkleOrchardAbi,\n        action: 'claimDistributions',\n        params: [account, flatten(multiTokenClaims), tokens],\n      });\n    } catch (e) {\n      console.log('[Claim] Claim Rewards Error:', e);\n      return Promise.reject(e);\n    }\n  }\n\n  private async computeClaimProofs(\n    tokenPendingClaims: MultiTokenPendingClaims,\n    account: string,\n    tokenIndex: number\n  ): Promise<Promise<ClaimProofTuple[]>> {\n    return Promise.all(\n      tokenPendingClaims.claims.map(claim => {\n        const payload: ComputeClaimProofPayload = {\n          account,\n          distributor: tokenPendingClaims.tokenClaimInfo.distributor,\n          tokenIndex,\n          decimals: tokenPendingClaims.tokenClaimInfo.decimals,\n          // objects must be cloned\n          report: { ...tokenPendingClaims.reports[claim.id] },\n          claim: { ...claim },\n        };\n\n        return this.computeClaimProof(payload);\n      })\n    );\n  }\n\n  private computeClaimProof(\n    payload: ComputeClaimProofPayload\n  ): Promise<ClaimProofTuple> {\n    const message: ClaimWorkerMessage<ComputeClaimProofPayload> = {\n      type: 'computeClaimProof',\n      payload,\n    };\n\n    return claimWorkerPoolService.worker.postMessage<ClaimProofTuple>(message);\n  }\n\n  private getTokenClaimsInfo() {\n    const tokenClaims = this.merkleOrchardConfig[networkId.value];\n    const tokenDecimals = TokenDecimals[networkId.value];\n\n    if (tokenClaims != null) {\n      return (tokenClaims as TokenClaimInfo[]).map(tokenClaim => ({\n        ...tokenClaim,\n        token: getAddress(tokenClaim.token),\n        decimals:\n          tokenDecimals != null && tokenDecimals[tokenClaim.token]\n            ? tokenDecimals[tokenClaim.token]\n            : 18,\n      }));\n    }\n\n    return null;\n  }\n\n  private async getSnapshot(manifest: string) {\n    try {\n      const response = await axios.get<Snapshot>(manifest);\n      return response.data || {};\n    } catch (error) {\n      return {};\n    }\n  }\n\n  private async getClaimStatus(\n    totalWeeks: number,\n    account: string,\n    tokenClaimInfo: TokenClaimInfo\n  ): Promise<ClaimStatus[]> {\n    const { token, distributor, weekStart } = tokenClaimInfo;\n\n    const claimStatusCalls = Array.from({ length: totalWeeks }).map((_, i) => [\n      this.merkleOrchardAddress,\n      'isClaimed',\n      [token, distributor, weekStart + i, account],\n    ]);\n\n    const rootCalls = Array.from({ length: totalWeeks }).map((_, i) => [\n      this.merkleOrchardAddress,\n      'getDistributionRoot',\n      [token, distributor, weekStart + i],\n    ]);\n\n    try {\n      const result = (await multicall<boolean | string>(\n        String(networkId.value),\n        rpcProviderService.jsonProvider,\n        merkleOrchardAbi,\n        [...claimStatusCalls, ...rootCalls],\n        {},\n        true\n      )) as (boolean | string)[];\n\n      if (result.length > 0) {\n        const chunks = chunk(flatten(result), totalWeeks);\n\n        const claimedResult = chunks[0] as boolean[];\n        const distributionRootResult = chunks[1] as string[];\n\n        return claimedResult.filter(\n          (_, index) =>\n            distributionRootResult[index] !== ethers.constants.HashZero\n        );\n      }\n    } catch (e) {\n      console.log('[Claim] Claim Status Error:', e);\n    }\n\n    return [];\n  }\n\n  private async getReports(snapshot: Snapshot, weeks: number[]) {\n    const reports = await Promise.all<Report>(\n      weeks\n        .filter(week => snapshot[week] != null)\n        .map(week => ipfsService.get(snapshot[week]))\n    );\n    return Object.fromEntries(reports.map((report, i) => [weeks[i], report]));\n  }\n}\n","<script setup lang=\"ts\">\nimport { getAddress } from '@ethersproject/address';\nimport { computed, ref, watch } from 'vue';\nimport { useI18n } from 'vue-i18n';\n\nimport useUserClaimsQuery from '@/composables/queries/useUserClaimsQuery';\nimport useEthers from '@/composables/useEthers';\nimport useNumbers, { FNumFormats } from '@/composables/useNumbers';\nimport { useTokens } from '@/providers/tokens.provider';\nimport useTransactions from '@/composables/useTransactions';\nimport { TOKENS } from '@/constants/tokens';\nimport { bnum } from '@/lib/utils';\nimport {\n  ClaimService,\n  MerkleOrchardVersion,\n} from '@/services/claim/claim.service';\nimport useWeb3 from '@/services/web3/useWeb3';\nimport { TransactionError } from '@/types/transactions';\nimport { isQueryLoading } from '@/composables/queries/useQueryHelpers';\nimport { useErrorMsg } from '@/lib/utils/errors';\n\ntype Props = {\n  merkleOrchardVersion: MerkleOrchardVersion;\n};\n\ntype ClaimableToken = {\n  token: string;\n  symbol: string;\n  amount: string;\n  fiatValue: string;\n};\n\nenum Tabs {\n  CLAIMABLE = 'claimable',\n}\n\nconst props = defineProps<Props>();\n\nconst { t } = useI18n();\n\nconst claimService = new ClaimService(props.merkleOrchardVersion);\n\nconst tabs = [\n  { value: Tabs.CLAIMABLE, label: t('liquidityMiningPopover.tabs.claimable') },\n];\n\nconst activeTab = ref(tabs[0].value);\nconst isClaiming = ref(false);\nconst claimError = ref<TransactionError | null>(null);\n\n// COMPOSABLES\nconst userClaimsQuery = useUserClaimsQuery(claimService);\nconst { fNum } = useNumbers();\nconst { account, getProvider, isMismatchedNetwork } = useWeb3();\nconst { txListener } = useEthers();\nconst { addTransaction } = useTransactions();\nconst { priceFor, getToken } = useTokens();\nconst { formatErrorMsg } = useErrorMsg();\n\nconst BALTokenAddress = getAddress(TOKENS.Addresses.BAL);\n\n// COMPUTED\nconst BALTokenPlaceholder = computed<ClaimableToken>(() => ({\n  token: BALTokenAddress,\n  symbol: getToken(BALTokenAddress)?.symbol,\n  amount: '0',\n  fiatValue: '0',\n}));\n\nconst isLoading = computed((): boolean => isQueryLoading(userClaimsQuery));\n\nconst userClaims = computed(() =>\n  userClaimsQuery.isSuccess.value ? userClaimsQuery.data?.value : null\n);\n\nconst claimableTokens = computed<ClaimableToken[]>(() => {\n  if (\n    userClaims.value != null &&\n    userClaims.value.multiTokenPendingClaims.length > 0\n  ) {\n    return userClaims.value.multiTokenPendingClaims.map(\n      ({ availableToClaim, tokenClaimInfo }) => ({\n        token: tokenClaimInfo.token,\n        symbol: getToken(tokenClaimInfo.token)?.symbol,\n        amount: availableToClaim,\n        fiatValue: bnum(availableToClaim)\n          .times(priceFor(tokenClaimInfo.token))\n          .toString(),\n      })\n    );\n  }\n  return [BALTokenPlaceholder.value];\n});\n\nconst totalClaimableTokensFiatValue = computed(() =>\n  claimableTokens.value\n    .reduce((totalValue, { fiatValue }) => totalValue.plus(fiatValue), bnum(0))\n    .toString()\n);\n\nconst hasClaimableTokens = computed(() =>\n  claimableTokens.value.some(\n    claimableToken => Number(claimableToken.amount) > 0\n  )\n);\n\nwatch(isMismatchedNetwork, () => {\n  userClaimsQuery.refetch();\n});\n\n// METHODS\nasync function claimAvailableRewards() {\n  if (userClaims.value != null) {\n    isClaiming.value = true;\n    claimError.value = null;\n\n    try {\n      const tx = await claimService.multiTokenClaimRewards(\n        getProvider(),\n        account.value,\n        userClaims.value.multiTokenPendingClaims\n      );\n\n      const summary = claimableTokens.value\n        .map(\n          claimableToken =>\n            `${fNum(claimableToken.amount, {\n              minimumFractionDigits: 4,\n              maximumFractionDigits: 4,\n            })} ${claimableToken.symbol}`\n        )\n        .join(', ');\n\n      addTransaction({\n        id: tx.hash,\n        type: 'tx',\n        action: 'claim',\n        summary,\n      });\n\n      txListener(tx, {\n        onTxConfirmed: async () => {\n          isClaiming.value = false;\n          userClaimsQuery.refetch();\n        },\n        onTxFailed: () => {\n          isClaiming.value = false;\n        },\n      });\n    } catch (e) {\n      console.log(e);\n      claimError.value = formatErrorMsg(e);\n      isClaiming.value = false;\n    }\n  }\n}\n</script>\n\n<template>\n  <div class=\"mt-4 w-full sm:w-3/4 md:w-1/2\">\n    <BalCard noPad class=\"mb-4\">\n      <template #header>\n        <div\n          class=\"px-3 w-full bg-gray-50 dark:bg-gray-800 border-b dark:border-gray-900\"\n        >\n          <BalTabs\n            v-model=\"activeTab\"\n            :tabs=\"tabs\"\n            class=\"p-0 m-0 -mb-px whitespace-nowrap\"\n            noPad\n          />\n        </div>\n      </template>\n      <BalLoadingBlock v-if=\"isLoading\" class=\"h-24\" />\n      <template v-else-if=\"activeTab === Tabs.CLAIMABLE\">\n        <template\n          v-for=\"claimableToken in claimableTokens\"\n          :key=\"`token-${claimableToken.token}`\"\n        >\n          <div\n            class=\"flex items-center py-2 px-3 mb-2 last:border-0 border-b dark:border-gray-900\"\n          >\n            <BalAsset :address=\"claimableToken.token\" :size=\"36\" class=\"mr-3\" />\n            <div>\n              <div class=\"font-medium\">\n                {{ fNum(claimableToken.amount, FNumFormats.token) }}\n                {{ claimableToken.symbol }}\n              </div>\n              <div class=\"text-gray-400 font-sm\">\n                {{ fNum(claimableToken.fiatValue, FNumFormats.fiat) }}\n              </div>\n            </div>\n          </div>\n        </template>\n      </template>\n    </BalCard>\n    <BalBtn\n      color=\"gradient\"\n      size=\"md\"\n      block\n      class=\"mb-6\"\n      :loading=\"isClaiming\"\n      :loadingLabel=\"$t('claiming')\"\n      :disabled=\"!hasClaimableTokens\"\n      @click=\"claimAvailableRewards\"\n    >\n      {{ $t('claimAll') }}\n      <template v-if=\"hasClaimableTokens\">\n        ~{{ fNum(totalClaimableTokensFiatValue, FNumFormats.fiat) }}\n      </template>\n    </BalBtn>\n    <BalAlert\n      v-if=\"claimError != null\"\n      class=\"-mt-4 mb-6\"\n      type=\"error\"\n      size=\"md\"\n      :title=\"claimError.title\"\n      :description=\"claimError.description\"\n      block\n      actionLabel=\"Dismiss\"\n      @action-click=\"claimError = null\"\n    />\n  </div>\n</template>\n","<script lang=\"ts\" setup>\nimport HeroClaim from '@/components/contextual/pages/claim/HeroClaim.vue';\nimport LegacyClaims from '@/components/contextual/pages/claim/LegacyClaims.vue';\nimport { MerkleOrchardVersion } from '@/services/claim/claim.service';\nimport useWeb3 from '@/services/web3/useWeb3';\nimport {\n  isArbitrum,\n  isMainnet,\n  isGoerli,\n  isPolygon,\n} from '@/composables/useNetwork';\n\n/**\n * COMPOSABLES\n */\nconst { isWalletReady, account } = useWeb3();\n\n/**\n * COMPUTED\n */\nconst legacyClaimUI = computed(() => {\n  if (isMainnet.value) {\n    return [\n      { token: '$BAL', subdomain: 'claim' },\n      { token: '$VITA', subdomain: 'claim-vita' },\n      { token: '$LDO', subdomain: 'claim-lido' },\n    ];\n  } else if (isArbitrum.value) {\n    return [\n      { token: '$BAL', subdomain: 'claim-arbitrum' },\n      { token: '$MCDEX', subdomain: 'claim-mcdex' },\n      { token: '$PICKLE', subdomain: 'claim-pickle' },\n    ];\n  }\n\n  return [];\n});\n</script>\n\n<template>\n  <div>\n    <HeroClaim\n      :title=\"$t('claimHero.legacyTitle')\"\n      :description=\"$t('claimHero.legacyDescription')\"\n    />\n    <div class=\"xl:container py-12 xl:px-4 xl:mx-auto\">\n      <template v-if=\"isWalletReady\">\n        <div class=\"px-4 xl:px-0\">\n          <h2 :class=\"['font-body font-semibold text-2xl']\">\n            {{ $t('pages.claim.titles.legacyIncentives') }}\n          </h2>\n\n          <h3 class=\"mt-8 font-body text-lg font-semibold\">\n            Merkle Orchard V1\n          </h3>\n          <LegacyClaims\n            :merkleOrchardVersion=\"MerkleOrchardVersion.V1\"\n            class=\"mt-2\"\n          />\n\n          <h3 class=\"mt-8 font-body text-lg font-semibold\">\n            Merkle Orchard V2\n          </h3>\n          <LegacyClaims\n            :merkleOrchardVersion=\"MerkleOrchardVersion.V2\"\n            class=\"mt-2\"\n          />\n\n          <div class=\"mb-4\">\n            <div class=\"mb-2 font-semibold\">\n              Looking for other claimable tokens?\n            </div>\n            <ul class=\"pl-8 list-disc\">\n              <li v-if=\"legacyClaimUI.length > 0\" class=\"mt-2\">\n                Claim\n                <span class=\"inline-grid grid-flow-col gap-1\">\n                  <BalLink\n                    v-for=\"legacyClaim in legacyClaimUI\"\n                    :key=\"`token-${legacyClaim.token}`\"\n                    :href=\"`https://${legacyClaim.subdomain}.balancer.fi/#/${account}`\"\n                    external\n                    >{{ legacyClaim.token }}</BalLink\n                  >\n                </span>\n                from legacy liquidity mining contracts distributed before 20\n                Oct, 2021.\n              </li>\n              <li class=\"mt-2\">\n                Claim BAL on other networks\n                <template v-if=\"isArbitrum\">\n                  <BalLink\n                    href=\"https://app.balancer.fi/#/ethereum/claim/legacy\"\n                    external\n                  >\n                    Ethereum\n                  </BalLink>\n                  and\n                  <BalLink\n                    href=\"https://app.balancer.fi/#/polygon/claim/legacy\"\n                    external\n                  >\n                    Polygon </BalLink\n                  >.\n                </template>\n                <template v-else-if=\"isPolygon\">\n                  <BalLink\n                    href=\"https://app.balancer.fi/#/ethereum/claim/legacy\"\n                    external\n                  >\n                    Ethereum\n                  </BalLink>\n                  and\n                  <BalLink\n                    href=\"https://app.balancer.fi/#/arbitrum/claim/legacy\"\n                    external\n                  >\n                    Arbitrum </BalLink\n                  >.\n                </template>\n                <template v-else-if=\"isMainnet || isGoerli\">\n                  <BalLink\n                    href=\"https://app.balancer.fi/#/polygon/claim/legacy\"\n                    external\n                  >\n                    Polygon\n                  </BalLink>\n                  and\n                  <BalLink\n                    href=\"https://app.balancer.fi/#/arbitrum/claim/legacy\"\n                    external\n                  >\n                    Arbitrum </BalLink\n                  >.\n                </template>\n              </li>\n            </ul>\n          </div>\n        </div>\n      </template>\n    </div>\n  </div>\n</template>\n"],"names":["useUserClaimsQuery","claimService","options","account","isWalletReady","useWeb3","networkId","useNetwork","queryKey","reactive","QUERY_KEYS","enabled","computed","queryFn","queryOptions","useQuery","messageIds","onMessage","self","message","messageId","error","result","callback","PromiseWorker","worker","e","userMessage","messageToSend","resolve","reject","channel","promiseWorker","ClaimWorkerPoolService","numberOfWorkers","__publicField","times","ClaimWorker","claimWorkerPoolService","MerkleOrchardVersion","ClaimService","merkleOrchardVersion","MerkleOrchardV1Config","configService","MerkleOrchardV2Config","tokenClaimsInfo","tokenClaimInfo","pendingClaim","snapshot","weekStart","pendingWeeks","status","i","reports","claims","report","availableToClaim","claim","total","amount","bnum","provider","multiTokenPendingClaims","tokens","tokenPendingClaims","multiTokenClaims","tokenIndex","TransactionBuilder","merkleOrchardAbi","flatten","payload","tokenClaims","tokenDecimals","TokenDecimals","tokenClaim","getAddress","manifest","axios","totalWeeks","token","distributor","claimStatusCalls","_","rootCalls","multicall","rpcProviderService","chunks","chunk","claimedResult","distributionRootResult","index","ethers.constants.HashZero","weeks","week","ipfsService","useI18n","props","tabs","activeTab","ref","isClaiming","claimError","userClaimsQuery","fNum","useNumbers","getProvider","isMismatchedNetwork","txListener","useEthers","addTransaction","useTransactions","priceFor","getToken","useTokens","formatErrorMsg","useErrorMsg","BALTokenAddress","TOKENS","BALTokenPlaceholder","_a","isLoading","isQueryLoading","userClaims","claimableTokens","totalClaimableTokensFiatValue","totalValue","fiatValue","hasClaimableTokens","claimableToken","watch","claimAvailableRewards","tx","summary","legacyClaimUI","isMainnet","isArbitrum"],"mappings":"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"}