{"version":3,"file":"balancer-api.service-037872f8.js","sources":["../../src/services/balancer/api/entities/pools/query.ts","../../src/services/balancer/api/entities/pool/query.ts","../../src/services/balancer/api/entities/pool/index.ts","../../src/services/balancer/api/entities/pools/index.ts","../../src/services/balancer/api/balancer-api.service.ts"],"sourcesContent":["import { GraphQLArgs } from '@balancer-labs/sdk';\nimport { POOLS } from '@/constants/pools';\nimport { merge } from 'lodash';\n\nconst defaultArgs: GraphQLArgs = {\n  first: 1000,\n  orderBy: 'totalLiquidity',\n  orderDirection: 'desc',\n  where: {\n    totalShares: {\n      gt: 0.00001,\n    },\n    id: {\n      not_in: POOLS.BlockList,\n    },\n  },\n};\n\nconst tokenAttrs = {\n  address: true,\n  balance: true,\n  weight: true,\n  priceRate: true,\n  symbol: true,\n  decimals: true,\n};\n\nconst poolAttrs = {\n  id: true,\n  totalShares: true,\n  address: true,\n  poolType: true,\n  mainIndex: true,\n};\n\n// Nested token tree attributes, 3 levels deep.\nconst tokenTreeAttrs = {\n  ...tokenAttrs,\n  token: {\n    latestUSDPrice: true,\n    pool: {\n      ...poolAttrs,\n      tokens: {\n        ...tokenAttrs,\n        token: {\n          latestUSDPrice: true,\n          pool: {\n            ...poolAttrs,\n            tokens: {\n              ...tokenAttrs,\n              token: {\n                latestUSDPrice: true,\n                pool: {\n                  ...poolAttrs,\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n};\n\nconst priceRateProviderAttrs = {\n  address: true,\n  token: {\n    address: true,\n  },\n};\n\nexport const defaultAttrs = {\n  pools: {\n    id: true,\n    address: true,\n    poolType: true,\n    poolTypeVersion: true,\n    swapFee: true,\n    tokensList: true,\n    totalLiquidity: true,\n    totalSwapVolume: true,\n    totalSwapFee: true,\n    totalShares: true,\n    volumeSnapshot: true,\n    feesSnapshot: true,\n    owner: true,\n    factory: true,\n    amp: true,\n    createTime: true,\n    swapEnabled: true,\n    symbol: true,\n    name: true,\n    protocolYieldFeeCache: true,\n    priceRateProviders: priceRateProviderAttrs,\n    tokens: tokenTreeAttrs,\n    isNew: true,\n    isInRecoveryMode: true,\n    isPaused: true,\n    apr: {\n      stakingApr: {\n        min: true,\n        max: true,\n      },\n      swapFees: true,\n      tokenAprs: {\n        total: true,\n        breakdown: true,\n      },\n      rewardAprs: {\n        total: true,\n        breakdown: true,\n      },\n      protocolApr: true,\n      min: true,\n      max: true,\n    },\n  },\n};\n\nexport default (args = {}, attrs = {}) => ({\n  args: merge({}, defaultArgs, args),\n  attrs: merge({}, defaultAttrs, attrs),\n});\n","import { GraphQLArgs } from '@balancer-labs/sdk';\nimport { merge } from 'lodash';\n\nconst defaultArgs: GraphQLArgs = {\n  where: {},\n};\n\nimport { defaultAttrs } from '../pools/query';\n\nexport default (args = {}, attrs = {}) => ({\n  args: merge({}, defaultArgs, args),\n  attrs: merge({}, defaultAttrs, attrs),\n});\n","import { configService } from '@/services/config/config.service';\nimport { Pool } from '@/services/pool/types';\nimport { PoolsQueryBuilder } from '@/types/subgraph';\nimport { GraphQLArgs, GraphQLQuery } from '@balancer-labs/sdk';\nimport axios from 'axios';\n\nimport Service from '../../balancer-api.service';\nimport queryBuilder from './query';\n\nexport default class SinglePool {\n  service: Service;\n  queryBuilder: PoolsQueryBuilder;\n  lastQuery?: GraphQLQuery;\n\n  constructor(\n    service: Service,\n    _queryBuilder: PoolsQueryBuilder = queryBuilder\n  ) {\n    this.service = service;\n    this.queryBuilder = _queryBuilder;\n  }\n\n  public async get(\n    args: GraphQLArgs = {},\n    attrs: any = {}\n  ): Promise<Pool | undefined> {\n    const query = this.queryBuilder(args, attrs);\n    if (!query.args.chainId) {\n      throw new Error('Invalid query - missing chainId');\n    }\n    if (!query.args.where?.id?.eq) {\n      throw new Error('Invalid query - missing pool id');\n    }\n\n    const chainId: number = query.args.chainId;\n    const poolId: string = query.args.where.id.eq;\n    const url = `${configService.network.balancerApi}/pools/${chainId}/${poolId}`;\n\n    const { data } = await axios.get(url);\n    return data;\n  }\n}\n","import { configService } from '@/services/config/config.service';\nimport { Pool } from '@/services/pool/types';\nimport { PoolsQueryBuilder } from '@/types/subgraph';\nimport {\n  GraphQLArgs,\n  GraphQLQuery,\n  PoolsBalancerAPIRepository,\n} from '@balancer-labs/sdk';\nimport _ from 'lodash';\n\nimport Service from '../../balancer-api.service';\nimport queryBuilder from './query';\n\nexport default class Pools {\n  service: Service;\n  queryBuilder: PoolsQueryBuilder;\n  lastQuery?: GraphQLQuery;\n  repository?: PoolsBalancerAPIRepository;\n\n  constructor(\n    service: Service,\n    _queryBuilder: PoolsQueryBuilder = queryBuilder\n  ) {\n    this.service = service;\n    this.queryBuilder = _queryBuilder;\n  }\n\n  public async get(args: GraphQLArgs = {}, attrs: any = {}): Promise<Pool[]> {\n    const query = this.queryBuilder(args, attrs);\n    const skip = query.args.skip;\n    const first = query.args.first;\n    delete query.args.skip; // not allowed for Balancer API\n    delete query.args.first;\n\n    /* Some temporary hacks to make the API work with an empty in array (it should return no data)\n     *   and if not_in is also set then delete it (because it's set by default) */\n    if (query.args.where?.id?.in) {\n      if (query.args.where?.id?.in.length === 0) {\n        return [];\n      }\n      if (query.args.where?.id?.not_in) {\n        delete query.args.where?.id.not_in;\n      }\n    }\n\n    if (!this.repository || !_.isEqual(query, this.lastQuery)) {\n      this.lastQuery = _.cloneDeep(query);\n      const graphQLUrl = `${configService.network.balancerApi}/graphql`;\n      this.repository = new PoolsBalancerAPIRepository({\n        url: graphQLUrl,\n        apiKey: configService.network.keys.balancerApi || '',\n        query: query,\n      });\n    }\n\n    const pools = await this.repository.fetch({\n      first,\n      skip,\n    });\n\n    return pools as Pool[];\n  }\n\n  get skip(): number {\n    return this.repository ? this.repository.skip : 0;\n  }\n}\n","import SinglePool from './entities/pool';\nimport Pools from './entities/pools';\n\nexport default class BalancerAPIService {\n  pool: SinglePool;\n  pools: Pools;\n\n  constructor() {\n    // Init entities\n    this.pool = new SinglePool(this);\n    this.pools = new Pools(this);\n  }\n}\n\nexport const balancerAPIService = new BalancerAPIService();\n"],"names":["defaultArgs","POOLS","tokenAttrs","poolAttrs","tokenTreeAttrs","priceRateProviderAttrs","defaultAttrs","queryBuilder$1","args","attrs","merge","queryBuilder","SinglePool","service","_queryBuilder","__publicField","query","_b","_a","chainId","poolId","url","configService","data","axios","Pools","skip","first","_d","_c","_f","_e","_g","_","graphQLUrl","PoolsBalancerAPIRepository","BalancerAPIService","balancerAPIService"],"mappings":"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"}