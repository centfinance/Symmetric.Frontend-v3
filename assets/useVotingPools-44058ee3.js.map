{"version":3,"file":"useVotingPools-44058ee3.js","sources":["../../node_modules/date-fns/esm/add/index.js","../../node_modules/date-fns/esm/constants/index.js","../../node_modules/date-fns/esm/differenceInCalendarYears/index.js","../../node_modules/date-fns/esm/differenceInHours/index.js","../../node_modules/date-fns/esm/differenceInMinutes/index.js","../../node_modules/date-fns/esm/differenceInYears/index.js","../../node_modules/date-fns/esm/getDay/index.js","../../node_modules/date-fns/esm/intervalToDuration/index.js","../../node_modules/date-fns/esm/nextDay/index.js","../../node_modules/date-fns/esm/nextThursday/index.js","../../src/services/balancer/gauges/gauge-controller.decorator.ts","../../src/components/contextual/pages/vebal/LMVoting/testnet-voting-pools.ts","../../src/services/api/graphql/mappers.ts","../../src/composables/queries/useVotingPoolsQuery.ts","../../src/composables/useVotingPools.ts"],"sourcesContent":["function _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nimport addDays from \"../addDays/index.js\";\nimport addMonths from \"../addMonths/index.js\";\nimport toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\nimport toInteger from \"../_lib/toInteger/index.js\";\n\n/**\n * @name add\n * @category Common Helpers\n * @summary Add the specified years, months, weeks, days, hours, minutes and seconds to the given date.\n *\n * @description\n * Add the specified years, months, weeks, days, hours, minutes and seconds to the given date.\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Duration} duration - the object with years, months, weeks, days, hours, minutes and seconds to be added. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.\n *\n * | Key            | Description                        |\n * |----------------|------------------------------------|\n * | years          | Amount of years to be added        |\n * | months         | Amount of months to be added       |\n * | weeks          | Amount of weeks to be added        |\n * | days           | Amount of days to be added         |\n * | hours          | Amount of hours to be added        |\n * | minutes        | Amount of minutes to be added      |\n * | seconds        | Amount of seconds to be added      |\n *\n * All values default to 0\n *\n * @returns {Date} the new date with the seconds added\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Add the following duration to 1 September 2014, 10:19:50\n * const result = add(new Date(2014, 8, 1, 10, 19, 50), {\n *   years: 2,\n *   months: 9,\n *   weeks: 1,\n *   days: 7,\n *   hours: 5,\n *   minutes: 9,\n *   seconds: 30,\n * })\n * //=> Thu Jun 15 2017 15:29:20\n */\nexport default function add(dirtyDate, duration) {\n  requiredArgs(2, arguments);\n  if (!duration || _typeof(duration) !== 'object') return new Date(NaN);\n  var years = duration.years ? toInteger(duration.years) : 0;\n  var months = duration.months ? toInteger(duration.months) : 0;\n  var weeks = duration.weeks ? toInteger(duration.weeks) : 0;\n  var days = duration.days ? toInteger(duration.days) : 0;\n  var hours = duration.hours ? toInteger(duration.hours) : 0;\n  var minutes = duration.minutes ? toInteger(duration.minutes) : 0;\n  var seconds = duration.seconds ? toInteger(duration.seconds) : 0; // Add years and months\n\n  var date = toDate(dirtyDate);\n  var dateWithMonths = months || years ? addMonths(date, months + years * 12) : date; // Add weeks and days\n\n  var dateWithDays = days || weeks ? addDays(dateWithMonths, days + weeks * 7) : dateWithMonths; // Add days, hours, minutes and seconds\n\n  var minutesToAdd = minutes + hours * 60;\n  var secondsToAdd = seconds + minutesToAdd * 60;\n  var msToAdd = secondsToAdd * 1000;\n  var finalDate = new Date(dateWithDays.getTime() + msToAdd);\n  return finalDate;\n}","/**\n * Days in 1 week.\n *\n * @name daysInWeek\n * @constant\n * @type {number}\n * @default\n */\nexport var daysInWeek = 7;\n/**\n * Days in 1 year\n * One years equals 365.2425 days according to the formula:\n *\n * > Leap year occures every 4 years, except for years that are divisable by 100 and not divisable by 400.\n * > 1 mean year = (365+1/4-1/100+1/400) days = 365.2425 days\n *\n * @name daysInYear\n * @constant\n * @type {number}\n * @default\n */\n\nexport var daysInYear = 365.2425;\n/**\n * Maximum allowed time.\n *\n * @name maxTime\n * @constant\n * @type {number}\n * @default\n */\n\nexport var maxTime = Math.pow(10, 8) * 24 * 60 * 60 * 1000;\n/**\n * Milliseconds in 1 minute\n *\n * @name millisecondsInMinute\n * @constant\n * @type {number}\n * @default\n */\n\nexport var millisecondsInMinute = 60000;\n/**\n * Milliseconds in 1 hour\n *\n * @name millisecondsInHour\n * @constant\n * @type {number}\n * @default\n */\n\nexport var millisecondsInHour = 3600000;\n/**\n * Milliseconds in 1 second\n *\n * @name millisecondsInSecond\n * @constant\n * @type {number}\n * @default\n */\n\nexport var millisecondsInSecond = 1000;\n/**\n * Minimum allowed time.\n *\n * @name minTime\n * @constant\n * @type {number}\n * @default\n */\n\nexport var minTime = -maxTime;\n/**\n * Minutes in 1 hour\n *\n * @name minutesInHour\n * @constant\n * @type {number}\n * @default\n */\n\nexport var minutesInHour = 60;\n/**\n * Months in 1 quarter\n *\n * @name monthsInQuarter\n * @constant\n * @type {number}\n * @default\n */\n\nexport var monthsInQuarter = 3;\n/**\n * Months in 1 year\n *\n * @name monthsInYear\n * @constant\n * @type {number}\n * @default\n */\n\nexport var monthsInYear = 12;\n/**\n * Quarters in 1 year\n *\n * @name quartersInYear\n * @constant\n * @type {number}\n * @default\n */\n\nexport var quartersInYear = 4;\n/**\n * Seconds in 1 hour\n *\n * @name secondsInHour\n * @constant\n * @type {number}\n * @default\n */\n\nexport var secondsInHour = 3600;\n/**\n * Seconds in 1 minute\n *\n * @name secondsInMinute\n * @constant\n * @type {number}\n * @default\n */\n\nexport var secondsInMinute = 60;\n/**\n * Seconds in 1 day\n *\n * @name secondsInDay\n * @constant\n * @type {number}\n * @default\n */\n\nexport var secondsInDay = secondsInHour * 24;\n/**\n * Seconds in 1 week\n *\n * @name secondsInWeek\n * @constant\n * @type {number}\n * @default\n */\n\nexport var secondsInWeek = secondsInDay * 7;\n/**\n * Seconds in 1 year\n *\n * @name secondsInYear\n * @constant\n * @type {number}\n * @default\n */\n\nexport var secondsInYear = secondsInDay * daysInYear;\n/**\n * Seconds in 1 month\n *\n * @name secondsInMonth\n * @constant\n * @type {number}\n * @default\n */\n\nexport var secondsInMonth = secondsInYear / 12;\n/**\n * Seconds in 1 quarter\n *\n * @name secondsInQuarter\n * @constant\n * @type {number}\n * @default\n */\n\nexport var secondsInQuarter = secondsInMonth * 3;","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name differenceInCalendarYears\n * @category Year Helpers\n * @summary Get the number of calendar years between the given dates.\n *\n * @description\n * Get the number of calendar years between the given dates.\n *\n * @param {Date|Number} dateLeft - the later date\n * @param {Date|Number} dateRight - the earlier date\n * @returns {Number} the number of calendar years\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // How many calendar years are between 31 December 2013 and 11 February 2015?\n * const result = differenceInCalendarYears(\n *   new Date(2015, 1, 11),\n *   new Date(2013, 11, 31)\n * )\n * //=> 2\n */\n\nexport default function differenceInCalendarYears(dirtyDateLeft, dirtyDateRight) {\n  requiredArgs(2, arguments);\n  var dateLeft = toDate(dirtyDateLeft);\n  var dateRight = toDate(dirtyDateRight);\n  return dateLeft.getFullYear() - dateRight.getFullYear();\n}","import { millisecondsInHour } from \"../constants/index.js\";\nimport differenceInMilliseconds from \"../differenceInMilliseconds/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\nimport { getRoundingMethod } from \"../_lib/roundingMethods/index.js\";\n/**\n * @name differenceInHours\n * @category Hour Helpers\n * @summary Get the number of hours between the given dates.\n *\n * @description\n * Get the number of hours between the given dates.\n *\n * @param {Date|Number} dateLeft - the later date\n * @param {Date|Number} dateRight - the earlier date\n * @param {Object} [options] - an object with options.\n * @param {String} [options.roundingMethod='trunc'] - a rounding method (`ceil`, `floor`, `round` or `trunc`)\n * @returns {Number} the number of hours\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // How many hours are between 2 July 2014 06:50:00 and 2 July 2014 19:00:00?\n * const result = differenceInHours(\n *   new Date(2014, 6, 2, 19, 0),\n *   new Date(2014, 6, 2, 6, 50)\n * )\n * //=> 12\n */\n\nexport default function differenceInHours(dateLeft, dateRight, options) {\n  requiredArgs(2, arguments);\n  var diff = differenceInMilliseconds(dateLeft, dateRight) / millisecondsInHour;\n  return getRoundingMethod(options === null || options === void 0 ? void 0 : options.roundingMethod)(diff);\n}","import { millisecondsInMinute } from \"../constants/index.js\";\nimport differenceInMilliseconds from \"../differenceInMilliseconds/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\nimport { getRoundingMethod } from \"../_lib/roundingMethods/index.js\";\n/**\n * @name differenceInMinutes\n * @category Minute Helpers\n * @summary Get the number of minutes between the given dates.\n *\n * @description\n * Get the signed number of full (rounded towards 0) minutes between the given dates.\n *\n * @param {Date|Number} dateLeft - the later date\n * @param {Date|Number} dateRight - the earlier date\n * @param {Object} [options] - an object with options.\n * @param {String} [options.roundingMethod='trunc'] - a rounding method (`ceil`, `floor`, `round` or `trunc`)\n * @returns {Number} the number of minutes\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // How many minutes are between 2 July 2014 12:07:59 and 2 July 2014 12:20:00?\n * const result = differenceInMinutes(\n *   new Date(2014, 6, 2, 12, 20, 0),\n *   new Date(2014, 6, 2, 12, 7, 59)\n * )\n * //=> 12\n *\n * @example\n * // How many minutes are between 10:01:59 and 10:00:00\n * const result = differenceInMinutes(\n *   new Date(2000, 0, 1, 10, 0, 0),\n *   new Date(2000, 0, 1, 10, 1, 59)\n * )\n * //=> -1\n */\n\nexport default function differenceInMinutes(dateLeft, dateRight, options) {\n  requiredArgs(2, arguments);\n  var diff = differenceInMilliseconds(dateLeft, dateRight) / millisecondsInMinute;\n  return getRoundingMethod(options === null || options === void 0 ? void 0 : options.roundingMethod)(diff);\n}","import toDate from \"../toDate/index.js\";\nimport differenceInCalendarYears from \"../differenceInCalendarYears/index.js\";\nimport compareAsc from \"../compareAsc/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name differenceInYears\n * @category Year Helpers\n * @summary Get the number of full years between the given dates.\n *\n * @description\n * Get the number of full years between the given dates.\n *\n * @param {Date|Number} dateLeft - the later date\n * @param {Date|Number} dateRight - the earlier date\n * @returns {Number} the number of full years\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // How many full years are between 31 December 2013 and 11 February 2015?\n * const result = differenceInYears(new Date(2015, 1, 11), new Date(2013, 11, 31))\n * //=> 1\n */\n\nexport default function differenceInYears(dirtyDateLeft, dirtyDateRight) {\n  requiredArgs(2, arguments);\n  var dateLeft = toDate(dirtyDateLeft);\n  var dateRight = toDate(dirtyDateRight);\n  var sign = compareAsc(dateLeft, dateRight);\n  var difference = Math.abs(differenceInCalendarYears(dateLeft, dateRight)); // Set both dates to a valid leap year for accurate comparison when dealing\n  // with leap days\n\n  dateLeft.setFullYear(1584);\n  dateRight.setFullYear(1584); // Math.abs(diff in full years - diff in calendar years) === 1 if last calendar year is not full\n  // If so, result must be decreased by 1 in absolute value\n\n  var isLastYearNotFull = compareAsc(dateLeft, dateRight) === -sign;\n  var result = sign * (difference - Number(isLastYearNotFull)); // Prevent negative zero\n\n  return result === 0 ? 0 : result;\n}","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name getDay\n * @category Weekday Helpers\n * @summary Get the day of the week of the given date.\n *\n * @description\n * Get the day of the week of the given date.\n *\n * @param {Date|Number} date - the given date\n * @returns {0|1|2|3|4|5|6} the day of week, 0 represents Sunday\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // Which day of the week is 29 February 2012?\n * const result = getDay(new Date(2012, 1, 29))\n * //=> 3\n */\n\nexport default function getDay(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  var day = date.getDay();\n  return day;\n}","import compareAsc from \"../compareAsc/index.js\";\nimport add from \"../add/index.js\";\nimport differenceInDays from \"../differenceInDays/index.js\";\nimport differenceInHours from \"../differenceInHours/index.js\";\nimport differenceInMinutes from \"../differenceInMinutes/index.js\";\nimport differenceInMonths from \"../differenceInMonths/index.js\";\nimport differenceInSeconds from \"../differenceInSeconds/index.js\";\nimport differenceInYears from \"../differenceInYears/index.js\";\nimport toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name intervalToDuration\n * @category Common Helpers\n * @summary Convert interval to duration\n *\n * @description\n * Convert a interval object to a duration object.\n *\n * @param {Interval} interval - the interval to convert to duration\n *\n * @returns {Duration} The duration Object\n * @throws {TypeError} Requires 2 arguments\n * @throws {RangeError} `start` must not be Invalid Date\n * @throws {RangeError} `end` must not be Invalid Date\n *\n * @example\n * // Get the duration between January 15, 1929 and April 4, 1968.\n * intervalToDuration({\n *   start: new Date(1929, 0, 15, 12, 0, 0),\n *   end: new Date(1968, 3, 4, 19, 5, 0)\n * })\n * // => { years: 39, months: 2, days: 20, hours: 7, minutes: 5, seconds: 0 }\n */\n\nexport default function intervalToDuration(interval) {\n  requiredArgs(1, arguments);\n  var start = toDate(interval.start);\n  var end = toDate(interval.end);\n  if (isNaN(start.getTime())) throw new RangeError('Start Date is invalid');\n  if (isNaN(end.getTime())) throw new RangeError('End Date is invalid');\n  var duration = {};\n  duration.years = Math.abs(differenceInYears(end, start));\n  var sign = compareAsc(end, start);\n  var remainingMonths = add(start, {\n    years: sign * duration.years\n  });\n  duration.months = Math.abs(differenceInMonths(end, remainingMonths));\n  var remainingDays = add(remainingMonths, {\n    months: sign * duration.months\n  });\n  duration.days = Math.abs(differenceInDays(end, remainingDays));\n  var remainingHours = add(remainingDays, {\n    days: sign * duration.days\n  });\n  duration.hours = Math.abs(differenceInHours(end, remainingHours));\n  var remainingMinutes = add(remainingHours, {\n    hours: sign * duration.hours\n  });\n  duration.minutes = Math.abs(differenceInMinutes(end, remainingMinutes));\n  var remainingSeconds = add(remainingMinutes, {\n    minutes: sign * duration.minutes\n  });\n  duration.seconds = Math.abs(differenceInSeconds(end, remainingSeconds));\n  return duration;\n}","import addDays from \"../addDays/index.js\";\nimport getDay from \"../getDay/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name nextDay\n * @category Weekday Helpers\n * @summary When is the next day of the week?\n *\n * @description\n * When is the next day of the week? 0-6 the day of the week, 0 represents Sunday.\n *\n * @param {Date | number} date - the date to check\n * @param {Day} day - day of the week\n * @returns {Date} - the date is the next day of week\n * @throws {TypeError} - 2 arguments required\n *\n * @example\n * // When is the next Monday after Mar, 20, 2020?\n * const result = nextDay(new Date(2020, 2, 20), 1)\n * //=> Mon Mar 23 2020 00:00:00\n *\n * @example\n * // When is the next Tuesday after Mar, 21, 2020?\n * const result = nextDay(new Date(2020, 2, 21), 2)\n * //=> Tue Mar 24 2020 00:00:00\n */\n\nexport default function nextDay(date, day) {\n  requiredArgs(2, arguments);\n  var delta = day - getDay(date);\n  if (delta <= 0) delta += 7;\n  return addDays(date, delta);\n}","import nextDay from \"../nextDay/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name nextThursday\n * @category Weekday Helpers\n * @summary When is the next Thursday?\n *\n * @description\n * When is the next Thursday?\n *\n * @param {Date | number} date - the date to start counting from\n * @returns {Date} the next Thursday\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // When is the next Thursday after Mar, 22, 2020?\n * const result = nextThursday(new Date(2020, 2, 22))\n * //=> Thur Mar 26 2020 00:00:00\n */\n\nexport default function nextThursday(date) {\n  requiredArgs(1, arguments);\n  return nextDay(date, 4);\n}","import { BigNumber } from '@ethersproject/bignumber';\nimport { JsonRpcProvider } from '@ethersproject/providers';\n\nimport {\n  oneWeekInMs,\n  oneWeekInSecs,\n  toUnixTimestamp,\n} from '@/composables/useTime';\nimport GaugeControllerAbi from '@/lib/abi/GaugeController.json';\nimport { configService } from '@/services/config/config.service';\nimport { rpcProviderService } from '@/services/rpc-provider/rpc-provider.service';\nimport { getOldMulticaller } from '@/dependencies/OldMulticaller';\n// eslint-disable-next-line no-restricted-imports\nimport { Multicaller } from '@/lib/utils/balancer/contract';\nimport { networkId, isTestnet } from '@/composables/useNetwork';\nimport { Network } from '@/lib/config/types';\nimport {\n  ApiVotingPools,\n  ApiVotingGauge,\n} from '@/composables/queries/useVotingPoolsQuery';\n\nconst FIRST_WEEK_TIMESTAMP = 1648684800;\n\nexport interface UserVotesData {\n  end: BigNumber;\n  power: BigNumber;\n  slope: BigNumber;\n}\n\nexport interface Point {\n  bias: BigNumber;\n  slope: BigNumber;\n}\n\nexport interface RawVotesData {\n  gaugeWeightThisPeriod: BigNumber;\n  gaugeWeightNextPeriod: BigNumber;\n  userVotes: UserVotesData;\n  lastUserVoteTime: BigNumber;\n}\n\nexport interface VotesData {\n  votes: string;\n  votesNextPeriod: string;\n  userVotes: string;\n  lastUserVoteTime: number;\n}\n\nexport interface RawVotesDataMap {\n  gauges: Record<string, RawVotesData>;\n}\n\nexport type ApiVotingPool = ApiVotingPools[number];\nexport type VotingPoolWithVotes = ApiVotingPool & VotesData;\n\nexport class GaugeControllerDecorator {\n  multicaller: Multicaller;\n  network: Network;\n  provider: JsonRpcProvider;\n\n  constructor(\n    private readonly abi = GaugeControllerAbi,\n    private readonly config = configService\n  ) {\n    this.network = this.getNetwork();\n    this.provider = rpcProviderService.getJsonProvider(this.network);\n    this.multicaller = this.resetMulticaller();\n  }\n\n  /**\n   * @summary Decorate subgraph voting pool schema with onchain data using multicalls.\n   */\n  async decorateWithVotes(\n    votingPools: ApiVotingPools,\n    userAddress: string\n  ): Promise<VotingPoolWithVotes[]> {\n    const votingGauges = votingPools.map(pool => pool.gauge);\n    this.multicaller = this.resetMulticaller();\n    this.callGaugeWeightThisPeriod(votingGauges);\n    this.callGaugeWeightNextPeriod(votingGauges);\n    if (userAddress) {\n      this.callUserGaugeVotes(votingGauges, userAddress);\n      this.callUserGaugeVoteTime(votingGauges, userAddress);\n    }\n\n    const votesDataMap = await this.multicaller.execute<RawVotesDataMap>();\n\n    const decoratedVotingPools = votingPools.map(pool => {\n      return {\n        ...pool,\n        ...this.formatVotes(votesDataMap.gauges[pool.gauge.address]),\n      };\n    });\n    return decoratedVotingPools;\n  }\n\n  private formatVotes(votesData: RawVotesData): VotesData {\n    const votes = votesData.gaugeWeightThisPeriod.toString();\n    const votesNextPeriod = votesData.gaugeWeightNextPeriod.toString();\n\n    return {\n      votes,\n      votesNextPeriod,\n      userVotes: votesData?.userVotes?.power.toString() || '0',\n      lastUserVoteTime: votesData?.lastUserVoteTime?.toNumber() || 0,\n    };\n  }\n\n  /**\n   * @summary Fetch total points allocated towards each gauge for this period\n   */\n  private callGaugeWeightThisPeriod(votingGauges: ApiVotingGauge[]) {\n    let thisWeekTimestamp = toUnixTimestamp(\n      Math.floor(Date.now() / oneWeekInMs) * oneWeekInMs\n    );\n    // this makes sure we don't compute votes from before Mar31 in the \"This period\" entry,\n    // since the system is not fully active between Mar31 and Apr6\n    // (ie the first period starts on Apr7)\n    if (thisWeekTimestamp == FIRST_WEEK_TIMESTAMP) {\n      thisWeekTimestamp = thisWeekTimestamp - oneWeekInSecs;\n    }\n    votingGauges.forEach(gauge => {\n      this.multicaller.call(\n        `gauges.${gauge.address}.gaugeWeightThisPeriod`,\n        this.config.network.addresses.gaugeController,\n        'gauge_relative_weight_write',\n        [gauge.address, thisWeekTimestamp]\n      );\n    });\n  }\n\n  /**\n   * @summary Fetch total points allocated towards each gauge for next period (+1 week)\n   */\n  private callGaugeWeightNextPeriod(votingGauges: ApiVotingGauge[]) {\n    const nextWeekTimestamp = toUnixTimestamp(\n      Math.floor((Date.now() + oneWeekInMs) / oneWeekInMs) * oneWeekInMs\n    );\n    votingGauges.forEach(gauge => {\n      this.multicaller.call(\n        `gauges.${gauge.address}.gaugeWeightNextPeriod`,\n        this.config.network.addresses.gaugeController,\n        'gauge_relative_weight_write',\n        [gauge.address, nextWeekTimestamp]\n      );\n    });\n  }\n\n  /**\n   * @summary Fetch user's vote weight for each gauge\n   */\n  private callUserGaugeVotes(\n    votingGauges: ApiVotingGauge[],\n    userAddress: string\n  ) {\n    votingGauges.forEach(gauge => {\n      this.multicaller.call(\n        `gauges.${gauge.address}.userVotes`,\n        this.config.network.addresses.gaugeController,\n        'vote_user_slopes',\n        [userAddress, gauge.address]\n      );\n    });\n  }\n\n  /**\n   * @summary Fetch user's vote time for each gauge\n   */\n  private callUserGaugeVoteTime(\n    votingGauges: ApiVotingGauge[],\n    userAddress: string\n  ) {\n    votingGauges.forEach(gauge => {\n      this.multicaller.call(\n        `gauges.${gauge.address}.lastUserVoteTime`,\n        this.config.network.addresses.gaugeController,\n        'last_user_vote',\n        [userAddress, gauge.address]\n      );\n    });\n  }\n\n  /**\n   * @summary Get gauge controller network.\n   * @description We only have a testnet and mainnet gauge controller\n   * so the network key can only be goerli (5) or mainnet (1).\n   */\n  private getNetwork(): Network {\n    if (isTestnet.value) {\n      return networkId.value;\n    } else {\n      return Network.MAINNET;\n    }\n  }\n\n  private resetMulticaller() {\n    const Multicaller = getOldMulticaller();\n    return new Multicaller(this.network.toString(), this.provider, this.abi);\n  }\n}\n","import {\n  GqlChain,\n  GqlPoolMinimalType,\n} from '@/services/api/graphql/generated/api-types';\nimport { ApiVotingPool } from '@/services/balancer/gauges/gauge-controller.decorator';\n\n/*\n Fake voting Pool data to test voting list UI in testnet networks\n*/\nexport function testnetVotingPools(\n  testnet: 'SEPOLIA' | 'GOERLI'\n): ApiVotingPool[] {\n  const veBal: ApiVotingPool = {\n    chain: testnet as GqlChain,\n    id: '0xf8a0623ab66f985effc1c69d05f1af4badb01b00000200000000000000000060',\n    address: '0xf8a0623ab66F985EfFc1C69D05F1af4BaDB01b00',\n    type: GqlPoolMinimalType.Stable,\n    symbol: 'vTSYMM',\n    tokens: [\n      {\n        address: '0x33A99Dcc4C85C014cf12626959111D5898bbCAbF',\n        weight: null,\n        symbol: 'vTSYMM',\n        logoURI:\n          'https://raw.githubusercontent.com/balancer/assets/master/assets/0x5c6ee304399dbdb9c8ef030ab642b10820db8f56.png',\n      },\n    ],\n    gauge: {\n      address: '0xF2ca6F8961e91F1ee0D688F9926183314D866f1E',\n      isKilled: false,\n      addedTimestamp: 1654312627,\n      relativeWeightCap: null,\n    },\n  };\n\n  const weightedPool: ApiVotingPool = {\n    chain: testnet as GqlChain,\n    id: '0x16faf9f73748013155b7bc116a3008b57332d1e600020000000000000000005b',\n    address: '0x16faF9f73748013155B7bC116a3008b57332D1e6',\n    type: GqlPoolMinimalType.Weighted,\n    symbol: 'B-50WBTC-50WETH',\n    tokens: [\n      {\n        address: '0x37f03a12241E9FD3658ad6777d289c3fb8512Bc9',\n        weight: '0.5',\n        symbol: 'WBTC',\n        logoURI: '',\n      },\n      {\n        address: '0xdFCeA9088c8A88A76FF74892C1457C17dfeef9C1',\n        weight: '0.5',\n        symbol: 'WETH',\n        logoURI: '',\n      },\n    ],\n    gauge: {\n      address: '0xf0f572ad66baacDd07d8c7ea3e0E5EFA56a76081',\n      isKilled: false,\n      relativeWeightCap: null,\n      addedTimestamp: 1654312702,\n    },\n  };\n\n  return [veBal, weightedPool];\n}\n","import { Network } from '@/lib/config/types';\nimport { PoolType } from '@/services/pool/types';\nimport { GqlChain, GqlPoolMinimalType } from './generated/api-types';\n\nexport function mapApiChain(\n  apiChain: GqlChain | 'SEPOLIA' | 'GOERLI'\n): Network {\n  switch (apiChain) {\n    case GqlChain.Arbitrum:\n      return Network.ARBITRUM;\n    case GqlChain.Avalanche:\n      return Network.AVALANCHE;\n    case GqlChain.Base:\n      return Network.BASE;\n    case GqlChain.Gnosis:\n      return Network.GNOSIS;\n    case GqlChain.Fantom:\n      return Network.FANTOM;\n    case GqlChain.Optimism:\n      return Network.OPTIMISM;\n    case GqlChain.Polygon:\n      return Network.POLYGON;\n    case GqlChain.Mainnet:\n      return Network.MAINNET;\n    case GqlChain.Zkevm:\n      return Network.ZKEVM;\n    case 'SEPOLIA':\n      return Network.SEPOLIA;\n    case 'GOERLI':\n      return Network.GOERLI;\n\n    default:\n      throw new Error(`Unexpected API chain: ${apiChain}`);\n  }\n}\n\nexport function mapApiPoolType(\n  apiPoolType: GqlPoolMinimalType\n): PoolType | null {\n  switch (apiPoolType) {\n    case GqlPoolMinimalType.Element:\n      return PoolType.Element;\n    case GqlPoolMinimalType.Gyro3:\n      return PoolType.Gyro3;\n    case GqlPoolMinimalType.Gyroe:\n      return PoolType.GyroE;\n    case GqlPoolMinimalType.Investment:\n      return PoolType.Investment;\n    case GqlPoolMinimalType.Linear:\n      return PoolType.Linear;\n    case GqlPoolMinimalType.LiquidityBootstrapping:\n      return PoolType.LiquidityBootstrapping;\n    case GqlPoolMinimalType.MetaStable:\n      return PoolType.MetaStable;\n    case GqlPoolMinimalType.PhantomStable:\n      return PoolType.StablePhantom;\n    case GqlPoolMinimalType.Stable:\n      return PoolType.Stable;\n    case GqlPoolMinimalType.Weighted:\n      return PoolType.Weighted;\n    default:\n      return null;\n  }\n}\n","import { useQuery, UseQueryOptions } from '@tanstack/vue-query';\n\nimport QUERY_KEYS from '@/constants/queryKeys';\nimport { getApi } from '@/dependencies/balancer-api';\nimport {\n  GaugeControllerDecorator,\n  VotingPoolWithVotes,\n} from '@/services/balancer/gauges/gauge-controller.decorator';\nimport useWeb3 from '@/services/web3/useWeb3';\nimport { isTestnet } from '@/composables/useNetwork';\nimport { VeBalGetVotingListQuery } from '@/services/api/graphql/generated/api-types';\nimport { Network } from '@/lib/config/types';\nimport { PoolType } from '@/services/pool/types';\nimport { testnetVotingPools } from '@/components/contextual/pages/vebal/LMVoting/testnet-voting-pools';\nimport { mapApiChain, mapApiPoolType } from '@/services/api/graphql/mappers';\n\n/**\n * TYPES\n */\n\nexport type ApiVotingPools = VeBalGetVotingListQuery['veBalGetVotingList'];\nexport type ApiVotingPool = ApiVotingPools[number];\nexport type ApiVotingGauge = ApiVotingPools[number]['gauge'];\n\nexport type VotingPool = VotingPoolWithVotes & {\n  network: Network;\n  poolType: PoolType;\n};\n\ntype QueryOptions = UseQueryOptions<VotingPool[]>;\n\n/**\n * @summary Fetches voting pool list from balancer api and decorates it with onchain votes data\n */\nexport default function useVotingPoolsQuery(\n  options: UseQueryOptions<VotingPool[]> = {}\n) {\n  /**\n   * COMPOSABLES\n   */\n  const { account } = useWeb3();\n\n  /**\n   * QUERY KEY\n   */\n  const queryKey = QUERY_KEYS.Gauges.Voting(account);\n\n  /**\n   * QUERY FUNCTION\n   */\n  const queryFn = async (): Promise<VotingPool[]> => {\n    try {\n      let apiVotingPools: ApiVotingPools;\n      if (isTestnet.value) {\n        apiVotingPools = testnetVotingPools('GOERLI');\n      } else {\n        const api = getApi();\n        const { veBalGetVotingList } = await api.VeBalGetVotingList();\n        apiVotingPools = veBalGetVotingList;\n      }\n\n      const pools = await new GaugeControllerDecorator().decorateWithVotes(\n        apiVotingPools,\n        account.value\n      );\n      const poolsWithNetwork = pools.map(pool => {\n        return {\n          ...pool,\n          network: mapApiChain(pool.chain),\n          poolType: mapApiPoolType(pool.type),\n        } as VotingPool;\n      });\n      return poolsWithNetwork.map(v => Object.freeze(v));\n    } catch (error) {\n      console.error('Failed to get voting pools', error);\n      return [];\n    }\n  };\n\n  /**\n   * QUERY OPTIONS\n   */\n  const queryOptions = reactive({\n    enabled: true,\n    ...options,\n  });\n\n  return useQuery<VotingPool[]>(\n    queryKey,\n    queryFn,\n    queryOptions as QueryOptions\n  );\n}\n","import { orderByWeight } from '@/composables/usePoolHelpers';\nimport { Duration, Interval, intervalToDuration, nextThursday } from 'date-fns';\n\nimport { POOLS } from '@/constants/pools';\nimport { PoolToken } from '@/services/pool/types';\nimport useVotingPoolsQuery, {\n  VotingPool,\n} from '@/composables/queries/useVotingPoolsQuery';\nimport { isQueryLoading } from '@/composables/queries/useQueryHelpers';\n\nexport function orderedGaugeTokens(votingPool: VotingPool): PoolToken[] {\n  return orderByWeight(votingPool.tokens as unknown as PoolToken[]);\n}\n\nexport function orderedTokenURIs(votingPool: VotingPool): string[] {\n  return orderByWeight(votingPool.tokens).map(token => token.logoURI);\n}\n\nexport function isVe8020Pool(pool: VotingPool): boolean {\n  return [POOLS.IdsMap.veBAL, POOLS.IdsMap.veLIT, POOLS.IdsMap.veUSH].includes(\n    pool.id.toLowerCase()\n  );\n}\n\nexport default function useVotingPools() {\n  const totalVotes = 1e4;\n\n  // Fetch onchain votes data for given votingGauges\n  const votingPoolsQuery = useVotingPoolsQuery();\n\n  const isLoading = computed(() => isQueryLoading(votingPoolsQuery));\n\n  const votingPools = computed(() => votingPoolsQuery.data.value || []);\n\n  const votingGauges = computed(() =>\n    votingPools.value.map(pool => pool.gauge)\n  );\n\n  const votingGaugeAddresses = computed(\n    () => votingPools.value.map(pool => pool.gauge.address) || []\n  );\n\n  const unallocatedVotes = computed(() => {\n    if (isLoading.value || !votingPools.value) return totalVotes;\n    const votesRemaining = votingPools.value.reduce((remainingVotes, gauge) => {\n      return remainingVotes - parseFloat(gauge.userVotes);\n    }, totalVotes);\n    return votesRemaining;\n  });\n\n  const now = ref(Date.now());\n  const nowInterval = setInterval(() => {\n    now.value = Date.now();\n  }, 1000);\n\n  onUnmounted(() => {\n    if (!nowInterval) return;\n    clearInterval(nowInterval);\n  });\n\n  const votingPeriodEnd = computed<number[]>(() => {\n    const periodEnd = getVotePeriodEndTime();\n    const interval: Interval = { start: now.value, end: periodEnd };\n    const timeUntilEnd: Duration = intervalToDuration(interval);\n    const formattedTime = [\n      (timeUntilEnd.days || 0) % 7,\n      timeUntilEnd.hours || 0,\n      timeUntilEnd.minutes || 0,\n      timeUntilEnd.seconds || 0,\n    ];\n    return formattedTime;\n  });\n\n  const votingPeriodLastHour = computed((): boolean => {\n    const periodEnd = getVotePeriodEndTime();\n    const interval: Interval = { start: now.value, end: periodEnd };\n    const timeUntilEnd: Duration = intervalToDuration(interval);\n    return (timeUntilEnd.days || 0) < 1 && (timeUntilEnd.hours || 0) < 1;\n  });\n\n  function getVotePeriodEndTime(): number {\n    const n = nextThursday(new Date());\n    const epochEndTime = Date.UTC(\n      n.getFullYear(),\n      n.getMonth(),\n      n.getDate(),\n      0,\n      0,\n      0\n    );\n    return epochEndTime;\n  }\n\n  return {\n    totalVotes,\n    isLoading,\n    isRefetchingVotingPools: votingPoolsQuery.isRefetching,\n    votingPools,\n    votingGauges,\n    votingGaugeAddresses,\n    unallocatedVotes,\n    votingPeriodEnd,\n    votingPeriodLastHour,\n    votingPoolsQuery,\n    refetchVotingPools: votingPoolsQuery.refetch,\n  };\n}\n"],"names":["_typeof","obj","add","dirtyDate","duration","requiredArgs","years","toInteger","months","weeks","days","hours","minutes","seconds","date","toDate","dateWithMonths","addMonths","dateWithDays","addDays","minutesToAdd","secondsToAdd","msToAdd","finalDate","millisecondsInMinute","millisecondsInHour","differenceInCalendarYears","dirtyDateLeft","dirtyDateRight","dateLeft","dateRight","differenceInHours","options","diff","differenceInMilliseconds","getRoundingMethod","differenceInMinutes","differenceInYears","sign","compareAsc","difference","isLastYearNotFull","result","getDay","day","intervalToDuration","interval","start","end","remainingMonths","differenceInMonths","remainingDays","differenceInDays","remainingHours","remainingMinutes","remainingSeconds","differenceInSeconds","nextDay","delta","nextThursday","FIRST_WEEK_TIMESTAMP","GaugeControllerDecorator","abi","GaugeControllerAbi","config","configService","__publicField","rpcProviderService","votingPools","userAddress","votingGauges","pool","votesDataMap","votesData","votes","votesNextPeriod","_a","_b","thisWeekTimestamp","toUnixTimestamp","oneWeekInMs","oneWeekInSecs","gauge","nextWeekTimestamp","isTestnet","networkId","Network","Multicaller","getOldMulticaller","testnetVotingPools","testnet","veBal","GqlPoolMinimalType","weightedPool","mapApiChain","apiChain","GqlChain","mapApiPoolType","apiPoolType","PoolType","useVotingPoolsQuery","account","useWeb3","queryKey","QUERY_KEYS","queryFn","apiVotingPools","api","getApi","veBalGetVotingList","v","error","queryOptions","reactive","useQuery","orderedGaugeTokens","votingPool","orderByWeight","orderedTokenURIs","token","isVe8020Pool","POOLS","useVotingPools","votingPoolsQuery","isLoading","computed","isQueryLoading","votingGaugeAddresses","unallocatedVotes","remainingVotes","now","ref","nowInterval","onUnmounted","votingPeriodEnd","periodEnd","getVotePeriodEndTime","timeUntilEnd","votingPeriodLastHour","n"],"mappings":"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"}