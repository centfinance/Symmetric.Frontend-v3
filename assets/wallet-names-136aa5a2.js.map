{"version":3,"file":"wallet-names-136aa5a2.js","sources":["../../src/services/web3/wallet-names.ts"],"sourcesContent":["import { useI18n } from 'vue-i18n';\nimport { ConnectorId } from './connectors/connector';\n\nexport function getConnectorName(\n  connectorId: ConnectorId,\n  provider: any\n): string {\n  const { t } = useI18n();\n\n  if (!provider) {\n    return t('unknown');\n  }\n  if (connectorId === ConnectorId.InjectedMetaMask) {\n    if (provider.isCoinbaseWallet) {\n      return `Coinbase ${t('wallet')}`;\n    }\n    if (provider.isMetaMask) {\n      return 'MetaMask';\n    }\n    if (provider.isImToken) {\n      return 'imToken';\n    }\n    if (provider.isStatus) {\n      return 'Status';\n    }\n    if (provider.isTrust) {\n      return 'Trust Wallet';\n    }\n    if (provider.isFrame) {\n      return 'Frame';\n    }\n    return t('browserWallet');\n  }\n  if (connectorId === ConnectorId.InjectedTally) {\n    return 'Tally';\n  }\n  if (connectorId === ConnectorId.WalletConnect) {\n    return 'WalletConnect';\n  }\n  if (connectorId === ConnectorId.WalletLink) {\n    return `Coinbase ${t('wallet')}`;\n  }\n  if (connectorId === ConnectorId.Gnosis) {\n    return 'Gnosis Safe';\n  }\n  return t('unknown');\n}\n\nexport function isWalletConnectWallet(connectorId: ConnectorId) {\n  return connectorId === ConnectorId.WalletConnect;\n}\n"],"names":["getConnectorName","connectorId","provider","t","useI18n","ConnectorId","isWalletConnectWallet"],"mappings":"uFAGgB,SAAAA,EACdC,EACAC,EACQ,CACF,KAAA,CAAE,EAAAC,GAAMC,IAEd,OAAKF,EAGDD,IAAgBI,EAAY,iBAC1BH,EAAS,iBACJ,YAAYC,EAAE,QAAQ,IAE3BD,EAAS,WACJ,WAELA,EAAS,UACJ,UAELA,EAAS,SACJ,SAELA,EAAS,QACJ,eAELA,EAAS,QACJ,QAEFC,EAAE,eAAe,EAEtBF,IAAgBI,EAAY,cACvB,QAELJ,IAAgBI,EAAY,cACvB,gBAELJ,IAAgBI,EAAY,WACvB,YAAYF,EAAE,QAAQ,IAE3BF,IAAgBI,EAAY,OACvB,cAEFF,EAAE,SAAS,EAnCTA,EAAE,SAAS,CAoCtB,CAEO,SAASG,EAAsBL,EAA0B,CAC9D,OAAOA,IAAgBI,EAAY,aACrC"}