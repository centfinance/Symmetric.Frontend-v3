{"version":3,"file":"liquidity-gauge-c56bdf84.js","sources":["../../src/services/balancer/contracts/contracts/liquidity-gauge.ts"],"sourcesContent":["import { BigNumber } from '@ethersproject/bignumber';\nimport { AddressZero } from '@ethersproject/constants';\nimport {\n  JsonRpcProvider,\n  JsonRpcSigner,\n  TransactionResponse,\n} from '@ethersproject/providers';\nimport { getAddress } from '@ethersproject/address';\nimport { formatUnits } from '@ethersproject/units';\nimport { mapValues } from 'lodash';\n\nimport LiquidityGaugeAbi from '@/lib/abi/LiquidityGaugeV5.json';\nimport { configService } from '@/services/config/config.service';\nimport { rpcProviderService } from '@/services/rpc-provider/rpc-provider.service';\nimport { walletService as walletServiceInstance } from '@/services/web3/wallet.service';\nimport { getOldMulticaller } from '@/dependencies/OldMulticaller';\nimport {\n  EthersContract,\n  getEthersContract,\n} from '@/dependencies/EthersContract';\nimport { TransactionBuilder } from '@/services/web3/transactions/transaction.builder';\n\nconst MAX_REWARD_TOKENS = 8;\n\nexport type RewardTokenData = {\n  distributor: string;\n  integral: BigNumber;\n  last_update: BigNumber;\n  period_finish: BigNumber;\n  rate: BigNumber;\n  token: string;\n};\nexport class LiquidityGauge {\n  instance: EthersContract;\n\n  constructor(\n    public readonly address: string,\n    private readonly provider = rpcProviderService.jsonProvider,\n    private readonly abi = LiquidityGaugeAbi,\n    private readonly config = configService,\n    private readonly walletService = walletServiceInstance\n  ) {\n    const Contract = getEthersContract();\n    this.instance = new Contract(this.address, this.abi, this.provider);\n  }\n\n  async stake(amount: BigNumber): Promise<TransactionResponse> {\n    return await this.walletService.txBuilder.contract.sendTransaction({\n      contractAddress: this.address,\n      abi: this.abi,\n      action: 'deposit(uint256)',\n      params: [amount],\n    });\n  }\n\n  async unstake(amount: BigNumber): Promise<TransactionResponse> {\n    return await this.walletService.txBuilder.contract.sendTransaction({\n      contractAddress: this.address,\n      abi: this.abi,\n      action: 'withdraw(uint256)',\n      params: [amount],\n    });\n  }\n\n  async balance(account: string): Promise<BigNumber> {\n    return this.instance.balanceOf(getAddress(account));\n  }\n\n  async totalSupply(): Promise<string> {\n    const supply = await this.instance.totalSupply();\n    return formatUnits(supply, 18);\n  }\n\n  /**\n   * @summary Claim all user's reward tokens, e.g. everything that's not BAL\n   */\n  async claimRewards(): Promise<TransactionResponse> {\n    return await this.walletService.txBuilder.contract.sendTransaction({\n      contractAddress: this.address,\n      abi: this.abi,\n      action: 'claim_rewards()',\n    });\n  }\n\n  async checkpointUser(payload: {\n    userAddress: string;\n    signer: JsonRpcSigner;\n  }): Promise<TransactionResponse> {\n    const { userAddress, signer } = payload;\n    const txBuilder = new TransactionBuilder(signer);\n\n    return await txBuilder.contract.sendTransaction({\n      contractAddress: this.address,\n      abi: this.abi,\n      action: 'user_checkpoint',\n      params: [userAddress],\n    });\n  }\n\n  async workingSupplies(gaugeAddresses: string[]) {\n    const multicaller = this.getMulticaller();\n    for (const gaugeAddress of gaugeAddresses) {\n      multicaller.call(gaugeAddress, this.address, 'working_supply');\n    }\n    const result = await multicaller.execute();\n    const supplies = mapValues(result, weight => formatUnits(weight, 18));\n    return supplies;\n  }\n\n  async rewardData(rewardTokenAddress: string) {\n    const response = this.instance.reward_data(getAddress(rewardTokenAddress));\n    return response;\n  }\n\n  async getRewardTokens() {\n    const multicaller = this.getMulticaller();\n    for (let i = 0; i < MAX_REWARD_TOKENS; i++) {\n      multicaller.call(this.address, this.address, 'reward_tokens', [i]);\n    }\n    const tokens = await multicaller.execute();\n    return tokens;\n  }\n\n  static async getRewardTokensForGauges(\n    gaugeAddresses: string[]\n  ): Promise<Record<string, string[]>> {\n    const multicaller = LiquidityGauge.getMulticaller();\n    gaugeAddresses.forEach(gaugeAddress => {\n      for (let i = 0; i < MAX_REWARD_TOKENS; i++) {\n        multicaller.call(\n          `${getAddress(gaugeAddress)}.[${i}]`,\n          getAddress(gaugeAddress),\n          'reward_tokens',\n          [i]\n        );\n      }\n    });\n    const tokensForGauges = await multicaller.execute();\n    return mapValues(tokensForGauges, rewardTokens =>\n      rewardTokens.filter(token => token !== AddressZero)\n    );\n  }\n\n  static async getRewardTokenDataForGauges(\n    gaugeRewardTokenMap: Record<string, string[]>\n  ) {\n    const multicaller = this.getMulticaller();\n    for (const gaugeAddress of Object.keys(gaugeRewardTokenMap)) {\n      const _gaugeAddress = getAddress(gaugeAddress);\n      for (const rewardToken of gaugeRewardTokenMap[gaugeAddress]) {\n        const _rewardToken = getAddress(rewardToken);\n        multicaller.call(\n          `${_gaugeAddress}.${_rewardToken}`,\n          _gaugeAddress,\n          'reward_data',\n          [_rewardToken]\n        );\n      }\n    }\n    const rewardData = await multicaller.execute();\n    return rewardData;\n  }\n\n  private getMulticaller() {\n    const Multicaller = getOldMulticaller();\n    return new Multicaller(this.config.network.key, this.provider, this.abi);\n  }\n\n  static getMulticaller(provider?: JsonRpcProvider) {\n    const Multicaller = getOldMulticaller();\n    return new Multicaller(\n      configService.network.key,\n      provider || rpcProviderService.jsonProvider,\n      LiquidityGaugeAbi\n    );\n  }\n}\n"],"names":["MAX_REWARD_TOKENS","LiquidityGauge","address","provider","rpcProviderService","abi","LiquidityGaugeAbi","config","configService","walletService","walletServiceInstance","__publicField","Contract","getEthersContract","amount","account","getAddress","supply","formatUnits","payload","userAddress","signer","TransactionBuilder","gaugeAddresses","multicaller","gaugeAddress","result","mapValues","weight","rewardTokenAddress","i","tokensForGauges","rewardTokens","token","AddressZero","gaugeRewardTokenMap","_gaugeAddress","rewardToken","_rewardToken","Multicaller","getOldMulticaller"],"mappings":"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"}