{"version":3,"file":"token-lists.provider-00d13873.js","sources":["../../src/providers/token-lists.provider.ts"],"sourcesContent":["import { safeInject } from '@/providers/inject';\nimport { pick } from 'lodash';\nimport {\n  ref,\n  computed,\n  InjectionKey,\n  provide,\n  reactive,\n  toRefs,\n  onBeforeMount,\n} from 'vue';\n\nimport useNetwork from '@/composables/useNetwork';\nimport localStorageKeys from '@/constants/local-storage.keys';\nimport symbolKeys from '@/constants/symbol.keys';\nimport { lsSet } from '@/lib/utils';\nimport TokenListService, {\n  tokenListService,\n} from '@/services/token-list/token-list.service';\nimport { TokenList, TokenListMap } from '@/types/TokenList';\nimport testTokenList from '@tests/tokenlists/tokens-5.json';\n\n/** TYPES */\nexport interface TokenListsState {\n  activeListKeys: string[];\n}\n\nconst { uris } = tokenListService;\nconst { networkId } = useNetwork();\n\n/**\n * STATE\n */\nconst state: TokenListsState = reactive({\n  activeListKeys: [uris.Balancer.Allowlisted],\n});\n\nconst allTokenLists = ref({});\n\nconst isTestMode = import.meta.env.MODE === 'test';\nconst tokensListPromise = isTestMode // Return empty promise only in tests (vitest)\n  ? Promise.resolve()\n  : import(`@/assets/data/tokenlists/tokens-${networkId.value}.json`);\n\n/**\n * All active (toggled) tokenlists\n */\nconst activeTokenLists = computed(\n  (): TokenListMap => pick(allTokenLists.value, state.activeListKeys)\n);\n\n/**\n * All allowlisted tokens from tokenlists repo\n */\nexport const balancerTokenList = computed(\n  (): TokenList => allTokenLists.value[uris.Balancer.Allowlisted]\n);\n\n/**\n * All Balancer token lists mapped by URI.\n */\nexport const balancerTokenLists = computed(\n  (): TokenListMap => pick(allTokenLists.value, uris.Balancer.All)\n);\n\n/**\n * Approved token lists mapped by URI.\n * Approved means tokens are compliant and can be presented in the UI.\n * This excludes lists like the Balancer vetted list.\n */\nconst approvedTokenLists = computed(\n  (): TokenListMap => pick(allTokenLists.value, uris.Approved)\n);\n\n/**\n * Adds a token list to the active lists which\n * makes additonal tokens available in the token search modal.\n */\nfunction toggleTokenList(uri: string): void {\n  if (!uris.Approved.includes(uri)) return;\n\n  if (state.activeListKeys.includes(uri)) {\n    // Deactivate token list\n    state.activeListKeys.splice(state.activeListKeys.indexOf(uri), 1);\n  } else {\n    // Activate token list\n    state.activeListKeys.push(uri);\n  }\n\n  lsSet(localStorageKeys.TokenLists.Toggled, state.activeListKeys);\n}\n\n/**\n * Given a token list URI checks if the related token\n * list has been toggled via the token search modal.\n */\nfunction isActiveList(uri: string): boolean {\n  return state.activeListKeys.includes(uri);\n}\n\nexport const tokenListsProvider = () => {\n  if (!isTestMode) {\n    onBeforeMount(async () => {\n      const module = await tokensListPromise;\n      const tokenLists = module.default as TokenListMap;\n\n      // filter token lists by network id\n      allTokenLists.value = TokenListService.filterTokensList(\n        tokenLists,\n        networkId.value\n      );\n    });\n  } else {\n    allTokenLists.value = testTokenList;\n  }\n\n  return {\n    // state\n    ...toRefs(state),\n    tokensListPromise,\n    // computed\n    allTokenLists,\n    activeTokenLists,\n    balancerTokenLists,\n    approvedTokenLists,\n    balancerTokenList,\n    // methods\n    toggleTokenList,\n    isActiveList,\n  };\n};\n\nexport type TokenListsResponse = ReturnType<typeof tokenListsProvider>;\nexport const TokenListsProviderSymbol: InjectionKey<TokenListsResponse> =\n  Symbol(symbolKeys.Providers.TokenLists);\n\nexport function provideTokenLists(): TokenListsResponse {\n  const tokenLists = tokenListsProvider();\n  provide(TokenListsProviderSymbol, tokenLists);\n  return tokenLists;\n}\n\nexport const useTokenLists = (): TokenListsResponse => {\n  return safeInject(TokenListsProviderSymbol);\n};\n"],"names":["uris","tokenListService","networkId","useNetwork","state","reactive","allTokenLists","ref","tokensListPromise","__variableDynamicImportRuntimeHelper","activeTokenLists","computed","pick","balancerTokenList","balancerTokenLists","approvedTokenLists","toggleTokenList","uri","lsSet","localStorageKeys","isActiveList","tokenListsProvider","onBeforeMount","tokenLists","TokenListService","toRefs","TokenListsProviderSymbol","symbolKeys","provideTokenLists","provide","useTokenLists","safeInject"],"mappings":"yfA2BM,CAAE,KAAAA,CAAS,EAAAC,EACX,CAAE,UAAAC,CAAU,EAAIC,IAKhBC,EAAyBC,EAAS,CACtC,eAAgB,CAACL,EAAK,SAAS,WAAW,CAC5C,CAAC,EAEKM,EAAgBC,EAAI,CAAA,CAAE,EAGtBC,EAEFC,imCAAA,oCAAAP,EAAA,YAAA,EAKEQ,EAAmBC,EACvB,IAAoBC,EAAA,KAAKN,EAAc,MAAOF,EAAM,cAAc,CACpE,EAKaS,EAAoBF,EAC/B,IAAiBL,EAAc,MAAMN,EAAK,SAAS,WAAW,CAChE,EAKac,EAAqBH,EAChC,IAAoBC,EAAAA,KAAKN,EAAc,MAAON,EAAK,SAAS,GAAG,CACjE,EAOMe,EAAqBJ,EACzB,IAAoBC,EAAA,KAAKN,EAAc,MAAON,EAAK,QAAQ,CAC7D,EAMA,SAASgB,EAAgBC,EAAmB,CACrCjB,EAAK,SAAS,SAASiB,CAAG,IAE3Bb,EAAM,eAAe,SAASa,CAAG,EAEnCb,EAAM,eAAe,OAAOA,EAAM,eAAe,QAAQa,CAAG,EAAG,CAAC,EAG1Db,EAAA,eAAe,KAAKa,CAAG,EAG/BC,EAAMC,EAAiB,WAAW,QAASf,EAAM,cAAc,EACjE,CAMA,SAASgB,EAAaH,EAAsB,CACnC,OAAAb,EAAM,eAAe,SAASa,CAAG,CAC1C,CAEO,MAAMI,EAAqB,KAE9BC,EAAc,SAAY,CAExB,MAAMC,GADS,MAAMf,GACK,QAG1BF,EAAc,MAAQkB,EAAiB,iBACrCD,EACArB,EAAU,KAAA,CACZ,CACD,EAKI,CAEL,GAAGuB,EAAOrB,CAAK,EACf,kBAAAI,EAEA,cAAAF,EACA,iBAAAI,EACA,mBAAAI,EACA,mBAAAC,EACA,kBAAAF,EAEA,gBAAAG,EACA,aAAAI,CAAA,GAKSM,EACX,OAAOC,EAAW,UAAU,UAAU,EAEjC,SAASC,GAAwC,CACtD,MAAML,EAAaF,IACnB,OAAAQ,EAAQH,EAA0BH,CAAU,EACrCA,CACT,CAEO,MAAMO,EAAgB,IACpBC,EAAWL,CAAwB"}