var S=Object.defineProperty;var A=(s,e,t)=>e in s?S(s,e,{enumerable:!0,configurable:!0,writable:!0,value:t}):s[e]=t;var o=(s,e,t)=>(A(s,typeof e!="symbol"?e+"":e,t),t);import{aa as v,T as i,Q as h}from"./connector-16147cef.js";import{aO as b}from"./BalBtn-cca6788c.js";import{S as B}from"./usePoolHelpers-eb955974.js";const I={first:1e3,orderBy:"totalLiquidity",orderDirection:"desc",where:{totalShares:{gt:1e-5},id:{not_in:v.BlockList}}},p={address:!0,balance:!0,weight:!0,priceRate:!0,symbol:!0,decimals:!0},d={id:!0,totalShares:!0,address:!0,poolType:!0,mainIndex:!0},P={...p,token:{latestUSDPrice:!0,pool:{...d,tokens:{...p,token:{latestUSDPrice:!0,pool:{...d,tokens:{...p,token:{latestUSDPrice:!0,pool:{...d}}}}}}}}},x={address:!0,token:{address:!0}},f={pools:{id:!0,address:!0,poolType:!0,poolTypeVersion:!0,swapFee:!0,tokensList:!0,totalLiquidity:!0,totalSwapVolume:!0,totalSwapFee:!0,totalShares:!0,volumeSnapshot:!0,feesSnapshot:!0,owner:!0,factory:!0,amp:!0,createTime:!0,swapEnabled:!0,symbol:!0,name:!0,protocolYieldFeeCache:!0,priceRateProviders:x,tokens:P,isNew:!0,isInRecoveryMode:!0,isPaused:!0,apr:{stakingApr:{min:!0,max:!0},swapFees:!0,tokenAprs:{total:!0,breakdown:!0},rewardAprs:{total:!0,breakdown:!0},protocolApr:!0,min:!0,max:!0}}},L=(s={},e={})=>({args:i.merge({},I,s),attrs:i.merge({},f,e)}),Q={where:{}},T=(s={},e={})=>({args:i.merge({},Q,s),attrs:i.merge({},f,e)});class ${constructor(e,t=T){o(this,"service");o(this,"queryBuilder");o(this,"lastQuery");this.service=e,this.queryBuilder=t}async get(e={},t={}){var a,u;const r=this.queryBuilder(e,t);if(!r.args.chainId)throw new Error("Invalid query - missing chainId");if(!((u=(a=r.args.where)==null?void 0:a.id)!=null&&u.eq))throw new Error("Invalid query - missing pool id");const l=r.args.chainId,c=r.args.where.id.eq,y=`${h.network.balancerApi}/pools/${l}/${c}`,{data:n}=await b.get(y);return n}}class D{constructor(e,t=L){o(this,"service");o(this,"queryBuilder");o(this,"lastQuery");o(this,"repository");this.service=e,this.queryBuilder=t}async get(e={},t={}){var n,a,u,g,w,m,k;const r=this.queryBuilder(e,t),l=r.args.skip,c=r.args.first;if(delete r.args.skip,delete r.args.first,(a=(n=r.args.where)==null?void 0:n.id)!=null&&a.in){if(((g=(u=r.args.where)==null?void 0:u.id)==null?void 0:g.in.length)===0)return[];(m=(w=r.args.where)==null?void 0:w.id)!=null&&m.not_in&&((k=r.args.where)==null||delete k.id.not_in)}if(!this.repository||!i.isEqual(r,this.lastQuery)){this.lastQuery=i.cloneDeep(r);const q=`${h.network.balancerApi}/graphql`;this.repository=new B({url:q,apiKey:h.network.keys.balancerApi||"",query:r})}return await this.repository.fetch({first:c,skip:l})}get skip(){return this.repository?this.repository.skip:0}}class E{constructor(){o(this,"pool");o(this,"pools");this.pool=new $(this),this.pools=new D(this)}}const _=new E;export{_ as b};
//# sourceMappingURL=balancer-api.service-037872f8.js.map
