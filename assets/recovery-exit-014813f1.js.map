{"version":3,"file":"recovery-exit-014813f1.js","sources":["../../src/constants/pool-lists/csp-issue.ts","../../src/pages/recovery-exit/components/WithdrawalModal.vue","../../src/pages/recovery-exit/components/WithdrawalsTable.vue","../../src/services/balancer/batch-relayer/extensions/vault-actions.service.ts","../../src/services/balancer/batch-relayer/extensions/aave-wrapping.service.ts","../../src/services/balancer/batch-relayer/extensions/yearn-wrapping.service.ts","../../src/services/balancer/batch-relayer/extensions/reaper-wrapping.service.ts","../../src/services/balancer/batch-relayer/extensions/erc4626-wrapping.service.ts","../../src/services/balancer/batch-relayer/extensions/gauge-actions.service.ts","../../src/services/balancer/batch-relayer/extensions/euler-wrapping.service.ts","../../src/services/balancer/batch-relayer/extensions/gearbox-wrapping.service.ts","../../src/services/balancer/batch-relayer/extensions/silo-wrapping.service.ts","../../src/services/balancer/batch-relayer/extensions/tetu-wrapping.service.ts","../../src/services/balancer/batch-relayer/batch-relayer.service.ts","../../src/pages/recovery-exit/components/TokenUnwrapTable.vue","../../src/pages/recovery-exit/components/UnstakeTable.vue","../../src/pages/recovery-exit/recovery-exit.vue"],"sourcesContent":["import { Network } from '@/lib/config/types';\n\nexport const NO_RECOVERY_EXIT_POOL_IDS: Record<Network, string[]> = {\n  [Network.MAINNET]: [\n    // bb-a-USD v1 and linear's doesn't support recovery exits.\n    '0x7b50775383d3d6f0215a8f290f2c9e2eebbeceb20000000000000000000000fe',\n    '0x2bbf681cc4eb09218bee85ea2a5d3d13fa40fc0c0000000000000000000000fd',\n    '0x804cdb9116a10bb78768d3252355a1b18067bf8f0000000000000000000000fb',\n    '0x9210f1204b5a24742eba12f710636d76240df3d00000000000000000000000fc',\n    // bb-e-USD Euler linear pools have a specific exit to internal balances.\n    // Context is provided in the withdrawal flow, so better to direct them there.\n    // Standard recovery exits don't work for these pools.\n    '0x3c640f0d3036ad85afa2d5a9e32be651657b874f00000000000000000000046b',\n    '0xd4e7c1f3da1144c9e2cfd1b015eda7652b4a439900000000000000000000046a',\n    '0xeb486af868aeb3b6e53066abc9623b1041b42bc000000000000000000000046c',\n    // Weighted 80 XAV / 20 bb-a-USD v1 pool doesn't support recovery exits.\n    '0x8a6b25e33b12d1bb6929a8793961076bd1f9d3eb0002000000000000000003e8',\n  ],\n  [Network.POLYGON]: [],\n  [Network.ARBITRUM]: [],\n  [Network.GNOSIS]: [],\n  [Network.ZKEVM]: [],\n  [Network.AVALANCHE]: [],\n  [Network.BASE]: [],\n  [Network.SEPOLIA]: [],\n  [Network.FANTOM]: [],\n  [Network.GOERLI]: [],\n  [Network.OPTIMISM]: [],\n  [Network.TELOSTESTNET]: [],\n};\n\nexport const CSP_ISSUE_POOL_IDS: Record<Network, string[]> = {\n  [Network.MAINNET]: [\n    '0x00c2a4be503869fa751c2dbcb7156cc970b5a8da000000000000000000000477',\n    '0x02d928e68d8f10c0358566152677db51e1e2dc8c00000000000000000000051e',\n    '0x04248aabca09e9a1a3d5129a7ba05b7f17de768400000000000000000000050e',\n    '0x05513ca725b6ce035ca2641075474eb469f05f4c00020000000000000000041f',\n    '0x0a0fb4ff697de5ac5b6770cd8ee1b72af80b57cf000000000000000000000496',\n    '0x0afbd58beca09545e4fb67772faf3858e610bcd00000000000000000000004b9',\n    '0x0d05aac44ac7dd3c7ba5d50be93eb884a057d23400000000000000000000051c',\n    '0x11839d635e2f0270da37e8ef4324d4d5d54329570002000000000000000004d8',\n    '0x126e7643235ec0ab9c103c507642dc3f4ca23c66000000000000000000000468',\n    '0x133d241f225750d2c92948e464a5a80111920331000000000000000000000476',\n    '0x159cb00338fb63f263fd6f621df619cef71da9540000000000000000000004d5',\n    '0x173063a30e095313eee39411f07e95a8a806014e0002000000000000000003ab',\n    '0x1bd2f176a812e312077bca87e37c08432bb09f3e0000000000000000000005a1',\n    '0x20b156776114e8a801e9767d90c6ccccc8adf398000000000000000000000499',\n    '0x246ffb4d928e394a02e45761fecdba6c2e79b8eb000000000000000000000541',\n    '0x25accb7943fd73dda5e23ba6329085a3c24bfb6a000200000000000000000387',\n    '0x26c2b83fc8535deead276f5cc3ad9c1a2192e02700020000000000000000056b',\n    '0x2b218683178d029bab6c9789b1073aa6c96e517600000000000000000000058c',\n    '0x2ba7aa2213fa2c909cd9e46fed5a0059542b36b00000000000000000000003a3',\n    '0x2bbf681cc4eb09218bee85ea2a5d3d13fa40fc0c0000000000000000000000fd',\n    '0x2e52c64fd319e380cdbcfc4577ea1fda558a32e40002000000000000000005ba',\n    '0x2f4eb100552ef93840d5adc30560e5513dfffacb000000000000000000000334',\n    '0x2ff1a9dbdacd55297452cfd8a4d94724bc22a5f7000000000000000000000484',\n    '0x3035917be42af437cbdd774be26b9ec90a2bd677000200000000000000000543',\n    '0x331d50e0b00fc1c32742f151e56b9b616227e23e00000000000000000000047c',\n    '0x334c96d792e4b26b841d28f53235281cec1be1f200020000000000000000038a',\n    '0x335d1709d4da9aca59d16328db5cd4ea66bfe06b0000000000000000000004d6',\n    '0x395d8a1d9ad82b5abe558f8abbfe183b27138af40000000000000000000004e5',\n    '0x3bb22fc9033b802f2ac47c18885f63476f158afc000000000000000000000483',\n    '0x3c640f0d3036ad85afa2d5a9e32be651657b874f00000000000000000000046b',\n    '0x3cdae4f12a67ba563499e102f309c73213cb241c000000000000000000000335',\n    '0x3dbb8d974b82e82ce79c20c0f5995f4f1f533ede000000000000000000000470',\n    '0x3f7a7fd7f214be45ec26820fd01ac3be4fc75aa70002000000000000000004c5',\n    '0x3fcb7085b8f2f473f80bf6d879cae99ea4de934400000000000000000000056d',\n    '0x41503c9d499ddbd1dcdf818a1b05e9774203bf46000000000000000000000594',\n    '0x4228290ee9cab692938ff0b4ba303fbcdb68e9f200020000000000000000057d',\n    '0x454ed96955d04d2f5cdd05e0fd1c77975bfe5307000000000000000000000410',\n    '0x481c5fc05d63a58aa2f0f2aa417c021b5d419cb200000000000000000000056a',\n    '0x483006684f422a9448023b2382615c57c5ecf18f000000000000000000000488',\n    '0x4a82b580365cff9b146281ab72500957a849abdc000000000000000000000494',\n    '0x4c81255cc9ed7062180ea99962fe05ac0d57350b0000000000000000000005a3',\n    '0x4c8d2e60863e8d7e1033eda2b3d84e92a641802000000000000000000000040f',\n    '0x4cbde5c4b4b53ebe4af4adb85404725985406163000000000000000000000595',\n    '0x4ce0bd7debf13434d3ae127430e9bd4291bfb61f00020000000000000000038b',\n    '0x4ce277df0feb5b4d07a0ca2adcf5326e4005239d000000000000000000000518',\n    '0x4fd4687ec38220f805b6363c3c1e52d0df3b5023000200000000000000000473',\n    '0x4fd63966879300cafafbb35d157dc5229278ed230000000000000000000000e9',\n    '0x50cf90b954958480b8df7958a9e965752f62712400000000000000000000046f',\n    '0x53bc3cba3832ebecbfa002c12023f8ab1aa3a3a0000000000000000000000411',\n    '0x5a6a8cffb4347ff7fc484bf5f0f8a2e234d34255000200000000000000000275',\n    '0x5b3240b6be3e7487d61cd1afdfc7fe4fa1d81e6400000000000000000000037b',\n    '0x60683b05e9a39e3509d8fdb9c959f23170f8a0fa000000000000000000000489',\n    '0x60d604890feaa0b5460b28a424407c24fe89374a0000000000000000000004fc',\n    '0x639883476960a23b38579acfd7d71561a0f408cf000200000000000000000505',\n    '0x652d486b80c461c397b0d95612a404da936f3db30000000000000000000000e7',\n    '0x6667c6fa9f2b3fc1cc8d85320b62703d938e43850000000000000000000004fb',\n    '0x6a1eb2e9b45e772f55bd9a34659a04b6f75da68700000000000000000000040d',\n    '0x6c56e72c551b5ac4bf54a620a76077ca768c8fe40002000000000000000004da',\n    '0x70b7d3b3209a59fb0400e17f67f3ee8c37363f4900020000000000000000018f',\n    '0x7337224d59cb16c2dc6938cd45a7b2c60c865d6a0000000000000000000004d4',\n    '0x74cbfaf94a3577c539a9dcee9870a6349a33b34f000000000000000000000534',\n    '0x779d01f939d78a918a3de18cc236ee89221dfd4e0000000000000000000004c7',\n    '0x7b50775383d3d6f0215a8f290f2c9e2eebbeceb20000000000000000000000fe',\n    '0x804cdb9116a10bb78768d3252355a1b18067bf8f0000000000000000000000fb',\n    '0x813e3fe1761f714c502d1d2d3a7cceb33f37f59d00000000000000000000040c',\n    '0x82698aecc9e28e9bb27608bd52cf57f704bd1b83000000000000000000000336',\n    '0x8a6b25e33b12d1bb6929a8793961076bd1f9d3eb0002000000000000000003e8',\n    '0x8e6ec57a822c2f527f2df7c7d7d361df3e7530a1000000000000000000000498',\n    '0x8f4063446f5011bc1c9f79a819efe87776f23704000000000000000000000197',\n    '0x9001cbbd96f54a658ff4e6e65ab564ded76a543100000000000000000000050a',\n    '0x9210f1204b5a24742eba12f710636d76240df3d00000000000000000000000fc',\n    '0x9516a2d25958edb8da246a320f2c7d94a0dbe25d000000000000000000000519',\n    '0x959216bb492b2efa72b15b7aacea5b5c984c3cca000200000000000000000472',\n    '0x968024662b9566b42d78af23a0f441bc8723fa83000200000000000000000418',\n    '0x99c88ad7dc566616548adde8ed3effa730eb6c3400000000000000000000049a',\n    '0x9b1c8407a360443a9e5eca004713e4088fab8ac0000000000000000000000497',\n    '0x9b692f571b256140a39a34676bffa30634c586e100000000000000000000059d',\n    '0x9d7f992c900fbea0ec314bdd71b7cc1becf76a33000200000000000000000573',\n    '0x9fb771d530b0ceba5160f7bfe2dd1e8b8aa1340300000000000000000000040e',\n    '0xa13a9247ea42d743238089903570127dda72fe4400000000000000000000035d',\n    '0xa1697f9af0875b63ddc472d6eebada8c1fab85680000000000000000000004f9',\n    '0xa3823e50f20982656557a4a6a9c06ba5467ae9080000000000000000000000e6',\n    '0xa718042e5622099e5f0ace4e7122058ab39e1bbe000200000000000000000475',\n    '0xa8b103a10a94f4f2d7ed2fdcd5545e807557330700000000000000000000048e',\n    '0xac5b4ef7ede2f2843a704e96dcaa637f4ba3dc3f00000000000000000000051d',\n    '0xac976bb42cb0c85635644e8c7c74d0e0286aa61c0000000000000000000003cb',\n    '0xae37d54ae477268b9997d4161b96b8200755935c000000000000000000000337',\n    '0xae8535c23afedda9304b03c68a3563b75fc8f92b0000000000000000000005a0',\n    '0xb0f75e97a114a4eb4a425edc48990e6760726709000000000000000000000198',\n    '0xb5e3de837f869b0248825e0175da73d4e8c3db6b000200000000000000000474',\n    '0xb841b062ea8ccf5c4cb78032e91de4ae875560420002000000000000000005b7',\n    '0xb9bd68a77ccf8314c0dfe51bc291c77590c4e9e6000200000000000000000385',\n    '0xbb6881874825e60e1160416d6c426eae65f2459e000000000000000000000592',\n    '0xbc0f2372008005471874e426e86ccfae7b4de79d000000000000000000000485',\n    '0xbf2ef8bdc2fc0f3203b3a01778e3ec5009aeef3300000000000000000000058d',\n    '0xbfa413a2ff0f20456d57b643746133f54bfe0cd20000000000000000000004c3',\n    '0xc2b021133d1b0cf07dba696fd5dd89338428225b000000000000000000000598',\n    '0xc443c15033fcb6cf72cc24f1bda0db070ddd9786000000000000000000000593',\n    '0xc50d4347209f285247bda8a09fc1c12ce42031c3000000000000000000000590',\n    '0xc5dc1316ab670a2eed5716d7f19ced321191f38200000000000000000000056e',\n    '0xc8c79fcd0e859e7ec81118e91ce8e4379a481ee6000000000000000000000196',\n    '0xcaa052584b462198a5a9356c28bce0634d65f65c0000000000000000000004db',\n    '0xcbfa4532d8b2ade2c261d3dd5ef2a2284f7926920000000000000000000004fa',\n    '0xcfae6e251369467f465f13836ac8135bd42f8a56000000000000000000000591',\n    '0xd4e7c1f3da1144c9e2cfd1b015eda7652b4a439900000000000000000000046a',\n    '0xd6e355036f41dc261b3f1ed3bbc6003e87aadb4f000000000000000000000495',\n    '0xd7edb56f63b2a0191742aea32df1f98ca81ed9c600000000000000000000058e',\n    '0xd997f35c9b1281b82c8928039d14cddab5e13c2000000000000000000000019c',\n    '0xdba274b4d04097b90a72b62467d828cefd708037000000000000000000000486',\n    '0xdc063deafce952160ec112fa382ac206305657e60000000000000000000004c4',\n    '0xdec02e6642e2c999af429f5ce944653cad15e093000000000000000000000469',\n    '0xe03af00fabe8401560c1ff7d242d622a5b601573000000000000000000000493',\n    '0xe0fcbf4d98f0ad982db260f86cf28b49845403c5000000000000000000000504',\n    '0xe2d16b0a39f3fbb4389a0e8f1efcbecfb3d1e6e10000000000000000000005a7',\n    '0xe4dc3c1998ac693d68f4c77476d7c815694c3e94000200000000000000000416',\n    '0xe6bcc79f328eec93d4ec8f7ed35534d9ab549faa0000000000000000000000e8',\n    '0xe8c56405bc405840154d9b572927f4197d110de10000000000000000000005a4',\n    '0xeb486af868aeb3b6e53066abc9623b1041b42bc000000000000000000000046c',\n    '0xeb567dde03f3da7fe185bdacd5ab495ab220769d000000000000000000000548',\n    '0xec3626fee40ef95e7c0cbb1d495c8b67b34d398300000000000000000000053d',\n    '0xf22ff21e17157340575158ad7394e068048dd98b0000000000000000000004b8',\n    '0xf57c794f42da72b38c8f610ff3b5e8502e48cbde00000000000000000000055c',\n    '0xf71d0774b214c4cf51e33eb3d30ef98132e4dbaa00000000000000000000046e',\n    '0xfa24a90a3f2bbe5feea92b95cd0d14ce709649f900000000000000000000058f',\n    '0xfd11ccdbdb7ab91cb9427a6d6bf570c95876d1950000000000000000000004c2',\n    '0xfebb0bbf162e64fb9d0dfe186e517d84c395f016000000000000000000000502',\n    '0xfef969638c52899f91781f1be594af6f40b99bad00000000000000000000047b',\n  ],\n  [Network.POLYGON]: [\n    '0x02e139d53ebf4033bf78ab66c6a1e7f1f204487f0002000000000000000009f9',\n    '0x03090a9811181a2afe830a3a0b467698ccf3a8b1000000000000000000000bf5',\n    '0x0320c1c5b6df19a194d48882aaec1c72940081d9000000000000000000000a7d',\n    '0x04b54ea92d73de2d62d651db7d9778f0c49157d8000200000000000000000ba2',\n    '0x0503dd6b2d3dd463c9bef67fb5156870af63393e00000000000000000000042e',\n    '0x0889b240a5876aae745ac19f1771853671dc5d36000000000000000000000b3f',\n    '0x0bc54e914f53f98d16035f4f0d948f3e09c2fac0000200000000000000000bac',\n    '0x0c06e87c7b88d998f645b91c1f53b51294b12bca000100000000000000000bb9',\n    '0x10b040038f87219d9b42e025e3bd9b8095c87dd9000000000000000000000b11',\n    '0x117a3d474976274b37b7b94af5dcade5c90c6e85000000000000000000000aca',\n    '0x11884da90fb4221b3aa288a7741c51ec4fc43b2f000000000000000000000a5f',\n    '0x1379b816b9be611431d693290289c204720ca56d000100000000000000000b6f',\n    '0x150e7b885bdfce974f2abe88a72fdbd692175c6f0002000000000000000009fd',\n    '0x178e029173417b1f9c8bc16dcec6f697bc323746000000000000000000000758',\n    '0x1aafc31091d93c3ff003cff5d2d8f7ba2e7284250000000000000000000003b3',\n    '0x216690738aac4aa0c4770253ca26a28f0115c595000000000000000000000b2c',\n    '0x216d6db0c28204014618482c369d7fbf0a8f3232000100000000000000000b60',\n    '0x230ecdb2a7cee56d6889965a023aa0473d6da507000000000000000000000bf3',\n    '0x252ff6a3a6fd7b5e8e999de8e3f5c3b306ed1401000200000000000000000bec',\n    '0x25e57f4612912614e6c99616bd2abb9b5ae71e99000000000000000000000bf0',\n    '0x2645b13fd2c5295296e94a76280b968bdcbbdfed000000000000000000000c11',\n    '0x284eb68520c8fa83361c1a3a5910aec7f873c18b000000000000000000000ac9',\n    '0x2c8dbe8eb86135d9f2f26d196748c088d47f73e7000200000000000000000a29',\n    '0x31bccf9e28b94e5dacebaa67fe8bc1603cecd904000000000000000000000a01',\n    '0x341068a547c3cde3c09e338714010dd01b32f93f000200000000000000000a34',\n    '0x3db543faf7a92052de7860c5c9debabee59ed5bd000000000000000000000a62',\n    '0x3dd0843a028c86e0b760b1a76929d1c5ef93a2dd00000000000000000000070d',\n    '0x3efb91c4f9b103ee45885695c67794591916f34e000200000000000000000b43',\n    '0x402cfdb7781fa85d52f425352661128250b79e12000000000000000000000be3',\n    '0x43894de14462b421372bcfe445fa51b1b4a0ff3d000000000000000000000b36',\n    '0x4739e50b59b552d490d3fdc60d200977a38510c0000000000000000000000b10',\n    '0x48e6b98ef6329f8f0a30ebb8c7c960330d64808500000000000000000000075b',\n    '0x4a0b73f0d13ff6d43e304a174697e3d5cfd310a400020000000000000000091c',\n    '0x4a77ef015ddcd972fd9ba2c7d5d658689d090f1a000000000000000000000b38',\n    '0x4ae3661afa119892f0cc8c43edaf6a94989ac171000000000000000000000c06',\n    '0x4ccb966d8246240afb7a1a24628efb930870b1c40002000000000000000009fc',\n    '0x52cc8389c6b93d740325729cc7c958066cee4262000000000000000000000b0f',\n    '0x5b77107fcdf2b41903bab2bc555d4fc14cf7667d000000000000000000000b32',\n    '0x5bae72b75caab1f260d21bc028c630140607d6e8000000000000000000000ac6',\n    '0x600bd01b6526611079e12e1ff93aba7a3e34226f0000000000000000000009e4',\n    '0x63ce19ccd39930725b8a3d2733627804718ab83d000000000000000000000bf2',\n    '0x64efad69f099813021b41f4cac6e749fd55e188f000000000000000000000b39',\n    '0x6933ec1ca55c06a894107860c92acdfd2dd8512f000000000000000000000428',\n    '0x6abe4e7a497b8293c258389c1b00d177e4f257ed00010000000000000000080d',\n    '0x6c8c7fc50247a47038015eb1fd5dc105d05dafba000200000000000000000ba0',\n    '0x7079a25dec33be61bbd81b2fb69b468e80d3e72c0000000000000000000009ff',\n    '0x71bd10c2a590b5858f5576550c163976a48af906000000000000000000000b27',\n    '0x7c82a23b4c48d796dee36a9ca215b641c6a8709d000000000000000000000acd',\n    '0x7f4f4942f2a14b6ab7b08b10ada1aacede4ee8d4000200000000000000000b44',\n    '0x86aef31951e0a3a54333bd9e72f9a95587d058c5000200000000000000000912',\n    '0x882c7a84231484b3e9f3fd45ac04b1eb5d35b076000200000000000000000a91',\n    '0x894c82800526e0391e709c0983a5aea3718b7f6d000000000000000000000ac5',\n    '0x89b28a9494589b09dbccb69911c189f74fdadc5a000000000000000000000b33',\n    '0x89bb15076c9f2d86aa98ec6cffc1a71e31c38953000000000000000000000bf1',\n    '0x89f1146fee52b5d9166e9c83cc388b6d8f69f1380001000000000000000009e7',\n    '0x8a819a4cabd6efcb4e5504fe8679a1abd831dd8f00000000000000000000042d',\n    '0x8b58a1e7fff52001c22386c2918d45938a6a9be30001000000000000000008d9',\n    '0x8b8225bfedebaf1708c55743acb4ad43fd4d0f21000200000000000000000918',\n    '0x8fbd0f8e490735cfc3abf4f29cbddd5c3289b9a7000000000000000000000b5b',\n    '0x8fd39252d683fdb60bddd4df4b53c9380b496d59000200000000000000000b45',\n    '0x9321e2250767d79bab5aa06daa8606a2b3b7b4c5000000000000000000000bf4',\n    '0x949a12b95ec5b80c375b98963a5d6b33b0d0efff0002000000000000000009fe',\n    '0x9a020bdc2faff5bd24c6acc2020d01ff9f2c627a000000000000000000000ae2',\n    '0x9cf9358300e34bf9373d30129a1e718d8d058b54000200000000000000000913',\n    '0x9e34631547adcf2f8cefa0f5f223955c7b137571000000000000000000000ad5',\n    '0xa5a935833f6a5312715f182733eab088452335d7000100000000000000000bee',\n    '0xa5fe91dde37d8bf2dacacc0168b115d28ed03f84000000000000000000000b35',\n    '0xa8bf1c584519be0184311c48adbdc4c15cb2e8c1000000000000000000000bf6',\n    '0xab269164a10fab22bc87c39946da06c870b172d6000000000000000000000bfc',\n    '0xac2cae8d2f78a4a8f92f20dbe74042cd0a8d5af3000000000000000000000be2',\n    '0xae646817e458c0be890b81e8d880206710e3c44e000000000000000000000acb',\n    '0xaef2c171dbe64b0c18977e16e70bfd29d4ee0256000000000000000000000ac8',\n    '0xb0c830dceb4ef55a60192472c20c8bf19df03488000000000000000000000be1',\n    '0xb266ac3b7c98d7bcb28731dac0ef42dba1b276be000000000000000000000be4',\n    '0xb371aa09f5a110ab69b39a84b5469d29f9b22b76000000000000000000000b37',\n    '0xb3d658d5b95bf04e2932370dd1ff976fe18dd66a000000000000000000000ace',\n    '0xb54b2125b711cd183edd3dd09433439d5396165200000000000000000000075e',\n    '0xb59be8f3c85a9dd6e2899103b6fbf6ea405b99a4000000000000000000000b34',\n    '0xb878ecce26838fbba4f78cb5b791a0e09152c067000000000000000000000427',\n    '0xb973ca96a3f0d61045f53255e319aedb6ed4924000000000000000000000042f',\n    '0xbd4e35784c832d0f9049b54cb3609e5907c5b495000100000000000000000b14',\n    '0xc55ec796a4debe625d95436a3531f4950b11bdcf000000000000000000000b3e',\n    '0xc7e6389e364f4275eb442ef215ed21877028e2af000000000000000000000ac7',\n    '0xc83b55bbd005f1f84906545fcdb145dee53523e0000200000000000000000b30',\n    '0xcb21a9e647c95127ed784626485b3104cb28d0e7000000000000000000000425',\n    '0xd00f9ca46ce0e4a63067c4657986f0167b0de1e5000000000000000000000b42',\n    '0xd2f3b9e67c69762dd1c88f1d3dadd1649a190761000200000000000000000bf7',\n    '0xd4accb350f9cf59fe3cf7a5ee6ed9ace6a568ea9000200000000000000000b75',\n    '0xda1cd1711743e57dd57102e9e61b75f3587703da000000000000000000000acc',\n    '0xdae301690004946424e41051ace1791083be42a1000000000000000000000b40',\n    '0xde0a77ab6689b980c30306b10f9131a007e1af81000200000000000000000ba1',\n    '0xe051605a83deae38d26a7346b100ef1ac2ef8a0b0000000000000000000003ce',\n    '0xe1fb90d0d3b47e551d494d7ebe8f209753526b01000000000000000000000ac4',\n    '0xe2272cddb2cc408e79e02a73d1db9acc24a843d5000200000000000000000ba7',\n    '0xe2dc0e0f2c358d6e31836dee69a558ab8d1390e70000000000000000000009fa',\n    '0xe4885ed2818cc9e840a25f94f9b2a28169d1aea7000000000000000000000b29',\n    '0xe6909c2f18a29d97217a6146f045e1780606991f000100000000000000000bfe',\n    '0xe78b25c06db117fdf8f98583cdaaa6c92b79e917000000000000000000000b2b',\n    '0xea11645ac7d8f2def94c9d8d86bd766296c9b6b6000000000000000000000b3a',\n    '0xeb480dbbdd921cd6c359e4cc4c65ddea6395e2a1000200000000000000000946',\n    '0xed35f28f837e96f81240ebb82e0e3f518c7e8a2f000100000000000000000bb5',\n    '0xf0211cceebe6fcc45052b4e57ee95d233f5669d2000100000000000000000c01',\n    '0xf22a66046b5307842f21b311ecb4c462c24c0635000000000000000000000b15',\n    '0xf28f17be00f8ca3c9b7f66a4aad5513757fb3341000200000000000000000b5a',\n    '0xf42ed61450458ee4620f5ef4f29adb25a6ef0fb6000000000000000000000bf8',\n    '0xf48f01dcb2cbb3ee1f6aab0e742c2d3941039d56000000000000000000000445',\n    '0xf93579002dbe8046c43fefe86ec78b1112247bb8000000000000000000000759',\n    '0xf984eb2b8a7ef780245a797a2fccd82f346409ca000000000000000000000a59',\n    '0xfa2c0bd8327c99db5bde4c9e9e5cbf30946351bb000000000000000000000948',\n    '0xff4ce5aaab5a627bf82f4a571ab1ce94aa365ea600000000000000000000075a',\n  ],\n  [Network.ARBITRUM]: [\n    '0x00fcd3d55085e998e291a0005cedecf58ac14c4000020000000000000000047f',\n    '0x077794c30afeccdf5ad2abc0588e8cee7197b71a000000000000000000000352',\n    '0x117a3d474976274b37b7b94af5dcade5c90c6e85000000000000000000000381',\n    '0x11884da90fb4221b3aa288a7741c51ec4fc43b2f000000000000000000000353',\n    '0x19b1c92631405a0a9495ccba0becf4f2e8e908bd000000000000000000000410',\n    '0x1e550b7764da9638fdd32c8a701364de31f45ee800000000000000000000047c',\n    '0x1fa7f727934226aedab636d62a084931b97d366b000000000000000000000411',\n    '0x23ca0306b21ea71552b148cf3c4db4fc85ae19290000000000000000000000c9',\n    '0x284eb68520c8fa83361c1a3a5910aec7f873c18b000000000000000000000380',\n    '0x2a96254ca32020b20ed3506f8f75318da24709f9000200000000000000000456',\n    '0x36942963e3b6f37ecc45a4e72349558514233f0000000000000000000000048a',\n    '0x3f53a862919ccfa023cb6ace91378a79fb0f6bf500000000000000000000040f',\n    '0x40af308e3d07ec769d85eb80afb116525ff4ac99000000000000000000000485',\n    '0x418de00ae109e6f874d872658767866d680eaa1900000000000000000000047d',\n    '0x45c4d1376943ab28802b995acffc04903eb5223f000000000000000000000470',\n    '0x4689122d360c4725d244c5cfea22861333d862e6000100000000000000000468',\n    '0x4739e50b59b552d490d3fdc60d200977a38510c0000000000000000000000409',\n    '0x49a0e3334496442a9706e481617724e7e37eaa080000000000000000000003ff',\n    '0x519cce718fcd11ac09194cff4517f12d263be067000000000000000000000382',\n    '0x52cc8389c6b93d740325729cc7c958066cee4262000000000000000000000408',\n    '0x567ecfcb22205d279bb8eed3e066989902bf03d5000000000000000000000452',\n    '0x585d95df0231fa08aeee35ff0c16b92fd0ecdc3300020000000000000000045f',\n    '0x5a7f39435fd9c381e4932fa2047c9a5136a5e3e7000000000000000000000400',\n    '0x5bae72b75caab1f260d21bc028c630140607d6e8000000000000000000000350',\n    '0x6cb787a419c3e6ee2e9ff365856c29cd10659113000000000000000000000474',\n    '0x7c82a23b4c48d796dee36a9ca215b641c6a8709d000000000000000000000406',\n    '0x81fc12c60ee5b753cf5fd0adc342dfb5f3817e3200000000000000000000035d',\n    '0x894c82800526e0391e709c0983a5aea3718b7f6d00000000000000000000034f',\n    '0x970712708a08e8fb152be4d81b2dc586923f5369000200000000000000000479',\n    '0x9bf7c3b63c77b4b4f2717776f15a4bec1b532a280000000000000000000000c8',\n    '0x9cebf13bb702f253abf1579294694a1edad00eaa000000000000000000000486',\n    '0x9e34631547adcf2f8cefa0f5f223955c7b137571000000000000000000000407',\n    '0x9fb7d6dcac7b6aa20108bad226c35b85a9e31b63000200000000000000000412',\n    '0xa1ea76c42b2938cfa9abea12357881006c52851300000000000000000000048f',\n    '0xa50f89e9f439fde2a6fe05883721a00475da3c4500000000000000000000048b',\n    '0xa612b6aed2e7ca1a3a4f23fbca9128461bbb7718000000000000000000000274',\n    '0xa8af146d79ac0bb981e4e0d8b788ec5711b1d5d000000000000000000000047b',\n    '0xad28940024117b442a9efb6d0f25c8b59e1c950b00000000000000000000046f',\n    '0xae646817e458c0be890b81e8d880206710e3c44e00000000000000000000039d',\n    '0xaef2c171dbe64b0c18977e16e70bfd29d4ee0256000000000000000000000351',\n    '0xbbf9d705b75f408cfcaee91da32966124d2c6f7d00000000000000000000047e',\n    '0xbd724eb087d4cc0f61a5fed1fffaf937937e14de000000000000000000000473',\n    '0xbe0f30217be1e981add883848d0773a86d2d2cd4000000000000000000000471',\n    '0xc46be4b8bb6b5a3d3120660efae9c5416318ed40000000000000000000000472',\n    '0xc69771058481551261709d8db44977e9afde645000010000000000000000042a',\n    '0xc6eee8cb7643ec2f05f46d569e9ec8ef8b41b389000000000000000000000475',\n    '0xcba9ff45cfb9ce238afde32b0148eb82cbe635620000000000000000000003fd',\n    '0xcf8b555b7754556cf2ac2165e77ee23ed8517d7900020000000000000000045e',\n    '0xd0dc20e6342db2de82692b8dc842301ff9121805000200000000000000000454',\n    '0xd3d5d45f4edf82ba0dfaf061d230766032a10e07000200000000000000000413',\n    '0xd6d20527c7b0669989ee082b9d3a1c63af742290000000000000000000000483',\n    '0xda1cd1711743e57dd57102e9e61b75f3587703da0000000000000000000003fc',\n    '0xe1fb90d0d3b47e551d494d7ebe8f209753526b0100000000000000000000034e',\n    '0xee02583596aee94cccb7e8ccd3921d955f17982a00000000000000000000040a',\n    '0xf984eb2b8a7ef780245a797a2fccd82f346409ca00000000000000000000034d',\n    '0xff8f84e8c87532af96aef5582ee451572233678b000200000000000000000478',\n  ],\n  [Network.GNOSIS]: [\n    '0x1ac55c31dac78ca943cb8ebfca5945ce09e036e2000000000000000000000024',\n    '0x225e0047671939a8d78e08ebd692788abe63f15c000000000000000000000009',\n    '0x41211bba6d37f5a74b22e667533f080c7c7f3f1300000000000000000000000b',\n    '0x4de21b365d6543661d0e105e579a34b963862497000200000000000000000045',\n    '0x581ec1f5e7ced12b186deae32256adb53bdd5b08000000000000000000000001',\n    '0x66f33ae36dd80327744207a48122f874634b3ada000100000000000000000013',\n    '0xa3ed6f78edc29f69df8a0d16b1d1ccf9871f918c000000000000000000000032',\n    '0xa611a551b95b205ccd9490657acf7899daee5db700000000000000000000002e',\n    '0xb95829adbacd8af89e291dee78bc09e24de51d6b000000000000000000000043',\n    '0xb973ca96a3f0d61045f53255e319aedb6ed49240000200000000000000000011',\n    '0xba1a5b19d09a79dada039b1f974015c5a989d5fd000100000000000000000046',\n    '0xbb9cd48d33033f5effbedec9dd700c7d7e1dcf5000000000000000000000000e',\n    '0xd16f72b02da5f51231fde542a8b9e2777a478c8800000000000000000000000f',\n    '0xd4015683b8153666190e0b2bec352580ebc4caca00000000000000000000000d',\n    '0xe15cac1df3621e001f76210ab12a7f1a1691481f000000000000000000000044',\n    '0xe7f88d7d4ef2eb18fcf9dd7216ba7da1c46f3dd600000000000000000000000a',\n    '0xf48f01dcb2cbb3ee1f6aab0e742c2d3941039d56000200000000000000000012',\n    '0xfedb19ec000d38d92af4b21436870f115db22725000000000000000000000010',\n    '0xffff76a3280e95dc855696111c2562da09db2ac000000000000000000000000c',\n  ],\n  [Network.ZKEVM]: [\n    '0x02c9dcb975262719a61f9b40bdf0987ead9add3a000000000000000000000006',\n    '0x16c9a4d841e88e52b51936106010f27085a529ec00000000000000000000000c',\n    '0x32be2d0ddeaf3333501b24a28668ce373ba8e763000200000000000000000014',\n    '0x32f03464fdf909fdf3798f87ff3712b10c59bd86000000000000000000000005',\n    '0x4b718e0e2fea1da68b763cd50c446fba03ceb2ea00000000000000000000000b',\n    '0x68a69c596b3839023c0e08d09682314f582314e5000200000000000000000011',\n    '0x6f34a44fce1506352a171232163e7716dd073ade000200000000000000000015',\n    '0x9e2d87f904862671eb49cb358e74284762cc9f42000200000000000000000013',\n    '0xac4b72c01072a52b73ca71105504f1372efcce0d000000000000000000000003',\n    '0xbfd65c6160cfd638a85c645e6e6d8acac5dac935000000000000000000000004',\n    '0xe274c9deb6ed34cfe4130f8d0a8a948dea5bb28600000000000000000000000d',\n  ],\n  [Network.AVALANCHE]: [\n    '0x054e7b0c73e1ee5aed6864fa511658fc2b54bcaa000000000000000000000015',\n    '0x3f1a2c4a3a751f6626bd90ef16e104f0772d4d6b00020000000000000000001b',\n    '0x7275c131b1f67e8b53b4691f92b0e35a4c1c6e22000000000000000000000010',\n    '0xa154009870e9b6431305f19b09f9cfd7284d4e7a000000000000000000000013',\n    '0xa1d14d922a575232066520eda11e27760946c991000000000000000000000012',\n    '0xa826a114b0c7db4d1ff4a4be845a78998c64564c000000000000000000000008',\n    '0xea67626e1f0b59e0d172a04f5702ef90bcdf440c00000000000000000000000f',\n    '0xeb496161099d45b3ea4892408ef745c6182eb56e00000000000000000000000e',\n    '0xece571847897fd61e764d455dc15cf1cd9de8d6f000000000000000000000014',\n    '0xed3e2f496cbcd8e212192fb8d1499842f04a0d19000000000000000000000009',\n  ],\n  [Network.BASE]: [],\n  [Network.SEPOLIA]: [\n    '0x027a946ac5a861b66a50cca0e8fb8766718b485100000000000000000000002c',\n  ],\n  [Network.FANTOM]: [],\n  [Network.GOERLI]: [],\n  [Network.OPTIMISM]: [],\n  [Network.TELOSTESTNET]: [],\n};\n\nexport const HIGH_RISK_POOL_IDS: string[] = [\n  '0xf48f01dcb2cbb3ee1f6aab0e742c2d3941039d56000200000000000000000012',\n  '0xbf2ef8bdc2fc0f3203b3a01778e3ec5009aeef3300000000000000000000058d',\n  '0x99c88ad7dc566616548adde8ed3effa730eb6c3400000000000000000000049a',\n  '0xfedb19ec000d38d92af4b21436870f115db22725000000000000000000000010',\n  '0xffff76a3280e95dc855696111c2562da09db2ac000000000000000000000000c',\n  '0xbb9cd48d33033f5effbedec9dd700c7d7e1dcf5000000000000000000000000e',\n  '0x4a82b580365cff9b146281ab72500957a849abdc000000000000000000000494',\n  '0xd16f72b02da5f51231fde542a8b9e2777a478c8800000000000000000000000f',\n  '0x60683b05e9a39e3509d8fdb9c959f23170f8a0fa000000000000000000000489',\n  '0xe03af00fabe8401560c1ff7d242d622a5b601573000000000000000000000493',\n  '0xb3d658d5b95bf04e2932370dd1ff976fe18dd66a000000000000000000000ace',\n  '0xa13a9247ea42d743238089903570127dda72fe4400000000000000000000035d',\n  '0x2b218683178d029bab6c9789b1073aa6c96e517600000000000000000000058c',\n  '0xb973ca96a3f0d61045f53255e319aedb6ed49240000200000000000000000011',\n  '0x66f33ae36dd80327744207a48122f874634b3ada000100000000000000000013',\n  '0x7c82a23b4c48d796dee36a9ca215b641c6a8709d000000000000000000000acd',\n  '0x2ff1a9dbdacd55297452cfd8a4d94724bc22a5f7000000000000000000000484',\n  '0x2f4eb100552ef93840d5adc30560e5513dfffacb000000000000000000000334',\n  '0xc0064b291bd3d4ba0e44ccfc81bf8e7f7a579cd200000000000000000000042c',\n  '0x7b50775383d3d6f0215a8f290f2c9e2eebbeceb20000000000000000000000fe',\n  '0x25accb7943fd73dda5e23ba6329085a3c24bfb6a000200000000000000000387',\n  '0x50cf90b954958480b8df7958a9e965752f62712400000000000000000000046f',\n  '0x41211bba6d37f5a74b22e667533f080c7c7f3f1300000000000000000000000b',\n  '0xe7f88d7d4ef2eb18fcf9dd7216ba7da1c46f3dd600000000000000000000000a',\n  '0x133d241f225750d2c92948e464a5a80111920331000000000000000000000476',\n  '0xdba274b4d04097b90a72b62467d828cefd708037000000000000000000000486',\n  '0x2bbf681cc4eb09218bee85ea2a5d3d13fa40fc0c0000000000000000000000fd',\n  '0xbc0f2372008005471874e426e86ccfae7b4de79d000000000000000000000485',\n  '0xae646817e458c0be890b81e8d880206710e3c44e000000000000000000000acb',\n  '0xd4015683b8153666190e0b2bec352580ebc4caca00000000000000000000000d',\n  '0xc3bf643799237588b7a6b407b3fc028dd4e037d200000000000000000000022d',\n  '0x3c640f0d3036ad85afa2d5a9e32be651657b874f00000000000000000000046b',\n  '0xd4e7c1f3da1144c9e2cfd1b015eda7652b4a439900000000000000000000046a',\n  '0xeb486af868aeb3b6e53066abc9623b1041b42bc000000000000000000000046c',\n  '0x82698aecc9e28e9bb27608bd52cf57f704bd1b83000000000000000000000336',\n  '0xae37d54ae477268b9997d4161b96b8200755935c000000000000000000000337',\n  '0x23ca0306b21ea71552b148cf3c4db4fc85ae19290000000000000000000000ac',\n  '0x48e6b98ef6329f8f0a30ebb8c7c960330d64808500000000000000000000075b',\n  '0xda1cd1711743e57dd57102e9e61b75f3587703da000000000000000000000acc',\n  '0xa8af146d79ac0bb981e4e0d8b788ec5711b1d5d000000000000000000000047b',\n  '0x9210f1204b5a24742eba12f710636d76240df3d00000000000000000000000fc',\n  '0x804cdb9116a10bb78768d3252355a1b18067bf8f0000000000000000000000fb',\n  '0xff4ce5aaab5a627bf82f4a571ab1ce94aa365ea600000000000000000000075a',\n  '0x62cf35db540152e94936de63efc90d880d4e241b0000000000000000000000ef',\n  '0x6e6dc948ce85c62125ff7a1e543d761a88f0a4cb000000000000000000000743',\n  '0x284eb68520c8fa83361c1a3a5910aec7f873c18b000000000000000000000380',\n  '0xb96c5bada4bf6a70e71795a3197ba94751dae2db00000000000000000000007d',\n  '0x62ec8b26c08ffe504f22390a65e6e3c1e45e987700000000000000000000007e',\n  '0x8a6b25e33b12d1bb6929a8793961076bd1f9d3eb0002000000000000000003e8',\n  '0xa611a551b95b205ccd9490657acf7899daee5db700000000000000000000002e',\n  '0x92502cd8e00f5b8e737b2ba203fdd7cd27b23c8f000000000000000000000718',\n  '0xedcfaf390906a8f91fb35b7bac23f3111dbaee1c00000000000000000000007c',\n  '0x20715545c15c76461861cb0d6ba96929766d05a50000000000000000000000e8',\n  '0xf970659221bb9d01b615321b63a26e857ffc030b0000000000000000000000e9',\n  '0x78ab08bf98f90f29a09c9b1d85b3b549369b03a3000100000000000000000354',\n  '0x098f32d98d0d64dba199fc1923d3bf4192e787190001000000000000000000d2',\n  '0xf93579002dbe8046c43fefe86ec78b1112247bb8000000000000000000000759',\n  '0x178e029173417b1f9c8bc16dcec6f697bc323746000000000000000000000758',\n  '0x302b8b64795b064cadc32f74993a6372498608070001000000000000000003e0',\n  '0x5ddb92a5340fd0ead3987d3661afcd6104c3b757000000000000000000000187',\n  '0x2ff1552dd09f87d6774229ee5eca60cf570ae291000000000000000000000186',\n  '0x117a3d474976274b37b7b94af5dcade5c90c6e85000000000000000000000381',\n  '0x43da214fab3315aa6c02e0b8f2bfb7ef2e3c60a50000000000000000000000ae',\n  '0xb5ad7d6d6f92a77f47f98c28c84893fbccc9480900000000000000000000006c',\n  '0x71959b131426fdb7af01de8d7d4149ccaf09f8cc0000000000000000000002e7',\n  '0x7e9250cc13559eb50536859e8c076ef53e275fb30000000000000000000000ce',\n  '0xdfc65c1f15ad3507754ef0fd4ba67060c108db7e000000000000000000000406',\n  '0x6da14f5acd58dd5c8e486cfa1dc1c550f5c61c1c0000000000000000000003cf',\n  '0x88d07558470484c03d3bb44c3ecc36cafcf43253000000000000000000000051',\n  '0x592fa9f9d58065096f2b7838709c116957d7b5cf00020000000000000000043c',\n  '0x6af3737f6d58ae8bcb9f2b597125d37244596e590000000000000000000000d1',\n  '0x6f34a44fce1506352a171232163e7716dd073ade000200000000000000000015',\n  '0xb1c9ac57594e9b1ec0f3787d9f6744ef4cb0a02400000000000000000000006e',\n  '0xf47f4d59c863c02cbfa3eefe6771b9c9fbe7b97800000000000000000000072b',\n  '0xff2753aaba51c9f84689b9bd0a21b3cf380a1cff00000000000000000000072e',\n  '0x685056d3a4e574b163d0fa05a78f1b0b3aa04a8000000000000000000000071a',\n  '0xde45f101250f2ca1c0f8adfc172576d10c12072d00000000000000000000003f',\n  '0xe274c9deb6ed34cfe4130f8d0a8a948dea5bb28600000000000000000000000d',\n  '0x10441785a928040b456a179691141c48356eb3a50001000000000000000002fa',\n  '0x64b301e21d640f9bef90458b0987d81fb4cf1b9e00020000000000000000022e',\n  '0x959216bb492b2efa72b15b7aacea5b5c984c3cca000200000000000000000472',\n  '0x7cf76bccfa5d3340d42f08351552f5a59dc6089c000000000000000000000396',\n  '0x126e7643235ec0ab9c103c507642dc3f4ca23c66000000000000000000000468',\n  '0xba7834bb3cd2db888e6a06fb45e82b4225cd0c71000000000000000000000043',\n  '0x077794c30afeccdf5ad2abc0588e8cee7197b71a000000000000000000000352',\n  '0x4b718e0e2fea1da68b763cd50c446fba03ceb2ea00000000000000000000000b',\n  '0x05e7732bf9ae5592e6aa05afe8cd80f7ab0a7bea00020000000000000000005a',\n  '0x981fb05b738e981ac532a99e77170ecb4bc27aef00010000000000000000004b',\n  '0xba0e9aea8a7fa1daab4edf244191f2387a4e472b000100000000000000000737',\n  '0xdd89c7cd0613c1557b2daac6ae663282900204f100000000000000000000003e',\n  '0x6222ae1d2a9f6894da50aa25cb7b303497f9bebd000000000000000000000046',\n  '0xfe0004ca84bac1d9cf24a3270bf70be7e68e43ac0000000000000000000003c5',\n  '0x42538ce99111ea34dc2987b141bd6e9b594752d60000000000000000000002f9',\n  '0x3c74c4ed512050eb843d89fb9dcd5ebb4668eb6d0002000000000000000000cc',\n  '0x3b998ba87b11a1c5bc1770de9793b17a0da61561000000000000000000000185',\n  '0xe1fb90d0d3b47e551d494d7ebe8f209753526b0100000000000000000000034e',\n  '0x5bae72b75caab1f260d21bc028c630140607d6e8000000000000000000000350',\n  '0x519cce718fcd11ac09194cff4517f12d263be067000000000000000000000382',\n  '0x9253d7e1b42fa01ede2c53f3a21b3b4d13239cd4000000000000000000000042',\n  '0x16c9a4d841e88e52b51936106010f27085a529ec00000000000000000000000c',\n  '0x1e2576344d49779bdbb71b1b76193d27e6f996b700020000000000000000032d',\n  '0x72d6df381cac8c2283c0b13fe5262a1f5e8e8d1b0000000000000000000000cb',\n  '0xb54b2125b711cd183edd3dd09433439d5396165200000000000000000000075e',\n  '0x894c82800526e0391e709c0983a5aea3718b7f6d00000000000000000000034f',\n  '0x5bdd8c19b44c3e4a15305601a2c9841bde9366f00000000000000000000000ca',\n  '0xa1a77e5d7d769bfbb790a08ec976dc738bf795b9000000000000000000000047',\n  '0xa10285f445bcb521f1d623300dc4998b02f11c8f00000000000000000000043b',\n  '0x888a6195d42a95e80d81e1c506172772a80b80bc000000000000000000000044',\n  '0xc385e76e575b2d71eb877c27dcc1608f77fada99000000000000000000000719',\n  '0x9b692f571b256140a39a34676bffa30634c586e100000000000000000000059d',\n  '0x56897add6dc6abccf0ada1eb83d936818bc6ca4d0002000000000000000002e8',\n  '0x44165fad0b7ea0d54d8856765d936d7026f9e2f20000000000000000000002f8',\n  '0xb0de49429fbb80c635432bbad0b3965b2856017700010000000000000000004e',\n  '0x428e1cc3099cf461b87d124957a0d48273f334b100000000000000000000007f',\n  '0x359ea8618c405023fc4b98dab1b01f373792a12600010000000000000000004f',\n  '0xd997f35c9b1281b82c8928039d14cddab5e13c2000000000000000000000019c',\n  '0xcaa052584b462198a5a9356c28bce0634d65f65c0000000000000000000004db',\n  '0x68a69c596b3839023c0e08d09682314f582314e5000200000000000000000011',\n  '0x2e0d46d884af4053787e1838793bf98dcb87488e00020000000000000000072c',\n  '0x7fe29a818438ed2759e30f65c2302295711d66fc0000000000000000000000e5',\n  '0xdc2007d9e9a33f50630f26069faab69c25f7758c0000000000000000000000d6',\n  '0x4fd63966879300cafafbb35d157dc5229278ed230000000000000000000000e9',\n  '0xc8c79fcd0e859e7ec81118e91ce8e4379a481ee6000000000000000000000196',\n  '0x70b7d3b3209a59fb0400e17f67f3ee8c37363f4900020000000000000000018f',\n  '0x442988091cdc18acb8912cd3fe062cda9233f9dc00000000000000000000071d',\n  '0x7449f09c8f0ed490472d7c14b4eef235620d027000010000000000000000072d',\n  '0x159cb00338fb63f263fd6f621df619cef71da9540000000000000000000004d5',\n  '0xc5dc1316ab670a2eed5716d7f19ced321191f38200000000000000000000056e',\n  '0xa4e597c1bd01859b393b124ce18427aa4426a87100000000000000000000004c',\n  '0x1f131ec1175f023ee1534b16fa8ab237c00e238100000000000000000000004a',\n  '0xd0d334b6cfd77acc94bab28c778398238785644900000000000000000000004d',\n  '0x4ce0bd7debf13434d3ae127430e9bd4291bfb61f00020000000000000000038b',\n  '0x8f4063446f5011bc1c9f79a819efe87776f23704000000000000000000000197',\n  '0x335d1709d4da9aca59d16328db5cd4ea66bfe06b0000000000000000000004d6',\n  '0xa0051ab2c3eb7f17758428b02a07cf72eb0ef1a300000000000000000000071c',\n  '0x3fcb7085b8f2f473f80bf6d879cae99ea4de934400000000000000000000056d',\n  '0x8c63702d4d4a521a6a8ecec8ab8f7ce9d1d6299e000200000000000000000443',\n  '0xa3823e50f20982656557a4a6a9c06ba5467ae9080000000000000000000000e6',\n  '0xe6bcc79f328eec93d4ec8f7ed35534d9ab549faa0000000000000000000000e8',\n  '0x652d486b80c461c397b0d95612a404da936f3db30000000000000000000000e7',\n  '0x7337224d59cb16c2dc6938cd45a7b2c60c865d6a0000000000000000000004d4',\n  '0xa718042e5622099e5f0ace4e7122058ab39e1bbe000200000000000000000475',\n  '0x479a7d1fcdd71ce0c2ed3184bfbe9d23b92e8337000000000000000000000049',\n  '0x4a0b73f0d13ff6d43e304a174697e3d5cfd310a400020000000000000000091c',\n  '0x334c96d792e4b26b841d28f53235281cec1be1f200020000000000000000038a',\n  '0x3c1420df122ac809b9d1ba77906f833764d6450100000000000000000000071b',\n  '0xc0d7013a05860271a1edb52415cf74bc85b2ace7000000000000000000000048',\n  '0x173063a30e095313eee39411f07e95a8a806014e0002000000000000000003ab',\n  '0xb85a3fc39993b2e7e6874b8700b436c212a005160000000000000000000003d0',\n  '0x1352fd97a1828093bf375f62e088bc196facd1ee000000000000000000000404',\n  '0xd7edb56f63b2a0191742aea32df1f98ca81ed9c600000000000000000000058e',\n  '0xa5a935833f6a5312715f182733eab088452335d7000100000000000000000bee',\n  '0xff09914bf3d1f61ff3468cfcc4529665b908afa3000100000000000000000741',\n  '0xb841b062ea8ccf5c4cb78032e91de4ae875560420002000000000000000005b7',\n  '0xac976bb42cb0c85635644e8c7c74d0e0286aa61c0000000000000000000003cb',\n  '0x4fd4687ec38220f805b6363c3c1e52d0df3b5023000200000000000000000473',\n  '0xb973ca96a3f0d61045f53255e319aedb6ed4924000000000000000000000042f',\n  '0x5b3240b6be3e7487d61cd1afdfc7fe4fa1d81e6400000000000000000000037b',\n  '0x0392ebb4aea38233e5b89acfabf7b418cdea8e4300010000000000000000073f',\n  '0x246ffb4d928e394a02e45761fecdba6c2e79b8eb000000000000000000000541',\n  '0x3035917be42af437cbdd774be26b9ec90a2bd677000200000000000000000543',\n  '0x4c8d2e60863e8d7e1033eda2b3d84e92a641802000000000000000000000040f',\n  '0x3dbb8d974b82e82ce79c20c0f5995f4f1f533ede000000000000000000000470',\n  '0x52cc8389c6b93d740325729cc7c958066cee4262000000000000000000000b0f',\n  '0x8a819a4cabd6efcb4e5504fe8679a1abd831dd8f00000000000000000000042d',\n  '0x483006684f422a9448023b2382615c57c5ecf18f000000000000000000000488',\n  '0xe1c86d3908dc524aa3555e56adf973de7d3acdba000100000000000000000267',\n  '0x624601b34e64a48ef91a6bf888e74ef3eceb1bf9000100000000000000000419',\n  '0x31adc46737ebb8e0e4a391ec6c26438badaee8ca000000000000000000000306',\n  '0x71bd10c2a590b5858f5576550c163976a48af906000000000000000000000b27',\n  '0x0503dd6b2d3dd463c9bef67fb5156870af63393e00000000000000000000042e',\n  '0xa55318e5d8b7584b8c0e5d3636545310bf9eeb8f000000000000000000000337',\n  '0x9b1c8407a360443a9e5eca004713e4088fab8ac0000000000000000000000497',\n  '0x53bc3cba3832ebecbfa002c12023f8ab1aa3a3a0000000000000000000000411',\n  '0xfd11ccdbdb7ab91cb9427a6d6bf570c95876d1950000000000000000000004c2',\n  '0xbfa413a2ff0f20456d57b643746133f54bfe0cd20000000000000000000004c3',\n  '0xd6e355036f41dc261b3f1ed3bbc6003e87aadb4f000000000000000000000495',\n  '0xdc063deafce952160ec112fa382ac206305657e60000000000000000000004c4',\n  '0x00c2a4be503869fa751c2dbcb7156cc970b5a8da000000000000000000000477',\n  '0xf71d0774b214c4cf51e33eb3d30ef98132e4dbaa00000000000000000000046e',\n  '0x20b156776114e8a801e9767d90c6ccccc8adf398000000000000000000000499',\n  '0x779d01f939d78a918a3de18cc236ee89221dfd4e0000000000000000000004c7',\n  '0xba1a5b19d09a79dada039b1f974015c5a989d5fd000100000000000000000046',\n  '0x8e6ec57a822c2f527f2df7c7d7d361df3e7530a1000000000000000000000498',\n  '0x8d13d878e44e8005efc0db4a831b95f84cb4b1540000000000000000000003c6',\n  '0xb0f75e97a114a4eb4a425edc48990e6760726709000000000000000000000198',\n  '0x6a1eb2e9b45e772f55bd9a34659a04b6f75da68700000000000000000000040d',\n  '0xb5e3de837f869b0248825e0175da73d4e8c3db6b000200000000000000000474',\n  '0xe15cac1df3621e001f76210ab12a7f1a1691481f000000000000000000000044',\n  '0x9a020bdc2faff5bd24c6acc2020d01ff9f2c627a000000000000000000000ae2',\n  '0xb9bd68a77ccf8314c0dfe51bc291c77590c4e9e6000200000000000000000385',\n  '0xeb480dbbdd921cd6c359e4cc4c65ddea6395e2a1000200000000000000000946',\n  '0x93c7defe51d787010babfdb19504d5a72166e11200020000000000000000041c',\n  '0x4739e50b59b552d490d3fdc60d200977a38510c0000000000000000000000b10',\n  '0x62de5ca16a618e22f6dfe5315ebd31acb10c44b6000000000000000000000037',\n  '0x10b040038f87219d9b42e025e3bd9b8095c87dd9000000000000000000000b11',\n  '0x30c016f5cf1d34c1bce4c8c9c302f66a268847fd0001000000000000000003f6',\n  '0x9321e2250767d79bab5aa06daa8606a2b3b7b4c5000000000000000000000bf4',\n  '0x1aafc31091d93c3ff003cff5d2d8f7ba2e7284250000000000000000000003b3',\n  '0xd90dc295d571adc7575563d892aa96ac3811d21c000200000000000000000402',\n  '0x3e9cbffd270ae67abb09d28988e7e785498c73730000000000000000000000ee',\n  '0xbef1ccaada458a570c37b11a8872988ba1e4fdb90000000000000000000000dd',\n  '0x55b1f937b1335be355c82e207fd437182c986ba10000000000000000000000dc',\n  '0x4de21b365d6543661d0e105e579a34b963862497000200000000000000000045',\n  '0xdc910e2647caae5f63a760b70a2308e1c90d88860000000000000000000006ef',\n  '0x75062a04a8cc587c588a6bb50bd0cc009da483dc000000000000000000000035',\n  '0xb8b0e5e9f8b740b557e7c26fcbc753523a718a870000000000000000000006ee',\n  '0x48ace81c09382bfc08ed102e7eadd37e3b0497520000000000000000000000ec',\n  '0xb85245929dc65b5eddb56c4b4e84b20bce69db350000000000000000000000da',\n  '0x9e34631547adcf2f8cefa0f5f223955c7b137571000000000000000000000ad5',\n  '0x64cee2338369aa9b36fc756ea231eb9bc242926f0000000000000000000000df',\n  '0x3db543faf7a92052de7860c5c9debabee59ed5bd000000000000000000000a62',\n  '0xe2dc0e0f2c358d6e31836dee69a558ab8d1390e70000000000000000000009fa',\n  '0x8fe33d737484ca194dedf64aafa8485327fc53720000000000000000000000d8',\n  '0xa5d4802b4ce6b745b0c9e1b4a79c093d197869c80000000000000000000000ea',\n  '0x8e58191cb73b283af2d7a8ef3f9ce1544db2b8280000000000000000000005ee',\n  '0xd32f78f5ae235269c6d2cabbd26a57ff9fd629670000000000000000000000db',\n  '0xf22a66046b5307842f21b311ecb4c462c24c0635000000000000000000000b15',\n  '0x055a4cfa8cd9ced1d7bc9ae5eb46c404c130e46d0000000000000000000000cd',\n  '0x2e2b8b82123789d895fd79913f6dfa51f5b5a0e60000000000000000000000eb',\n  '0x654def39262548cc958d07c82622e23c52411c820000000000000000000006ec',\n  '0x8025586ac5fb265a23b9492e7414beccc2059ec30000000000000000000000ed',\n  '0xd69959fa7910ceb3a2d359ed33cb8297670b69370000000000000000000005b2',\n  '0x3f7a7fd7f214be45ec26820fd01ac3be4fc75aa70002000000000000000004c5',\n  '0x9964b1bd3cc530e5c58ba564e45d45290f677be2000000000000000000000036',\n  '0xa9cb51abfbbf2ca877b290e988b453f8bf4ab630000000000000000000000430',\n  '0xf86785fe1cefd5069e6df1b4b54b72b1992003110000000000000000000005b3',\n  '0x55e0499d268858a5e804d7864dc2a6b4ef194c630000000000000000000005b1',\n  '0xf7705cd188a8ac806d28f85bdb13a38313e985ff0000000000000000000005b7',\n  '0x2c4a83f98d1cdbeeec825fabacd09c46e2dd3c570002000000000000000000de',\n  '0x8003eec4add35c6d23eb1ef61b4fa6bbbb23a41a0000000000000000000000d9',\n  '0x015f34e47ca0a88675098c4d6601817403f07a32000200000000000000000723',\n  '0xbd4e35784c832d0f9049b54cb3609e5907c5b495000100000000000000000b14',\n  '0xa9a1f2f7407ce27bcef35d04c47e079e7d6d399e0000000000000000000005b6',\n  '0x8b6d3aa69c1cf47677281691b1abf3831ba1329d0001000000000000000000d0',\n  '0xe051605a83deae38d26a7346b100ef1ac2ef8a0b0000000000000000000003ce',\n  '0xe0b50b0635b90f7021d2618f76ab9a31b92d009400010000000000000000003a',\n  '0xce9329f138cd6319fcfbd8704e6ae50b6bb04f31000000000000000000000033',\n  '0x57793d39e8787ee6295f6a27a81b6cca68e85cdf000000000000000000000397',\n  '0x8a2872fd28f42bd9f6559907235e83fbf4167f480001000000000000000000f2',\n  '0x362715c164d606682c4ea7e479633e419d9345eb0001000000000000000000e7',\n  '0xac6286126044e2ee2589d394a102cb54b7ab15a7000200000000000000000629',\n  '0xd4500f270880488a481de1b3256a19b3d9c8fd7e000000000000000000000710',\n  '0xcd7b2232b7435595bbc7fd7962f1f352fc2cc61a0000000000000000000000f0',\n  '0x15873081c0aa67ad5c5dba362169d352e2a128a2000000000000000000000032',\n  '0xf572649606db4743d217a2fa6e8b8eb79742c24a000000000000000000000039',\n  '0xb4aae62a3f10717b9c649ed5ce099d981e5dca8c00000000000000000000042b',\n  '0xe191504f9127deb015910768c8a6ac71d185bf91000200000000000000000603',\n  '0xecc53ac812123d471360ea3d90023318868b56a5000000000000000000000429',\n  '0xbec621c9ab4ceddcc2a157ca9b5c475fab65f6a40000000000000000000000f3',\n  '0xd6d20527c7b0669989ee082b9d3a1c63af742290000000000000000000000483',\n  '0xd3e47cbdb2a9c1b1deb857c6415b87fce63a4bf5000000000000000000000034',\n  '0xd3f155d7f421414dc4177e54e4308274dfa8b9680000000000000000000006ed',\n  '0x91e96deddca930669feb699d16cc3416289ec7aa000100000000000000000748',\n  '0xdb455199d96d5513d831f0029bd819597bc9d158000200000000000000000728',\n  '0x230112fa4b07234769fc92bd616c8c77f4fe0e5300000000000000000000042a',\n  '0xc46066ff87b3861ffc5c26ad2e9705190c22aa56000000000000000000000727',\n  '0x5470f064a19c65263b3033da3a6124fdf0a9bab80000000000000000000000e6',\n  '0xcb89e89d798a4563d1599ea5508282e13b225b520000000000000000000000e4',\n  '0x11839d635e2f0270da37e8ef4324d4d5d54329570002000000000000000004d8',\n  '0xe94c45de980f914904fdcfa9fbbe7c4a0ffe6ac70000000000000000000000e0',\n  '0x904018c54b2382929b15abaae55136a392af4294000100000000000000000729',\n  '0x7d6bff131b359da66d92f215fd4e186003bfaa42000000000000000000000058',\n  '0x2b4af4bb149cc06f5de580be013e86f81e4d2b30000100000000000000000373',\n  '0xfbf87d2c22d1d298298ab5b0ec957583a2731d15000000000000000000000052',\n  '0x3dd0843a028c86e0b760b1a76929d1c5ef93a2dd00000000000000000000070d',\n  '0x23ca0306b21ea71552b148cf3c4db4fc85ae19290000000000000000000000c9',\n  '0xe6909c2f18a29d97217a6146f045e1780606991f000100000000000000000bfe',\n  '0x0c06e87c7b88d998f645b91c1f53b51294b12bca000100000000000000000bb9',\n  '0x2ba7aa2213fa2c909cd9e46fed5a0059542b36b00000000000000000000003a3',\n  '0xeb38aa08bc00ba68237543d2daa1476b4dfd37f800000000000000000000073a',\n  '0xf0211cceebe6fcc45052b4e57ee95d233f5669d2000100000000000000000c01',\n  '0x252ff6a3a6fd7b5e8e999de8e3f5c3b306ed1401000200000000000000000bec',\n  '0xf51776b52dfb5bf9a7f3ed150c20e78d4dff6e640002000000000000000004e9',\n  '0x6abe4e7a497b8293c258389c1b00d177e4f257ed00010000000000000000080d',\n  '0xe0042e7ee284ff355622b7660ccb34be114936fa000100000000000000000400',\n  '0x547e9ad4b824f09e9cf1c6d163cf308d4cf998120001000000000000000003c9',\n  '0xfe48fefea11cceb3bdeb328428f1b25446edad700001000000000000000003d2',\n  '0xcf87708ea94916d7ccd13b86ce56006472d806fe000100000000000000000378',\n  '0x89f1146fee52b5d9166e9c83cc388b6d8f69f1380001000000000000000009e7',\n  '0x4b18597d3f7c9786a133827572e6a318d55c9fd200020000000000000000028b',\n  '0xea52e5eb660ba64b9ba10ad9ae55a8156aa4d29a0002000000000000000003a2',\n  '0xf52fc9d5aa16c782c9ba51be0da10f1ccf05c702000100000000000000000394',\n  '0x968024662b9566b42d78af23a0f441bc8723fa83000200000000000000000418',\n  '0x600bd01b6526611079e12e1ff93aba7a3e34226f0000000000000000000009e4',\n  '0x8d7ca68d9a33148daf3ad1a495ed290f4eee013e0001000000000000000003b9',\n  '0x9e2d87f904862671eb49cb358e74284762cc9f42000200000000000000000013',\n  '0x5a6a8cffb4347ff7fc484bf5f0f8a2e234d34255000200000000000000000275',\n  '0x32be2d0ddeaf3333501b24a28668ce373ba8e763000200000000000000000014',\n  '0xff600724d670727872a1f7483049326c111d993d000100000000000000000448',\n  '0x7839210cd48356bdd6fd400e30cfc7140e1e5ad6000100000000000000000449',\n  '0x59cfc2307e8b218c242ba61407a07cade73bd6d7000100000000000000000585',\n  '0xea256adb68dffd067d27e95f4ad14eba12e86079000100000000000000000586',\n  '0x4c36a9a52ca3baf1069e3531d57d96c171a66a230002000000000000000001e9',\n  '0x980dfa8bd5c4a96e1b762fe8154b8a2045dab2d70002000000000000000003ef',\n  '0x2a96254ca32020b20ed3506f8f75318da24709f9000200000000000000000456',\n  '0x2c8dbe8eb86135d9f2f26d196748c088d47f73e7000200000000000000000a29',\n  '0x341068a547c3cde3c09e338714010dd01b32f93f000200000000000000000a34',\n  '0x150e7b885bdfce974f2abe88a72fdbd692175c6f0002000000000000000009fd',\n  '0x4ccb966d8246240afb7a1a24628efb930870b1c40002000000000000000009fc',\n  '0x02e139d53ebf4033bf78ab66c6a1e7f1f204487f0002000000000000000009f9',\n  '0x53dd233c2af0147846579010b7c80bf9440afff4000200000000000000000602',\n  '0x9cf9358300e34bf9373d30129a1e718d8d058b54000200000000000000000913',\n  '0x05513ca725b6ce035ca2641075474eb469f05f4c00020000000000000000041f',\n  '0x8b8225bfedebaf1708c55743acb4ad43fd4d0f21000200000000000000000918',\n  '0x559d2ac340216e3a6630741147cda6a2cdbc2be10001000000000000000005de',\n  '0x8b58a1e7fff52001c22386c2918d45938a6a9be30001000000000000000008d9',\n  '0x6c56e72c551b5ac4bf54a620a76077ca768c8fe40002000000000000000004da',\n  '0x88e2a551655daadd7e4e67d14cf48bfb413d72680001000000000000000005d2',\n  '0xf227486361252907cb768142a2f4caed08a3d7cb0001000000000000000005dd',\n  '0x50fd4d5d60d6df38f5e29721bc241b537e182bf40002000000000000000005f9',\n  '0xa5eb9166679a85bdb3eaa2941ed35c8d909484db00020000000000000000052b',\n  '0x174d2608b1d794e9078ae2a4861684a38d4e7ae200020000000000000000065b',\n  '0x0a0fb4ff697de5ac5b6770cd8ee1b72af80b57cf000000000000000000000496',\n  '0x0afbd58beca09545e4fb67772faf3858e610bcd00000000000000000000004b9',\n  '0x0d05aac44ac7dd3c7ba5d50be93eb884a057d23400000000000000000000051c',\n  '0x331d50e0b00fc1c32742f151e56b9b616227e23e00000000000000000000047c',\n  '0x395d8a1d9ad82b5abe558f8abbfe183b27138af40000000000000000000004e5',\n  '0x3bb22fc9033b802f2ac47c18885f63476f158afc000000000000000000000483',\n  '0x3cdae4f12a67ba563499e102f309c73213cb241c000000000000000000000335',\n  '0x454ed96955d04d2f5cdd05e0fd1c77975bfe5307000000000000000000000410',\n  '0x4ce277df0feb5b4d07a0ca2adcf5326e4005239d000000000000000000000518',\n  '0x74cbfaf94a3577c539a9dcee9870a6349a33b34f000000000000000000000534',\n  '0x813e3fe1761f714c502d1d2d3a7cceb33f37f59d00000000000000000000040c',\n  '0x9516a2d25958edb8da246a320f2c7d94a0dbe25d000000000000000000000519',\n  '0x9fb771d530b0ceba5160f7bfe2dd1e8b8aa1340300000000000000000000040e',\n  '0xa8b103a10a94f4f2d7ed2fdcd5545e807557330700000000000000000000048e',\n  '0xac5b4ef7ede2f2843a704e96dcaa637f4ba3dc3f00000000000000000000051d',\n  '0xdec02e6642e2c999af429f5ce944653cad15e093000000000000000000000469',\n  '0xe4dc3c1998ac693d68f4c77476d7c815694c3e94000200000000000000000416',\n  '0xf22ff21e17157340575158ad7394e068048dd98b0000000000000000000004b8',\n  '0xfef969638c52899f91781f1be594af6f40b99bad00000000000000000000047b',\n  '0x0320c1c5b6df19a194d48882aaec1c72940081d9000000000000000000000a7d',\n  '0x0889b240a5876aae745ac19f1771853671dc5d36000000000000000000000b3f',\n  '0x117a3d474976274b37b7b94af5dcade5c90c6e85000000000000000000000aca',\n  '0x11884da90fb4221b3aa288a7741c51ec4fc43b2f000000000000000000000a5f',\n  '0x284eb68520c8fa83361c1a3a5910aec7f873c18b000000000000000000000ac9',\n  '0x31bccf9e28b94e5dacebaa67fe8bc1603cecd904000000000000000000000a01',\n  '0x4ae3661afa119892f0cc8c43edaf6a94989ac171000000000000000000000c06',\n  '0x5bae72b75caab1f260d21bc028c630140607d6e8000000000000000000000ac6',\n  '0x6933ec1ca55c06a894107860c92acdfd2dd8512f000000000000000000000428',\n  '0x7079a25dec33be61bbd81b2fb69b468e80d3e72c0000000000000000000009ff',\n  '0x86aef31951e0a3a54333bd9e72f9a95587d058c5000200000000000000000912',\n  '0x882c7a84231484b3e9f3fd45ac04b1eb5d35b076000200000000000000000a91',\n  '0x894c82800526e0391e709c0983a5aea3718b7f6d000000000000000000000ac5',\n  '0x949a12b95ec5b80c375b98963a5d6b33b0d0efff0002000000000000000009fe',\n  '0xaef2c171dbe64b0c18977e16e70bfd29d4ee0256000000000000000000000ac8',\n  '0xb878ecce26838fbba4f78cb5b791a0e09152c067000000000000000000000427',\n  '0xc55ec796a4debe625d95436a3531f4950b11bdcf000000000000000000000b3e',\n  '0xc7e6389e364f4275eb442ef215ed21877028e2af000000000000000000000ac7',\n  '0xc83b55bbd005f1f84906545fcdb145dee53523e0000200000000000000000b30',\n  '0xcb21a9e647c95127ed784626485b3104cb28d0e7000000000000000000000425',\n  '0xdae301690004946424e41051ace1791083be42a1000000000000000000000b40',\n  '0xe1fb90d0d3b47e551d494d7ebe8f209753526b01000000000000000000000ac4',\n  '0xf48f01dcb2cbb3ee1f6aab0e742c2d3941039d56000000000000000000000445',\n  '0xf984eb2b8a7ef780245a797a2fccd82f346409ca000000000000000000000a59',\n  '0xfa2c0bd8327c99db5bde4c9e9e5cbf30946351bb000000000000000000000948',\n  '0x1ac55c31dac78ca943cb8ebfca5945ce09e036e2000000000000000000000024',\n  '0x225e0047671939a8d78e08ebd692788abe63f15c000000000000000000000009',\n  '0x581ec1f5e7ced12b186deae32256adb53bdd5b08000000000000000000000001',\n  '0xa3ed6f78edc29f69df8a0d16b1d1ccf9871f918c000000000000000000000032',\n  '0xb95829adbacd8af89e291dee78bc09e24de51d6b000000000000000000000043',\n  '0x11884da90fb4221b3aa288a7741c51ec4fc43b2f000000000000000000000353',\n  '0x19b1c92631405a0a9495ccba0becf4f2e8e908bd000000000000000000000410',\n  '0x1e550b7764da9638fdd32c8a701364de31f45ee800000000000000000000047c',\n  '0x1fa7f727934226aedab636d62a084931b97d366b000000000000000000000411',\n  '0x3f53a862919ccfa023cb6ace91378a79fb0f6bf500000000000000000000040f',\n  '0x52cc8389c6b93d740325729cc7c958066cee4262000000000000000000000408',\n  '0x81fc12c60ee5b753cf5fd0adc342dfb5f3817e3200000000000000000000035d',\n  '0x9bf7c3b63c77b4b4f2717776f15a4bec1b532a280000000000000000000000c8',\n  '0xa612b6aed2e7ca1a3a4f23fbca9128461bbb7718000000000000000000000274',\n  '0xae646817e458c0be890b81e8d880206710e3c44e00000000000000000000039d',\n  '0xaef2c171dbe64b0c18977e16e70bfd29d4ee0256000000000000000000000351',\n  '0xf984eb2b8a7ef780245a797a2fccd82f346409ca00000000000000000000034d',\n  '0x11884da90fb4221b3aa288a7741c51ec4fc43b2f00000000000000000000009e',\n  '0x24d9ff56fb09e0f02e74407b12f3264c6e520b5e0000000000000000000000d7',\n  '0x2da61ef3cdcb97efb0f7099c02527fabfe94dee50000000000000000000000c5',\n  '0x34557ef500bfc060b8e3f2da58ef725bb7d322020000000000000000000000c7',\n  '0x3b2ff5888f1bdedbb45ece9f1c628356388d22cc000000000000000000000045',\n  '0x435272180a4125f3b47c92826f482fc6cc165958000200000000000000000059',\n  '0x45d37982784f022a9864748b4e8750e1e70196040000000000000000000000c6',\n  '0x5936497ffe0dba0ef272d6301d65c0122862971a00000000000000000000007a',\n  '0x593acbfb1eaf3b6ec86fa60325d816996fdcbc0d000000000000000000000038',\n  '0x5d8955a2068ee6d1f7ab17640301219afa4b526f00000000000000000000002d',\n  '0x81fc12c60ee5b753cf5fd0adc342dfb5f3817e320000000000000000000000a6',\n  '0x96a78983932b8739d1117b16d30c15607926b0c500000000000000000000006d',\n  '0xd1af4974fcc995cf36ba40b189caa92964a9126d0000000000000000000000f1',\n  '0xf984eb2b8a7ef780245a797a2fccd82f346409ca00000000000000000000009d',\n  '0xa826a114b0c7db4d1ff4a4be845a78998c64564c000000000000000000000008',\n  '0xed3e2f496cbcd8e212192fb8d1499842f04a0d19000000000000000000000009',\n  '0x198a22e73aadd2d0ea8e2963799d38ae26adee2e000000000000000000000577',\n  '0x3ee7a82c1ecf54a375da1e3452b21ac986f348db00000000000000000000076e',\n  '0x49769fe4c796b2775d2e44982cca8cdae36f6671000000000000000000000428',\n  '0x64dea772866476c9f88fbe95ee83664d6c909c1800000000000000000000022c',\n  '0xa02c23525f12c677156d076268f4b44e12e38e4d00000000000000000000076d',\n  '0xa8bcdca345e61bad9bb539933a4009f7a6f4b7ea0000000000000000000006eb',\n  '0xd20547850f3f80204439eafc942ec4780d32f2bd000000000000000000000667',\n  '0xefc1bb0b97780cf7c22059aa7c7e7e88a049d21100020000000000000000041b',\n  '0xffecea216f0d0d08bfe2cf572e03f217f8a2bf1300020000000000000000041a',\n  '0x02c9dcb975262719a61f9b40bdf0987ead9add3a000000000000000000000006',\n  '0x32f03464fdf909fdf3798f87ff3712b10c59bd86000000000000000000000005',\n  '0xac4b72c01072a52b73ca71105504f1372efcce0d000000000000000000000003',\n  '0xbfd65c6160cfd638a85c645e6e6d8acac5dac935000000000000000000000004',\n];\n\nexport function isHighRisk(poolId: string): boolean {\n  return HIGH_RISK_POOL_IDS.includes(poolId);\n}\n","<script lang=\"ts\" setup>\nimport useNumbers, { FNumFormats } from '@/composables/useNumbers';\nimport { Pool } from '@/services/pool/types';\nimport { TransactionResponse } from '@ethersproject/abstract-provider';\nimport TxActionBtn from '@/components/btns/TxActionBtn/TxActionBtn.vue';\nimport { poolMetadata } from '@/lib/config/metadata';\n\ntype Props = {\n  pool: Pool;\n  balance: string;\n  iconAddresses: string[];\n  withdrawFn: () => Promise<TransactionResponse>;\n};\n\nconst props = defineProps<Props>();\nconst emit = defineEmits(['close', 'success']);\n\nconst { fNum } = useNumbers();\n\nconst assetRowWidth = computed(() => (props.iconAddresses.length * 32) / 1.5);\n</script>\n\n<template>\n  <BalModal show @close=\"emit('close')\">\n    <template #header>\n      <h4>Proportionally withdraw</h4>\n    </template>\n    <BalCard class=\"mb-4\">\n      <BalStack horizontal justify=\"between\" align=\"center\">\n        <BalStack vertical spacing=\"none\">\n          <h5>{{ fNum(balance) }} {{ $t('lpTokens') }}</h5>\n          <div v-if=\"poolMetadata(pool.id)?.name\" class=\"text-secondary\">\n            {{ poolMetadata(pool.id)?.name }}\n          </div>\n          <span v-else class=\"text-secondary\">\n            {{ pool.symbol }}\n          </span>\n        </BalStack>\n        <BalAssetSet\n          :addresses=\"iconAddresses\"\n          :width=\"assetRowWidth\"\n          :size=\"32\"\n        />\n      </BalStack>\n    </BalCard>\n    <p>\n      The withdraw transaction will perform a recovery exit from this pool. This\n      type of withdrawal results in zero price impact, as tokens are withdrawn\n      in the same proportions as the pool balances. If this pool contains nested\n      pool tokens, you will need to perform additional transactions to withdraw\n      from nested pools.\n    </p>\n    <template #footer>\n      <TxActionBtn\n        label=\"Withdraw\"\n        color=\"gradient\"\n        :actionFn=\"() => withdrawFn()\"\n        action=\"withdraw\"\n        :summary=\"\n          $t('transactionSummary.withdrawFromBalance', [\n            fNum(balance, FNumFormats.token),\n          ])\n        \"\n        confirmingLabel=\"Withdrawing...\"\n        block\n        @confirmed=\"emit('success')\"\n      />\n    </template>\n  </BalModal>\n</template>\n","<script lang=\"ts\" setup>\nimport { Pool } from '@/services/pool/types';\nimport useWeb3 from '@/services/web3/useWeb3';\nimport { networkId, networkSlug } from '@/composables/useNetwork';\nimport {\n  CSP_ISSUE_POOL_IDS,\n  isHighRisk,\n} from '@/constants/pool-lists/csp-issue';\nimport { isQueryLoading } from '@/composables/queries/useQueryHelpers';\nimport { useQuery } from '@tanstack/vue-query';\nimport TokenService from '@/services/token/token.service';\nimport { balancerTokenLists } from '@/providers/token-lists.provider';\nimport { bnum } from '@/lib/utils';\nimport { getAddress } from '@ethersproject/address';\nimport {\n  ExitHandler,\n  ExitPoolService,\n} from '@/services/balancer/pools/exits/exit-pool.service';\nimport { ExitType } from '@/services/balancer/pools/exits/handlers/exit-pool.handler';\nimport { useUserSettings } from '@/providers/user-settings.provider';\nimport { useApp } from '@/composables/useApp';\nimport { ColumnDefinition } from '@/components/_global/BalTable/types';\nimport useNumbers, { FNumFormats } from '@/composables/useNumbers';\nimport useBreakpoints from '@/composables/useBreakpoints';\nimport { balancerAPIService } from '@/services/balancer/api/balancer-api.service';\nimport TokensWhite from '@/assets/images/icons/tokens_white.svg';\nimport TokensBlack from '@/assets/images/icons/tokens_black.svg';\nimport useDarkMode from '@/composables/useDarkMode';\nimport { poolMetadata } from '@/lib/config/metadata';\nimport {\n  fiatValueOf,\n  isStableLike,\n  orderedPoolTokens,\n  orderedTokenAddresses,\n} from '@/composables/usePoolHelpers';\nimport TokenPills from '@/components/tables/PoolsTable/TokenPills/TokenPills.vue';\nimport { NO_RECOVERY_EXIT_POOL_IDS } from '@/constants/pool-lists/csp-issue';\nimport WithdrawalModal from './WithdrawalModal.vue';\n\nconst tokenService = new TokenService();\n\n/**\n * PROPS & EMITS\n */\ntype Props = {\n  unstakeEvents: number;\n};\n\nconst props = defineProps<Props>();\nconst emit = defineEmits(['withdrawal']);\n\n/**\n * STATE\n */\nconst showWithdrawalModal = ref(false);\nconst activePool = ref<Pool | null>(null);\n\n/**\n * COMPOSABLES\n */\nconst { account, getSigner } = useWeb3();\nconst { slippageBsp } = useUserSettings();\nconst { transactionDeadline } = useApp();\nconst { fNum } = useNumbers();\nconst { upToLargeBreakpoint } = useBreakpoints();\nconst { darkMode } = useDarkMode();\nconst router = useRouter();\n\n/**\n * COMPUTED + QUERIES\n */\nconst affectedPoolIds = computed(\n  (): string[] => CSP_ISSUE_POOL_IDS[networkId.value]\n);\n\nconst affectedPools = computed(() =>\n  affectedPoolIds.value.map(id => ({\n    id,\n    address: id.slice(0, 42),\n  }))\n);\n\nconst enableBalanceFetching = computed(() => !!account.value);\n\n// Query 1:\n// Fetches balances for all affected pools on the current network.\nconst poolBalancesQuery = useQuery(\n  ['CspExit', 'balances', { networkId, account }],\n  async () => {\n    const poolBpts = await tokenService.metadata.get(\n      affectedPools.value.map(pool => pool.address),\n      balancerTokenLists.value\n    );\n    return tokenService.balances.get(account.value, poolBpts);\n  },\n  { enabled: enableBalanceFetching }\n);\n\nconst balances = computed(() => poolBalancesQuery.data.value || {});\nconst poolsWithBalances = computed(() =>\n  affectedPools.value.filter(pool => bnum(balancerFor(pool)).gt(0))\n);\nconst enablePoolsQuery = computed(\n  () => !!poolsWithBalances.value.length && !isQueryLoading(poolBalancesQuery)\n);\n\n// Query 2:\n// Fetches only the pools that the user has a balance for from the pools API.\nconst poolsQuery = useQuery(\n  ['CspExit', 'pools', { networkId, poolsWithBalances }],\n  async () => {\n    return balancerAPIService.pools.get({\n      chainId: networkId.value,\n      first: 1000,\n      where: {\n        id: {\n          in: poolsWithBalances.value.map(p => p.id),\n        },\n      },\n    });\n  },\n  { enabled: enablePoolsQuery }\n);\n\n// This is the pools list we render.\nconst pools = computed(() => poolsQuery.data.value || []);\n\nconst isLoading = computed(\n  () => isQueryLoading(poolBalancesQuery) || isQueryLoading(poolsQuery)\n);\n\n/**\n * METHODS\n */\nfunction balancerFor(pool: { address: string }): string {\n  return balances.value[getAddress(pool.address)] || '0';\n}\n\nasync function withdraw(pool: Pool) {\n  const exitPoolService = new ExitPoolService(ref(pool));\n  exitPoolService.setExitHandler(ExitHandler.Recovery);\n  return exitPoolService.exit({\n    exitType: ExitType.GivenIn,\n    bptIn: balancerFor(pool),\n    amountsOut: [],\n    signer: getSigner(),\n    slippageBsp: slippageBsp.value,\n    tokenInfo: {},\n    approvalActions: [],\n    bptInValid: true,\n    transactionDeadline: transactionDeadline.value,\n  });\n}\n\nfunction isWithdrawDisabled(pool: Pool): boolean {\n  return !pool.isInRecoveryMode;\n}\n\nfunction iconAddresses(pool: Pool) {\n  return poolMetadata(pool.id)?.hasIcon\n    ? [pool.address]\n    : orderedTokenAddresses(pool);\n}\n\nfunction handleRowClick(pool: Pool) {\n  const route = router.resolve({\n    name: 'pool',\n    params: { id: pool.id, networkSlug },\n  });\n  window.open(route.href);\n}\n\nasync function refetchBalances() {\n  return poolBalancesQuery.refetch();\n}\n\nfunction doesNotSupportRecoveryExits(poolId: string): boolean {\n  return NO_RECOVERY_EXIT_POOL_IDS[networkId.value].includes(poolId);\n}\n\nfunction handleWithdrawal() {\n  refetchBalances();\n  emit('withdrawal');\n  closeModal();\n}\n\nfunction handleWithdrawClick(pool: Pool) {\n  activePool.value = pool;\n  showWithdrawalModal.value = true;\n}\n\nfunction closeModal() {\n  showWithdrawalModal.value = false;\n  activePool.value = null;\n}\n\n/**\n * WATCHERS\n */\nwatch(\n  () => props.unstakeEvents,\n  () => refetchBalances()\n);\n\n/**\n * TABLE DEFINITION\n */\nconst columns = ref<ColumnDefinition<Pool>[]>([\n  {\n    name: 'Icons',\n    id: 'icons',\n    accessor: 'uri',\n    Header: 'iconColumnHeader',\n    Cell: 'iconColumnCell',\n    width: 125,\n    noGrow: true,\n  },\n  {\n    name: 'Composition',\n    id: 'poolName',\n    accessor: 'id',\n    Cell: 'poolNameCell',\n    width: 350,\n  },\n  {\n    name: 'Risk',\n    id: 'risk',\n    width: 150,\n    align: 'right',\n    noGrow: true,\n    accessor: 'risk',\n    Cell: 'riskCell',\n  },\n  {\n    name: 'Balance',\n    id: 'balance',\n    align: 'right',\n    width: 150,\n    cellClassName: 'font-numeric',\n    accessor: pool => `${fNum(balancerFor(pool), FNumFormats.token)}`,\n  },\n  {\n    name: 'Value',\n    align: 'right',\n    id: 'value',\n    width: 150,\n    cellClassName: 'font-numeric',\n    accessor: pool =>\n      fNum(fiatValueOf(pool, balancerFor(pool)), FNumFormats.fiat),\n    sortKey: pool => {\n      const value = Number(fiatValueOf(pool, balancerFor(pool)));\n      if (value === Infinity || isNaN(value)) return 0;\n      return value;\n    },\n  },\n  {\n    name: '',\n    id: 'withdraw',\n    align: 'right',\n    accessor: 'withdraw',\n    Cell: 'withdrawColumnCell',\n    width: 150,\n  },\n]);\n</script>\n\n<template>\n  <div>\n    <h4 class=\"mb-2\">\n      2. Withdraw your liquidity (this may require several transactions)\n    </h4>\n    <BalCard\n      shadow=\"lg\"\n      :square=\"upToLargeBreakpoint\"\n      :noBorder=\"upToLargeBreakpoint\"\n      noPad\n    >\n      <BalTable\n        :columns=\"columns\"\n        :data=\"pools\"\n        skeletonClass=\"h-64\"\n        :square=\"upToLargeBreakpoint\"\n        :isLoading=\"isLoading\"\n        :onRowClick=\"handleRowClick\"\n        :initialState=\"{\n          sortColumn: 'value',\n          sortDirection: 'desc',\n        }\"\n      >\n        <template #iconColumnHeader>\n          <div class=\"flex items-center\">\n            <img\n              v-if=\"darkMode\"\n              :src=\"TokensWhite\"\n              alt=\"token\"\n              loading=\"lazy\"\n              width=\"24\"\n              height=\"15\"\n            />\n            <img\n              v-else\n              :src=\"TokensBlack\"\n              alt=\"token\"\n              loading=\"lazy\"\n              width=\"24\"\n              height=\"15\"\n            />\n          </div>\n        </template>\n        <template #iconColumnCell=\"pool\">\n          <div v-if=\"!isLoading\" class=\"py-4 px-6\" :data-testid=\"pool?.id\">\n            <BalAssetSet :addresses=\"iconAddresses(pool)\" :width=\"100\" />\n          </div>\n        </template>\n        <template #poolNameCell=\"pool\">\n          <div v-if=\"!isLoading\" class=\"flex items-center py-4 px-6\">\n            <div v-if=\"poolMetadata(pool.id)?.name\" class=\"pr-2 text-left\">\n              {{ poolMetadata(pool.id)?.name }}\n            </div>\n            <div v-else>\n              <TokenPills\n                :tokens=\"orderedPoolTokens(pool, pool.tokens)\"\n                :isStablePool=\"isStableLike(pool.poolType)\"\n              />\n            </div>\n          </div>\n        </template>\n        <template #riskCell=\"pool\">\n          <div\n            v-if=\"!isLoading\"\n            class=\"flex justify-end items-center py-4 px-6 text-right\"\n          >\n            <BalChip v-if=\"isHighRisk(pool.id)\" label=\"High risk\" color=\"red\" />\n            <BalChip v-else label=\"Mitigated\" color=\"orange\" />\n          </div>\n        </template>\n        <template #withdrawColumnCell=\"pool\">\n          <div class=\"flex justify-end py-4 px-6\">\n            <BalBtn\n              v-if=\"doesNotSupportRecoveryExits(pool.id)\"\n              tag=\"a\"\n              color=\"gradient\"\n              size=\"sm\"\n              :href=\"`/#/${networkSlug}/pool/${pool.id}/withdraw`\"\n              target=\"_blank\"\n              rel=\"noreferrer\"\n              @click.stop\n            >\n              Withdraw\n              <BalIcon name=\"arrow-up-right\" size=\"sm\" />\n            </BalBtn>\n            <BalBtn\n              v-else\n              color=\"gradient\"\n              size=\"sm\"\n              :disabled=\"isWithdrawDisabled(pool)\"\n              @click.stop=\"handleWithdrawClick(pool)\"\n            >\n              Withdraw\n            </BalBtn>\n          </div>\n        </template>\n      </BalTable>\n    </BalCard>\n\n    <WithdrawalModal\n      v-if=\"showWithdrawalModal && activePool\"\n      :pool=\"activePool\"\n      :balance=\"balancerFor(activePool)\"\n      :iconAddresses=\"iconAddresses(activePool)\"\n      :withdrawFn=\"() => withdraw(activePool as Pool)\"\n      @close=\"closeModal\"\n      @success=\"handleWithdrawal\"\n    />\n  </div>\n</template>\n","import { Interface } from '@ethersproject/abi';\nimport VaultActionsAbi from '../abi/VaultActions.json';\nimport {\n  EncodeBatchSwapInput,\n  EncodeExitPoolInput,\n  EncodeJoinPoolInput,\n  ExitPoolData,\n} from '../relayer-types';\nimport { ExitPoolRequest } from '@balancer-labs/sdk';\n\nexport class VaultActionsService {\n  public encodeBatchSwap(params: EncodeBatchSwapInput): string {\n    const relayerLibrary = new Interface(VaultActionsAbi);\n\n    return relayerLibrary.encodeFunctionData('batchSwap', [\n      params.swapType,\n      params.swaps,\n      params.assets,\n      params.funds,\n      params.limits,\n      params.deadline,\n      params.value,\n      params.outputReferences,\n    ]);\n  }\n\n  public encodeExitPool(params: EncodeExitPoolInput): string {\n    const relayerLibrary = new Interface(VaultActionsAbi);\n\n    return relayerLibrary.encodeFunctionData('exitPool', [\n      params.poolId,\n      params.poolKind,\n      params.sender,\n      params.recipient,\n      params.exitPoolRequest,\n      params.outputReferences,\n    ]);\n  }\n\n  public encodeJoinPool(params: EncodeJoinPoolInput): string {\n    const relayerLibrary = new Interface(VaultActionsAbi);\n\n    return relayerLibrary.encodeFunctionData('joinPool', [\n      params.poolId,\n      params.poolKind,\n      params.sender,\n      params.recipient,\n      params.joinPoolRequest,\n      params.value,\n      params.outputReference,\n    ]);\n  }\n\n  public constructExitCall(params: ExitPoolData): string {\n    const {\n      assets,\n      minAmountsOut,\n      userData,\n      toInternalBalance,\n      poolId,\n      poolKind,\n      sender,\n      recipient,\n      outputReferences,\n    } = params;\n\n    const exitPoolRequest: ExitPoolRequest = {\n      assets,\n      minAmountsOut,\n      userData,\n      toInternalBalance,\n    };\n\n    const exitPoolInput: EncodeExitPoolInput = {\n      poolId,\n      poolKind,\n      sender,\n      recipient,\n      outputReferences,\n      exitPoolRequest,\n    };\n\n    return this.encodeExitPool(exitPoolInput);\n  }\n}\n","import { Interface } from '@ethersproject/abi';\nimport aaveWrappingAbi from '../abi/AaveWrapping.json';\nimport { EncodeUnwrapAaveStaticTokenInput } from '../relayer-types';\n\nexport class AaveWrappingService {\n  public encodeUnwrap(params: EncodeUnwrapAaveStaticTokenInput): string {\n    const aaveWrappingLibrary = new Interface(aaveWrappingAbi);\n\n    return aaveWrappingLibrary.encodeFunctionData('unwrapAaveStaticToken', [\n      params.staticToken,\n      params.sender,\n      params.recipient,\n      params.amount,\n      params.toUnderlying,\n      params.outputReference,\n    ]);\n  }\n}\n","import { Interface } from '@ethersproject/abi';\nimport YearnWrappingAbi from '../abi/YearnWrapping.json';\nimport { EncodeUnwrapYearnVaultTokenInput } from '../relayer-types';\n\nexport class YearnWrappingService {\n  public encodeWrap(params: EncodeUnwrapYearnVaultTokenInput): string {\n    const yearnWrappingLibrary = new Interface(YearnWrappingAbi);\n\n    return yearnWrappingLibrary.encodeFunctionData('wrapYearnVaultToken', [\n      params.vaultToken,\n      params.sender,\n      params.recipient,\n      params.amount,\n      params.outputReference,\n    ]);\n  }\n\n  public encodeUnwrap(params: EncodeUnwrapYearnVaultTokenInput): string {\n    const yearnWrappingLibrary = new Interface(YearnWrappingAbi);\n\n    return yearnWrappingLibrary.encodeFunctionData('unwrapYearnVaultToken', [\n      params.vaultToken,\n      params.sender,\n      params.recipient,\n      params.amount,\n      params.outputReference,\n    ]);\n  }\n}\n","import { Interface } from '@ethersproject/abi';\nimport ReaperWrappingAbi from '../abi/ReaperWrapping.json';\nimport {\n  EncodeWrapReaperVaultTokenInput,\n  EncodeUnwrapReaperVaultTokenInput,\n} from '../relayer-types';\n\nexport class ReaperWrappingService {\n  public encodeWrap(params: EncodeWrapReaperVaultTokenInput): string {\n    const reaperWrappingLibrary = new Interface(ReaperWrappingAbi);\n\n    return reaperWrappingLibrary.encodeFunctionData('wrapReaperVaultToken', [\n      params.vaultToken,\n      params.sender,\n      params.recipient,\n      params.amount,\n      params.outputReference,\n    ]);\n  }\n\n  public encodeUnwrap(params: EncodeUnwrapReaperVaultTokenInput): string {\n    const reaperWrappingLibrary = new Interface(ReaperWrappingAbi);\n\n    return reaperWrappingLibrary.encodeFunctionData('unwrapReaperVaultToken', [\n      params.vaultToken,\n      params.sender,\n      params.recipient,\n      params.amount,\n      params.outputReference,\n    ]);\n  }\n}\n","import { Interface } from '@ethersproject/abi';\nimport Erc4626WrappingAbi from '../abi/Erc4626Wrapping.json';\nimport {\n  EncodeUnwrapErc4626Input,\n  EncodeWrapErc4626Input,\n} from '../relayer-types';\n\nexport class Erc4626WrappingService {\n  public encodeWrap(params: EncodeWrapErc4626Input): string {\n    const erc4626WrappingLibrary = new Interface(Erc4626WrappingAbi);\n\n    return erc4626WrappingLibrary.encodeFunctionData('wrapERC4626', [\n      params.wrappedToken,\n      params.sender,\n      params.recipient,\n      params.amount,\n      params.outputReference,\n    ]);\n  }\n\n  public encodeUnwrap(params: EncodeUnwrapErc4626Input): string {\n    const erc4626WrappingLibrary = new Interface(Erc4626WrappingAbi);\n\n    return erc4626WrappingLibrary.encodeFunctionData('unwrapERC4626', [\n      params.wrappedToken,\n      params.sender,\n      params.recipient,\n      params.amount,\n      params.outputReference,\n    ]);\n  }\n}\n","import { Interface } from '@ethersproject/abi';\nimport GaugeActionsAbi from '../abi/GaugeActions.json';\nimport { EncodeGaugeDepositInput } from '../relayer-types';\n\nexport class GaugeActionsService {\n  public encodeDeposit(params: EncodeGaugeDepositInput): string {\n    const gaugeActionsLibrary = new Interface(GaugeActionsAbi);\n\n    return gaugeActionsLibrary.encodeFunctionData('gaugeDeposit', [\n      params.gauge,\n      params.sender,\n      params.recipient,\n      params.amount,\n    ]);\n  }\n\n  public encodeWithdraw(params: EncodeGaugeDepositInput): string {\n    const gaugeActionsLibrary = new Interface(GaugeActionsAbi);\n\n    return gaugeActionsLibrary.encodeFunctionData('gaugeWithdraw', [\n      params.gauge,\n      params.sender,\n      params.recipient,\n      params.amount,\n    ]);\n  }\n}\n","import { Interface } from '@ethersproject/abi';\nimport BatchRelayerLibraryAbi from '../abi/BatchRelayerLibrary.json';\nimport { BigNumberish } from '@ethersproject/bignumber';\n\nexport class EulerWrappingService {\n  public encodeUnwrap(params: {\n    wrappedToken: string;\n    sender: string;\n    recipient: string;\n    amount: BigNumberish;\n    outputReference: BigNumberish;\n  }): string {\n    const batchRelayerLibrary = new Interface(BatchRelayerLibraryAbi);\n\n    return batchRelayerLibrary.encodeFunctionData('unwrapEuler', [\n      params.wrappedToken,\n      params.sender,\n      params.recipient,\n      params.amount,\n      params.outputReference,\n    ]);\n  }\n}\n","import { Interface } from '@ethersproject/abi';\nimport BatchRelayerLibraryAbi from '../abi/BatchRelayerLibrary.json';\nimport { BigNumberish } from '@ethersproject/bignumber';\n\nexport class GearboxWrappingService {\n  public encodeUnwrap(params: {\n    wrappedToken: string;\n    sender: string;\n    recipient: string;\n    amount: BigNumberish;\n    outputReference: BigNumberish;\n  }): string {\n    const batchRelayerLibrary = new Interface(BatchRelayerLibraryAbi);\n\n    return batchRelayerLibrary.encodeFunctionData('unwrapGearbox', [\n      params.wrappedToken,\n      params.sender,\n      params.recipient,\n      params.amount,\n      params.outputReference,\n    ]);\n  }\n}\n","import { Interface } from '@ethersproject/abi';\nimport BatchRelayerLibraryAbi from '../abi/BatchRelayerLibrary.json';\nimport { BigNumberish } from '@ethersproject/bignumber';\n\nexport class SiloWrappingService {\n  public encodeUnwrap(params: {\n    wrappedToken: string;\n    sender: string;\n    recipient: string;\n    amount: BigNumberish;\n    outputReference: BigNumberish;\n  }): string {\n    const batchRelayerLibrary = new Interface(BatchRelayerLibraryAbi);\n\n    return batchRelayerLibrary.encodeFunctionData('unwrapShareToken', [\n      params.wrappedToken,\n      params.sender,\n      params.recipient,\n      params.amount,\n      params.outputReference,\n    ]);\n  }\n}\n","import { Interface } from '@ethersproject/abi';\nimport BatchRelayerLibraryAbi from '../abi/BatchRelayerLibrary.json';\nimport { BigNumberish } from '@ethersproject/bignumber';\n\nexport class TetuWrappingService {\n  public encodeUnwrap(params: {\n    wrappedToken: string;\n    sender: string;\n    recipient: string;\n    amount: BigNumberish;\n    outputReference: BigNumberish;\n  }): string {\n    const batchRelayerLibrary = new Interface(BatchRelayerLibraryAbi);\n\n    return batchRelayerLibrary.encodeFunctionData('unwrapTetu', [\n      params.wrappedToken,\n      params.sender,\n      params.recipient,\n      params.amount,\n      params.outputReference,\n    ]);\n  }\n}\n","import { VaultActionsService } from './extensions/vault-actions.service';\nimport { AaveWrappingService } from './extensions/aave-wrapping.service';\nimport { YearnWrappingService } from './extensions/yearn-wrapping.service';\nimport {\n  EncodeGaugeDepositInput,\n  EncodeGaugeWithdrawInput,\n  EncodeReaperUnwrapInput,\n  EncodeReaperWrapInput,\n  EncodeUnwrapErc4626Input,\n  EncodeWrapErc4626Input,\n} from './relayer-types';\nimport { BigNumber, BigNumberish } from '@ethersproject/bignumber';\nimport { ReaperWrappingService } from './extensions/reaper-wrapping.service';\nimport { Erc4626WrappingService } from './extensions/erc4626-wrapping.service';\nimport { GaugeActionsService } from './extensions/gauge-actions.service';\nimport BatchRelayerLibraryAbi from './abi/BatchRelayerLibrary.json';\nimport BatchRelayerAbi from './abi/BatchRelayer.json';\nimport { Interface } from '@ethersproject/abi';\nimport { JsonRpcSigner } from '@ethersproject/providers';\nimport { TransactionBuilder } from '@/services/web3/transactions/transaction.builder';\nimport { EulerWrappingService } from '@/services/balancer/batch-relayer/extensions/euler-wrapping.service';\nimport { GearboxWrappingService } from '@/services/balancer/batch-relayer/extensions/gearbox-wrapping.service';\nimport { SiloWrappingService } from '@/services/balancer/batch-relayer/extensions/silo-wrapping.service';\nimport { TetuWrappingService } from '@/services/balancer/batch-relayer/extensions/tetu-wrapping.service';\n\nexport enum LinearPoolType {\n  AaveLinear = 'AaveLinear',\n  EulerLinear = 'EulerLinear',\n  ERC4626Linear = 'ERC4626Linear',\n  BeefyLinear = 'BeefyLinear',\n  GearboxLinear = 'GearboxLinear',\n  MidasLinear = 'MidasLinear',\n  ReaperLinear = 'ReaperLinear',\n  SiloLinear = 'SiloLinear',\n  TetuLinear = 'TetuLinear',\n  YearnLinear = 'YearnLinear',\n}\n\nexport class BatchRelayerService {\n  private readonly CHAINED_REFERENCE_PREFIX = 'ba11';\n  private readonly TEMP_CHAINED_REFERENCE_PREFIX = 'ba10';\n  private readonly vaultActionsService: VaultActionsService;\n  private readonly aaveWrappingService: AaveWrappingService;\n  private readonly yearnWrappingService: YearnWrappingService;\n  private readonly reaperWrappingService: ReaperWrappingService;\n  private readonly erc4626WrappingService: Erc4626WrappingService;\n  private readonly eulerWrappingService: EulerWrappingService;\n  private readonly gearboxWrappingService: GearboxWrappingService;\n  private readonly siloWrappingService: SiloWrappingService;\n  private readonly tetuWrappingService: TetuWrappingService;\n  private readonly gaugeStakingService: GaugeActionsService;\n\n  constructor() {\n    this.vaultActionsService = new VaultActionsService();\n    this.aaveWrappingService = new AaveWrappingService();\n    this.yearnWrappingService = new YearnWrappingService();\n    this.reaperWrappingService = new ReaperWrappingService();\n    this.erc4626WrappingService = new Erc4626WrappingService();\n    this.eulerWrappingService = new EulerWrappingService();\n    this.gearboxWrappingService = new GearboxWrappingService();\n    this.siloWrappingService = new SiloWrappingService();\n    this.tetuWrappingService = new TetuWrappingService();\n    this.gaugeStakingService = new GaugeActionsService();\n  }\n\n  public toChainedReference(key: BigNumberish): BigNumber {\n    // The full padded prefix is 66 characters long, with 64 hex characters and the 0x prefix.\n    const paddedPrefix = `0x${this.TEMP_CHAINED_REFERENCE_PREFIX}${'0'.repeat(\n      64 - this.TEMP_CHAINED_REFERENCE_PREFIX.length\n    )}`;\n    return BigNumber.from(paddedPrefix).add(key);\n  }\n\n  public toPersistentChainedReference(key: BigNumberish): BigNumber {\n    // The full padded prefix is 66 characters long, with 64 hex characters and the 0x prefix.\n    const paddedPrefix = `0x${this.CHAINED_REFERENCE_PREFIX}${'0'.repeat(\n      64 - this.CHAINED_REFERENCE_PREFIX.length\n    )}`;\n    return BigNumber.from(paddedPrefix).add(key);\n  }\n\n  public encodePeekChainedReferenceValue(reference: BigNumberish): string {\n    const relayerLibrary = new Interface(BatchRelayerLibraryAbi);\n\n    return relayerLibrary.encodeFunctionData('peekChainedReferenceValue', [\n      reference,\n    ]);\n  }\n\n  public gaugeEncodeDeposit(params: EncodeGaugeDepositInput): string {\n    return this.gaugeStakingService.encodeDeposit(params);\n  }\n\n  public gaugeEncodeWithdraw(params: EncodeGaugeWithdrawInput): string {\n    return this.gaugeStakingService.encodeWithdraw(params);\n  }\n\n  public reaperEncodeWrap(params: EncodeReaperWrapInput): string {\n    return this.reaperWrappingService.encodeWrap(params);\n  }\n\n  public reaperEncodeUnwrap(params: EncodeReaperUnwrapInput): string {\n    return this.reaperWrappingService.encodeUnwrap(params);\n  }\n\n  public erc4626EncodeWrap(params: EncodeWrapErc4626Input): string {\n    return this.erc4626WrappingService.encodeWrap(params);\n  }\n\n  public erc4626EncodeUnwrap(params: EncodeUnwrapErc4626Input): string {\n    return this.erc4626WrappingService.encodeUnwrap(params);\n  }\n\n  public unwrapLinearPoolWrappedToken({\n    signer,\n    batchRelayerAddress,\n    wrappedToken,\n    poolType,\n    sender,\n    recipient,\n    amount,\n  }: {\n    signer: JsonRpcSigner;\n    batchRelayerAddress: string;\n    wrappedToken: string;\n    poolType: LinearPoolType;\n    sender: string;\n    recipient: string;\n    amount: BigNumberish;\n  }) {\n    const txBuilder = new TransactionBuilder(signer);\n    let call = '';\n\n    if (\n      poolType === LinearPoolType.ReaperLinear ||\n      poolType === LinearPoolType.BeefyLinear\n    ) {\n      call = this.reaperEncodeUnwrap({\n        vaultToken: wrappedToken,\n        sender,\n        recipient,\n        amount,\n        outputReference: 0,\n      });\n    } else if (poolType === LinearPoolType.ERC4626Linear) {\n      call = this.erc4626EncodeUnwrap({\n        wrappedToken,\n        sender,\n        recipient,\n        amount,\n        outputReference: 0,\n      });\n    } else if (poolType === LinearPoolType.AaveLinear) {\n      call = this.aaveWrappingService.encodeUnwrap({\n        staticToken: wrappedToken,\n        sender,\n        recipient,\n        amount,\n        outputReference: 0,\n        toUnderlying: true,\n      });\n    } else if (poolType === LinearPoolType.YearnLinear) {\n      call = this.yearnWrappingService.encodeUnwrap({\n        vaultToken: wrappedToken,\n        sender,\n        recipient,\n        amount,\n        outputReference: 0,\n      });\n    } else if (poolType === LinearPoolType.EulerLinear) {\n      call = this.eulerWrappingService.encodeUnwrap({\n        wrappedToken,\n        sender,\n        recipient,\n        amount,\n        outputReference: 0,\n      });\n    } else if (poolType === LinearPoolType.TetuLinear) {\n      call = this.tetuWrappingService.encodeUnwrap({\n        wrappedToken,\n        sender,\n        recipient,\n        amount,\n        outputReference: 0,\n      });\n    } else if (poolType === LinearPoolType.GearboxLinear) {\n      call = this.gearboxWrappingService.encodeUnwrap({\n        wrappedToken,\n        sender,\n        recipient,\n        amount,\n        outputReference: 0,\n      });\n    } else if (poolType === LinearPoolType.SiloLinear) {\n      call = this.siloWrappingService.encodeUnwrap({\n        wrappedToken,\n        sender,\n        recipient,\n        amount,\n        outputReference: 0,\n      });\n    } else {\n      throw new Error(\n        'unwrapLinearPoolWrappedToken: Unsupported linear pool type'\n      );\n    }\n\n    const batchRelayerInterface = new Interface(BatchRelayerAbi);\n\n    return txBuilder.raw.sendTransaction({\n      to: batchRelayerAddress,\n      data: batchRelayerInterface.encodeFunctionData('multicall', [[call]]),\n    });\n  }\n}\n","<script lang=\"ts\" setup>\nimport { ColumnDefinition } from '@/components/_global/BalTable/types';\nimport useGraphQuery from '@/composables/queries/useGraphQuery';\nimport { isQueryLoading } from '@/composables/queries/useQueryHelpers';\nimport useBreakpoints from '@/composables/useBreakpoints';\nimport useDarkMode from '@/composables/useDarkMode';\nimport { networkId } from '@/composables/useNetwork';\nimport useNumbers, { FNumFormats } from '@/composables/useNumbers';\nimport { bnum, isSameAddress } from '@/lib/utils';\nimport { balancerTokenLists } from '@/providers/token-lists.provider';\nimport { configService } from '@/services/config/config.service';\nimport TokenService from '@/services/token/token.service';\nimport useWeb3 from '@/services/web3/useWeb3';\nimport { TokenInfo, TokenInfoMap } from '@/types/TokenList';\nimport { getAddress } from '@ethersproject/address';\nimport { useQuery } from '@tanstack/vue-query';\nimport TokensWhite from '@/assets/images/icons/tokens_white.svg';\nimport TokensBlack from '@/assets/images/icons/tokens_black.svg';\nimport BalAsset from '@/components/_global/BalAsset/BalAsset.vue';\nimport TxActionBtn from '@/components/btns/TxActionBtn/TxActionBtn.vue';\nimport { pickBy, uniqBy } from 'lodash';\nimport {\n  BatchRelayerService,\n  LinearPoolType,\n} from '@/services/balancer/batch-relayer/batch-relayer.service';\nimport { parseUnits } from '@ethersproject/units';\nimport useTokenApprovalActions from '@/composables/approvals/useTokenApprovalActions';\nimport { ApprovalAction } from '@/composables/approvals/types';\nimport useRelayerApproval, {\n  RelayerType,\n} from '@/composables/approvals/useRelayerApproval';\n\nconst tokenService = new TokenService();\n\nconst TOKENS_TO_EXCLUDE = [\n  '0xa0d3707c569ff8c87fa923d3823ec5d81c98be78', // iETHv2 (Speak to Rab for context)\n];\n\n/**\n * TYPES\n */\ntype PoolsQueryResponse = {\n  pools: {\n    id: string;\n    wrappedIndex: string;\n    factory: string;\n    poolType: string;\n    tokens: {\n      address: string;\n      index: string;\n    }[];\n  }[];\n};\n\ntype Props = {\n  withdrawalEvents: number;\n};\n\n/**\n * Props\n */\nconst props = defineProps<Props>();\n\n/**\n * COMPOSABLES\n */\nconst { account, explorerLinks, getSigner } = useWeb3();\nconst { fNum } = useNumbers();\nconst { upToLargeBreakpoint } = useBreakpoints();\nconst { darkMode } = useDarkMode();\nconst { approveToken } = useTokenApprovalActions();\nconst { relayerApprovalTx } = useRelayerApproval(RelayerType.BATCH);\n\n/**\n * COMPUTED + QUERIES\n */\n// Query 1:\n// Fetch all linear pools for the current network and get the wrapped token\n// index + address.\nconst linearPoolsQuery = useGraphQuery<PoolsQueryResponse>(\n  configService.network.subgraph,\n  ['tokenUnwrap', 'pools', { networkId }],\n  () => ({\n    pools: {\n      __args: {\n        first: 1000,\n        where: {\n          poolType_contains: 'Linear',\n        },\n      },\n      id: true,\n      wrappedIndex: true,\n      factory: true,\n      poolType: true,\n      tokens: {\n        address: true,\n        index: true,\n      },\n    },\n  }),\n  {\n    keepPreviousData: true,\n    refetchOnWindowFocus: false,\n  }\n);\n\nconst allLineaPools = computed(() => linearPoolsQuery.data.value?.pools ?? []);\nconst allWrappedTokensWithType = computed(\n  (): { wrapped: string; poolType: string }[] =>\n    uniqBy(\n      allLineaPools.value.map(pool => ({\n        wrapped: (\n          pool.tokens.find(token => token.index === pool.wrappedIndex) ||\n          pool.tokens[pool.wrappedIndex]\n        )?.address as string,\n        poolType: pool.poolType,\n      })),\n      'wrapped'\n    )\n);\nconst enableTokenQuery = computed(\n  (): boolean => allWrappedTokensWithType.value.length > 0\n);\n\n// Query 2:\n// Fetch metadata for all wrapped token addresses provided by query 1.\nconst tokensQuery = useQuery(\n  [\n    'tokenUnwrap',\n    'tokens',\n    {\n      networkId,\n      allWrappedTokenAddressesWithFactory: allWrappedTokensWithType,\n    },\n  ],\n  async () =>\n    tokenService.metadata.get(\n      allWrappedTokensWithType.value\n        .map(item => item.wrapped)\n        .filter(address => !TOKENS_TO_EXCLUDE.includes(address.toLowerCase())),\n      balancerTokenLists.value\n    ),\n  { enabled: enableTokenQuery }\n);\n\nconst tokens = computed((): TokenInfoMap => tokensQuery.data.value ?? {});\nconst enableBalancesQuery = computed(\n  (): boolean => Object.keys(tokens.value).length > 0 && !!account.value\n);\n\n// Query 3:\n// Fetch user balances for all wrapped token addresses provided by query 1.\nconst balancesQuery = useQuery(\n  ['tokenUnwrap', 'balances', { networkId, tokens }],\n  async () => tokenService.balances.get(account.value, tokens.value),\n  { enabled: enableBalancesQuery }\n);\n\nconst balances = computed(() => balancesQuery.data.value || {});\nconst enableAllowancesQuery = computed((): boolean =>\n  Object.values(balances.value).some(amount => bnum(amount).gt(0))\n);\n\n// Query 4:\n// Fetch user allowances for tokens with balance for the vault and relayer.\nconst allowancesQuery = useQuery(\n  ['tokenUnwrap', 'allowances', { networkId, balances }],\n  async () =>\n    tokenService.allowances.get(\n      account.value,\n      [configService.network.addresses.vault],\n      tokens.value\n    ),\n  { enabled: enableAllowancesQuery }\n);\n\nconst allowances = computed(() => allowancesQuery.data.value || {});\n\nconst isLoading = computed(\n  (): boolean =>\n    isQueryLoading(linearPoolsQuery) ||\n    isQueryLoading(tokensQuery) ||\n    isQueryLoading(balancesQuery) ||\n    isQueryLoading(allowancesQuery)\n);\n\nconst tokensWithBalance = computed(\n  (): TokenInfoMap =>\n    pickBy(tokens.value, token => bnum(balancerFor(token.address)).gt(0))\n);\n\n// The list of tokens to display in the table.\nconst tokensList = computed(() => Object.values(tokensWithBalance.value));\n\n/**\n * METHODS\n */\nasync function unwrap(token: TokenInfo) {\n  const signer = getSigner();\n  const batchRelayerService = new BatchRelayerService();\n\n  const item = allWrappedTokensWithType.value.find(item =>\n    isSameAddress(item.wrapped, token.address)\n  );\n  const amount = parseUnits(balancerFor(item?.wrapped || ''), token.decimals);\n\n  return batchRelayerService.unwrapLinearPoolWrappedToken({\n    signer,\n    batchRelayerAddress: configService.network.addresses.batchRelayer,\n    wrappedToken: item?.wrapped || '',\n    poolType: item?.poolType as LinearPoolType,\n    sender: account.value,\n    recipient: account.value,\n    amount,\n  });\n}\n\nasync function approve(token: TokenInfo) {\n  return approveToken({\n    token,\n    normalizedAmount: balancerFor(token.address),\n    spender: configService.network.addresses.vault,\n    actionType: ApprovalAction.Unwrapping,\n  });\n}\n\nfunction balancerFor(address: string): string {\n  return balances.value[getAddress(address)];\n}\n\nfunction allowanceFor(address: string): string {\n  return (\n    allowances.value?.[configService.network.addresses.vault]?.[\n      getAddress(address)\n    ] ?? '0'\n  );\n}\n\nfunction handleRowClick(token: TokenInfo) {\n  window.open(explorerLinks.addressLink(token.address));\n}\n\nfunction unwrapDisabled(token): boolean {\n  return bnum(balancerFor(token.address)).lte(0);\n}\n\nfunction requiresApproval(token: TokenInfo): boolean {\n  return bnum(allowanceFor(token.address)).lt(balancerFor(token.address));\n}\n\n/**\n * WATCHERS\n */\nwatch(\n  () => props.withdrawalEvents,\n  () => balancesQuery.refetch()\n);\n\n/**\n * TABLE DEFINITION\n */\nconst columns = computed((): ColumnDefinition<TokenInfo>[] => [\n  {\n    name: 'Icons',\n    id: 'icons',\n    accessor: 'uri',\n    Header: 'iconColumnHeader',\n    Cell: 'iconColumnCell',\n    width: 100,\n    noGrow: true,\n  },\n  {\n    name: 'Token',\n    id: 'token',\n    width: 150,\n    className: 'px-0',\n    accessor: token => token.symbol,\n  },\n  {\n    name: 'Balance',\n    id: 'balance',\n    align: 'right',\n    width: 150,\n    cellClassName: 'font-numeric',\n    accessor: token => `${fNum(balancerFor(token.address), FNumFormats.token)}`,\n    sortKey: token => {\n      const value = Number(balancerFor(token.address));\n      if (value === Infinity || isNaN(value)) return 0;\n      return value;\n    },\n  },\n  {\n    name: '',\n    id: 'unwrap',\n    align: 'right',\n    accessor: 'unwrap',\n    Cell: 'unwrapColumnCell',\n    width: upToLargeBreakpoint.value ? 200 : 100,\n  },\n]);\n</script>\n\n<template>\n  <div>\n    <h4 class=\"mb-2\">3. Unwrap your tokens</h4>\n    <BalCard\n      shadow=\"lg\"\n      :square=\"upToLargeBreakpoint\"\n      :noBorder=\"upToLargeBreakpoint\"\n      noPad\n    >\n      <BalTable\n        :columns=\"columns\"\n        :data=\"tokensList\"\n        skeletonClass=\"h-64\"\n        :square=\"upToLargeBreakpoint\"\n        :isLoading=\"isLoading\"\n        :onRowClick=\"handleRowClick\"\n        :initialState=\"{\n          sortColumn: 'balance',\n          sortDirection: 'desc',\n        }\"\n      >\n        <template #iconColumnHeader>\n          <div class=\"flex items-center\">\n            <img\n              v-if=\"darkMode\"\n              :src=\"TokensWhite\"\n              alt=\"token\"\n              loading=\"lazy\"\n              width=\"24\"\n              height=\"15\"\n            />\n            <img\n              v-else\n              :src=\"TokensBlack\"\n              alt=\"token\"\n              loading=\"lazy\"\n              width=\"24\"\n              height=\"15\"\n            />\n          </div>\n        </template>\n        <template #iconColumnCell=\"token\">\n          <div v-if=\"!isLoading\" class=\"py-4 px-6 text-left\">\n            <BalAsset\n              :address=\"token.address\"\n              :iconURI=\"token.logoURI\"\n              :size=\"28\"\n            />\n          </div>\n        </template>\n        <template #unwrapColumnCell=\"token\">\n          <div class=\"flex justify-end py-4 px-6\">\n            <TxActionBtn\n              v-if=\"requiresApproval(token)\"\n              label=\"Approve Vault\"\n              color=\"gradient\"\n              size=\"sm\"\n              :actionFn=\"() => approve(token)\"\n              action=\"approve\"\n              :summary=\"fNum(balancerFor(token.address), FNumFormats.token)\"\n              :confirmingLabel=\"`Approving...`\"\n              disableNotification\n              :disabled=\"allowancesQuery.isRefetching.value\"\n              @confirmed=\"allowancesQuery.refetch()\"\n            />\n            <TxActionBtn\n              v-else-if=\"!relayerApprovalTx.isUnlocked.value\"\n              label=\"Approve Relayer\"\n              color=\"gradient\"\n              size=\"sm\"\n              :actionFn=\"() => relayerApprovalTx.approve()\"\n              action=\"approve\"\n              :summary=\"fNum(balancerFor(token.address), FNumFormats.token)\"\n              :confirmingLabel=\"`Approving...`\"\n              disableNotification\n              :disabled=\"relayerApprovalTx.loading.value\"\n            />\n            <TxActionBtn\n              v-else\n              label=\"Unwrap\"\n              color=\"gradient\"\n              size=\"sm\"\n              :actionFn=\"() => unwrap(token)\"\n              action=\"unwrap\"\n              :summary=\"fNum(balancerFor(token.address), FNumFormats.token)\"\n              :confirmingLabel=\"`Unwrapping...`\"\n              :disabled=\"unwrapDisabled(token)\"\n              @confirmed=\"balancesQuery.refetch()\"\n            />\n          </div>\n        </template>\n      </BalTable>\n    </BalCard>\n  </div>\n</template>\n","<script lang=\"ts\" setup>\nimport { ColumnDefinition } from '@/components/_global/BalTable/types';\nimport useGraphQuery from '@/composables/queries/useGraphQuery';\nimport { isQueryLoading } from '@/composables/queries/useQueryHelpers';\nimport useBreakpoints from '@/composables/useBreakpoints';\nimport useDarkMode from '@/composables/useDarkMode';\nimport { networkId } from '@/composables/useNetwork';\nimport useNumbers, { FNumFormats } from '@/composables/useNumbers';\nimport { bnum } from '@/lib/utils';\nimport { configService } from '@/services/config/config.service';\nimport TokenService from '@/services/token/token.service';\nimport useWeb3 from '@/services/web3/useWeb3';\nimport { TokenInfo, TokenInfoMap } from '@/types/TokenList';\nimport { getAddress } from '@ethersproject/address';\nimport { useQuery } from '@tanstack/vue-query';\nimport TokensWhite from '@/assets/images/icons/tokens_white.svg';\nimport TokensBlack from '@/assets/images/icons/tokens_black.svg';\nimport BalAsset from '@/components/_global/BalAsset/BalAsset.vue';\nimport TxActionBtn from '@/components/btns/TxActionBtn/TxActionBtn.vue';\nimport { keyBy, merge, pickBy } from 'lodash';\nimport {\n  CSP_ISSUE_POOL_IDS,\n  isHighRisk,\n} from '@/constants/pool-lists/csp-issue';\nimport { TransactionBuilder } from '@/services/web3/transactions/transaction.builder';\nimport { Interface } from '@ethersproject/abi';\nimport { parseUnits } from '@ethersproject/units';\n\nconst tokenService = new TokenService();\n\nconst balancerChildChainGaugeABi = [\n  {\n    stateMutability: 'nonpayable',\n    type: 'function',\n    name: 'withdraw',\n    inputs: [{ name: '_value', type: 'uint256' }],\n    outputs: [],\n  },\n];\n\nconst auraBaseRewardPool4626Abi = [\n  {\n    inputs: [{ internalType: 'bool', name: 'claim', type: 'bool' }],\n    name: 'withdrawAllAndUnwrap',\n    outputs: [],\n    stateMutability: 'nonpayable',\n    type: 'function',\n  },\n];\n\n/**\n * TYPES\n */\ntype LiquidityGaugesQueryResponse = {\n  liquidityGauges: {\n    id: string;\n    symbol: string;\n    poolId: string;\n    poolAddress: string;\n  }[];\n};\n\ntype AuraGaugesQueryResponse = {\n  pools: {\n    id: string;\n    poolId: string;\n    address: string;\n    name: string;\n    lpToken: {\n      address: string;\n    };\n  }[];\n};\n\n/**\n * PROPS & EMITS\n */\nconst emit = defineEmits(['unstaked']);\n\n/**\n * COMPOSABLES\n */\nconst { account, explorerLinks, getSigner } = useWeb3();\nconst { fNum } = useNumbers();\nconst { upToLargeBreakpoint } = useBreakpoints();\nconst { darkMode } = useDarkMode();\n\nconst poolIds = computed((): string[] => CSP_ISSUE_POOL_IDS[networkId.value]);\nconst poolAddresses = computed(() => poolIds.value.map(id => id.slice(0, 42)));\nconst addressToPoolIdMap = computed(\n  () => new Map(poolIds.value.map(id => [id.slice(0, 42), id]))\n);\n\nconst enableBalanceFetching = computed(() => !!account.value);\n\nconst liquidityGaugesQuery = useGraphQuery<LiquidityGaugesQueryResponse>(\n  configService.network.subgraphs.gauge,\n  ['vulnerability', 'liquidityGauges', 'unstake', { networkId }],\n  () => ({\n    liquidityGauges: {\n      __args: { first: 1000, where: { poolId_in: poolIds.value } },\n      id: true,\n      symbol: true,\n      poolId: true,\n      poolAddress: true,\n    },\n  }),\n  {\n    keepPreviousData: true,\n    refetchOnWindowFocus: false,\n  }\n);\n\nconst auraGaugesQuery = useGraphQuery<AuraGaugesQueryResponse>(\n  'https://data.aura.finance/graphql',\n  ['vulnerability', 'auraGauges', 'unstake', { networkId }],\n  () => ({\n    pools: {\n      __args: { chainId: networkId.value },\n      id: true,\n      poolId: true,\n      address: true,\n      name: true,\n      lpToken: {\n        address: true,\n      },\n    },\n  }),\n  {\n    keepPreviousData: true,\n    refetchOnWindowFocus: false,\n  }\n);\n\nconst allLiquidityGauges = computed(\n  () => liquidityGaugesQuery.data.value?.liquidityGauges ?? []\n);\nconst allLiquidityGaugesAsTokenInfoMap = computed((): TokenInfoMap => {\n  const tokens = allLiquidityGauges.value.map(gauge => ({\n    chainId: networkId.value,\n    address: gauge.id,\n    decimals: 18,\n    symbol: gauge.symbol,\n    name: gauge.symbol,\n    tags: ['balancer'],\n  }));\n\n  return keyBy(tokens, 'address');\n});\n\nconst allAuraGauges = computed(() =>\n  (auraGaugesQuery.data.value?.pools ?? []).filter(pool =>\n    poolAddresses.value.includes(pool.lpToken.address)\n  )\n);\nconst allAuraGaugesAsTokenInfoMap = computed((): TokenInfoMap => {\n  const tokens = allAuraGauges.value.map(gauge => ({\n    chainId: networkId.value,\n    address: gauge.address,\n    decimals: 18,\n    symbol: gauge.name,\n    name: gauge.name,\n    tags: ['aura'],\n  }));\n\n  return keyBy(tokens, 'address');\n});\n\nconst allGaugesAsTokenInfoMap = computed(\n  (): TokenInfoMap =>\n    merge(\n      allAuraGaugesAsTokenInfoMap.value,\n      allLiquidityGaugesAsTokenInfoMap.value\n    )\n);\n\nconst enableBalancesQuery = computed(\n  () =>\n    enableBalanceFetching.value &&\n    (allLiquidityGauges.value.length > 0 || allAuraGauges.value.length > 0)\n);\n\n// Fetch user balances for all gauges.\nconst balancesQuery = useQuery(\n  [\n    'vulnerability',\n    'unstake',\n    'balances',\n    { networkId, allLiquidityGauges, allAuraGauges },\n  ],\n  async () =>\n    tokenService.balances.get(account.value, allGaugesAsTokenInfoMap.value),\n  { enabled: enableBalancesQuery }\n);\n\nconst balances = computed(() => balancesQuery.data.value || {});\n\nconst isLoading = computed(\n  (): boolean =>\n    isQueryLoading(liquidityGaugesQuery) || isQueryLoading(balancesQuery)\n);\n\nconst tokensWithBalance = computed(\n  (): TokenInfoMap =>\n    pickBy(allGaugesAsTokenInfoMap.value, token =>\n      bnum(balancerFor(token.address)).gt(0)\n    )\n);\n\n// The list of tokens to display in the table.\nconst tokensList = computed(() => Object.values(tokensWithBalance.value));\n\n/**\n * METHODS\n */\nasync function unstake(token: TokenInfo) {\n  const isAuraGauge = token.tags?.includes('aura');\n\n  if (isAuraGauge) {\n    return unstakeFromAuraGauge(token);\n  } else {\n    return unstakeFromBalancerChildGauge(token);\n  }\n}\n\nasync function unstakeFromAuraGauge(token: TokenInfo) {\n  const signer = getSigner();\n  const txBuilder = new TransactionBuilder(signer);\n  const gaugeInterface = new Interface(auraBaseRewardPool4626Abi);\n\n  return txBuilder.raw.sendTransaction({\n    to: token.address,\n    data: gaugeInterface.encodeFunctionData('withdrawAllAndUnwrap', [true]),\n  });\n}\n\nasync function unstakeFromBalancerChildGauge(token: TokenInfo) {\n  const signer = getSigner();\n  const txBuilder = new TransactionBuilder(signer);\n  const gaugeInterface = new Interface(balancerChildChainGaugeABi);\n  const balance = parseUnits(balancerFor(token.address), token.decimals);\n\n  return txBuilder.raw.sendTransaction({\n    to: token.address,\n    data: gaugeInterface.encodeFunctionData('withdraw', [balance]),\n  });\n}\n\nfunction balancerFor(address: string): string {\n  return balances.value[getAddress(address)];\n}\n\nfunction handleRowClick(token: TokenInfo) {\n  window.open(explorerLinks.addressLink(token.address));\n}\n\nfunction unstakeDisabled(token): boolean {\n  return bnum(balancerFor(token.address)).lte(0);\n}\n\nfunction refetchBalances() {\n  balancesQuery.refetch();\n  emit('unstaked');\n}\n\nfunction poolIdFor(token: TokenInfo): string {\n  const liquidityGauge = allLiquidityGauges.value.find(\n    gauge => gauge.id.toLowerCase() === token.address.toLowerCase()\n  );\n  if (liquidityGauge) return liquidityGauge.poolId;\n\n  const auraGauge = allAuraGauges.value.find(\n    gauge => gauge.address.toLowerCase() === token.address.toLowerCase()\n  );\n  if (auraGauge)\n    return addressToPoolIdMap.value.get(auraGauge.lpToken.address) || '';\n\n  return '';\n}\n\n/**\n * TABLE DEFINITION\n */\nconst columns = ref<ColumnDefinition<TokenInfo>[]>([\n  {\n    name: 'Icons',\n    id: 'icons',\n    accessor: 'uri',\n    Header: 'iconColumnHeader',\n    Cell: 'iconColumnCell',\n    width: 100,\n    noGrow: true,\n  },\n  {\n    name: 'Gauge',\n    id: 'token',\n    width: 350,\n    className: 'px-0',\n    accessor: token =>\n      `${token.symbol} (${token.tags?.includes('aura') ? 'Aura' : 'Balancer'})`,\n  },\n  {\n    name: 'Risk',\n    id: 'risk',\n    width: 150,\n    align: 'right',\n    noGrow: true,\n    accessor: 'risk',\n    Cell: 'riskCell',\n  },\n  {\n    name: 'Balance',\n    id: 'balance',\n    align: 'right',\n    width: 150,\n    cellClassName: 'font-numeric',\n    accessor: token => `${fNum(balancerFor(token.address), FNumFormats.token)}`,\n    sortKey: token => {\n      const value = Number(balancerFor(token.address));\n      if (value === Infinity || isNaN(value)) return 0;\n      return value;\n    },\n  },\n  {\n    name: '',\n    id: 'unwrap',\n    align: 'right',\n    accessor: 'unwrap',\n    Cell: 'unwrapColumnCell',\n    width: 150,\n  },\n]);\n</script>\n\n<template>\n  <div>\n    <h4 class=\"mb-2\">1. Unstake your Pool Tokens</h4>\n    <BalCard\n      shadow=\"lg\"\n      :square=\"upToLargeBreakpoint\"\n      :noBorder=\"upToLargeBreakpoint\"\n      noPad\n    >\n      <BalTable\n        :columns=\"columns\"\n        :data=\"tokensList\"\n        skeletonClass=\"h-64\"\n        :square=\"upToLargeBreakpoint\"\n        :isLoading=\"isLoading\"\n        :onRowClick=\"handleRowClick\"\n        :initialState=\"{\n          sortColumn: 'balance',\n          sortDirection: 'desc',\n        }\"\n      >\n        <template #iconColumnHeader>\n          <div class=\"flex items-center\">\n            <img\n              v-if=\"darkMode\"\n              :src=\"TokensWhite\"\n              alt=\"token\"\n              loading=\"lazy\"\n              width=\"24\"\n              height=\"15\"\n            />\n            <img\n              v-else\n              :src=\"TokensBlack\"\n              alt=\"token\"\n              loading=\"lazy\"\n              width=\"24\"\n              height=\"15\"\n            />\n          </div>\n        </template>\n        <template #iconColumnCell=\"token\">\n          <div v-if=\"!isLoading\" class=\"py-4 px-6 text-left\">\n            <BalAsset\n              :address=\"token.address\"\n              :iconURI=\"token.logoURI\"\n              :size=\"28\"\n            />\n          </div>\n        </template>\n        <template #riskCell=\"token\">\n          <div\n            v-if=\"!isLoading\"\n            class=\"flex justify-end items-center py-4 px-6 text-right\"\n          >\n            <BalChip\n              v-if=\"isHighRisk(poolIdFor(token))\"\n              label=\"High risk\"\n              color=\"red\"\n            />\n            <BalChip v-else label=\"Mitigated\" color=\"orange\" />\n          </div>\n        </template>\n        <template #unwrapColumnCell=\"token\">\n          <div class=\"flex justify-end py-4 px-6\">\n            <TxActionBtn\n              label=\"Unstake\"\n              color=\"gradient\"\n              size=\"sm\"\n              :actionFn=\"() => unstake(token)\"\n              action=\"unstake\"\n              :summary=\"fNum(balancerFor(token.address), FNumFormats.token)\"\n              :confirmingLabel=\"`Unstaking...`\"\n              :disabled=\"unstakeDisabled(token)\"\n              @confirmed=\"refetchBalances\"\n            />\n          </div>\n        </template>\n      </BalTable>\n    </BalCard>\n  </div>\n</template>\n","<script lang=\"ts\" setup>\nimport WithdrawalsTable from './components/WithdrawalsTable.vue';\nimport TokenUnwrapTable from './components/TokenUnwrapTable.vue';\nimport UnstakeTable from './components/UnstakeTable.vue';\n\nconst unstakeEvents = ref(0);\nconst withdrawalEvents = ref(0);\n</script>\n\n<template>\n  <div class=\"xl:container xl:px-4 pt-10 md:pt-12 xl:mx-auto\">\n    <div class=\"pb-4 content-container\">\n      <h2>Proportional exit</h2>\n      <div class=\"text-primary text-md\">\n        <div>\n          This tool was created to facilitate user exits from pools at risk to\n          the vulnerability described\n          <a\n            href=\"https://forum.balancer.fi/t/vulnerability-found-in-some-pools/5102/1\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n            class=\"text-blue-500 underline\"\n            >here</a\n          >. Many of these pools have been disabled to mitigate risk to user\n          funds, so they will only support a basic type of exit. You may need to\n          withdraw several times if you are a liquidity provider in a pool with\n          nested pool tokens.\n        </div>\n        <ol class=\"pt-4 steps\">\n          <li>\n            If your pool tokens are staked,\n            <span class=\"font-bold\">UNSTAKE</span> your pool tokens from the\n            liquidity gauge. This tool supports unstaking from\n            <span class=\"font-bold\">Balancer</span> and\n            <span class=\"font-bold\">Aura</span>\n            gauges.\n          </li>\n          <li>\n            Exit the liquidity pool by clicking the\n            <span class=\"font-bold\">WITHDRAW</span> button. If the pool contains\n            nested pool tokens you will need to\n            <span class=\"font-bold\">WITHDRAW</span> from the underlying pools as\n            well.\n          </li>\n          <li>\n            If you were deposited in a boosted pool, you will now have a wrapped\n            version of your assets in your wallet. You need to\n            <span class=\"font-bold\">APPROVE</span> the token to be unwrapped,\n            and then click <span class=\"font-bold\">UNWRAP</span> to receive the\n            underlying token.\n          </li>\n        </ol>\n        <p>\n          The general aim when using this tool is to keep unstaking, withdrawing\n          and unwrapping until you have nothing left in any of the tables below.\n        </p>\n        <BalAlert type=\"warning\" title=\"Check all networks\" block\n          >If you're invested in pools across several networks, select the\n          appropriate network from the selector in the top right of the\n          screen.</BalAlert\n        >\n      </div>\n    </div>\n    <UnstakeTable @unstaked=\"unstakeEvents++\" />\n    <WithdrawalsTable\n      :unstakeEvents=\"unstakeEvents\"\n      class=\"mt-8\"\n      @withdrawal=\"withdrawalEvents++\"\n    />\n    <TokenUnwrapTable :withdrawalEvents=\"withdrawalEvents\" class=\"mt-8\" />\n  </div>\n</template>\n\n<style scoped>\n.content-container :deep(h1) {\n  @apply pb-6;\n}\n\n.content-container :deep(h2),\n.content-container :deep(h3),\n.content-container :deep(p),\n.content-container :deep(ul),\n.content-container :deep(ol),\n.content-container :deep(em) {\n  @apply pb-4;\n}\n\n.content-container :deep(h4),\n.content-container :deep(h5),\n.content-container :deep(h6) {\n  @apply pb-2;\n}\n\n.content-container :deep(.subsection) {\n  @apply mb-8;\n}\n\n.content-container :deep(h1),\n.content-container :deep(h2),\n.content-container :deep(h3),\n.content-container :deep(h4) {\n  @apply font-body tracking-tight;\n\n  font-variation-settings: 'wght' 700;\n}\n\n.content-container :deep(h5) {\n  @apply font-body tracking-tight;\n}\n\n.content-container :deep(li) {\n  @apply list-disc ml-8 pb-2;\n}\n\n.content-container :deep(ol > li) {\n  @apply list-decimal;\n}\n\n.content-container :deep(.nav li > ul) {\n  padding-top: 0.375rem;\n}\n\n.content-container :deep(li > ul) {\n  padding-top: 0;\n  padding-bottom: 0;\n}\n\n.content-container :deep(.nav ul) {\n  padding-bottom: 0;\n}\n\n.content-container :deep(li),\n.content-container :deep(p) {\n  @apply text-gray-700 dark:text-gray-300;\n}\n\n.content-container :deep(em) {\n  font-style: italic;\n  font-variation-settings: 'ital' 1;\n  font-synthesis: none;\n}\n\n.content-container :deep(.link) {\n  font-variation-settings: 'wght' 500;\n}\n\n.content-container :deep(em.font-medium) {\n  font-variation-settings: 'ital' 1, 'wght' 500;\n}\n\n.content-container :deep(em.font-semibold) {\n  font-variation-settings: 'ital' 1, 'wght' 600;\n}\n</style>\n"],"names":["NO_RECOVERY_EXIT_POOL_IDS","Network","CSP_ISSUE_POOL_IDS","HIGH_RISK_POOL_IDS","isHighRisk","poolId","fNum","useNumbers","assetRowWidth","computed","props","tokenService","TokenService","showWithdrawalModal","ref","activePool","account","getSigner","useWeb3","slippageBsp","useUserSettings","transactionDeadline","useApp","upToLargeBreakpoint","useBreakpoints","darkMode","useDarkMode","router","useRouter","affectedPoolIds","networkId","affectedPools","id","enableBalanceFetching","poolBalancesQuery","useQuery","poolBpts","pool","balancerTokenLists","balances","poolsWithBalances","bnum","balancerFor","enablePoolsQuery","isQueryLoading","poolsQuery","balancerAPIService","p","pools","isLoading","getAddress","withdraw","exitPoolService","ExitPoolService","ExitHandler","ExitType","isWithdrawDisabled","iconAddresses","_a","poolMetadata","orderedTokenAddresses","handleRowClick","route","networkSlug","refetchBalances","doesNotSupportRecoveryExits","handleWithdrawal","emit","closeModal","handleWithdrawClick","watch","columns","FNumFormats","fiatValueOf","value","VaultActionsService","params","Interface","VaultActionsAbi","assets","minAmountsOut","userData","toInternalBalance","poolKind","sender","recipient","outputReferences","exitPoolInput","AaveWrappingService","aaveWrappingAbi","YearnWrappingService","YearnWrappingAbi","ReaperWrappingService","ReaperWrappingAbi","Erc4626WrappingService","Erc4626WrappingAbi","GaugeActionsService","GaugeActionsAbi","EulerWrappingService","BatchRelayerLibraryAbi","GearboxWrappingService","SiloWrappingService","TetuWrappingService","BatchRelayerService","__publicField","key","paddedPrefix","BigNumber","reference","signer","batchRelayerAddress","wrappedToken","poolType","amount","txBuilder","TransactionBuilder","call","batchRelayerInterface","BatchRelayerAbi","TOKENS_TO_EXCLUDE","explorerLinks","approveToken","useTokenApprovalActions","relayerApprovalTx","useRelayerApproval","RelayerType","linearPoolsQuery","useGraphQuery","configService","allLineaPools","allWrappedTokensWithType","uniqBy","token","enableTokenQuery","tokensQuery","item","address","tokens","enableBalancesQuery","balancesQuery","enableAllowancesQuery","allowancesQuery","allowances","tokensWithBalance","pickBy","tokensList","unwrap","batchRelayerService","item2","isSameAddress","parseUnits","approve","ApprovalAction","allowanceFor","_b","unwrapDisabled","requiresApproval","balancerChildChainGaugeABi","auraBaseRewardPool4626Abi","poolIds","poolAddresses","addressToPoolIdMap","liquidityGaugesQuery","auraGaugesQuery","allLiquidityGauges","allLiquidityGaugesAsTokenInfoMap","gauge","keyBy","allAuraGauges","allAuraGaugesAsTokenInfoMap","allGaugesAsTokenInfoMap","merge","unstake","unstakeFromAuraGauge","unstakeFromBalancerChildGauge","gaugeInterface","balance","unstakeDisabled","poolIdFor","liquidityGauge","auraGauge","unstakeEvents","withdrawalEvents"],"mappings":"ksFAEO,MAAMA,GAAuD,CAClE,CAACC,EAAQ,OAAO,EAAG,CAEjB,qEACA,qEACA,qEACA,qEAIA,qEACA,qEACA,qEAEA,oEACF,EACA,CAACA,EAAQ,OAAO,EAAG,CAAC,EACpB,CAACA,EAAQ,QAAQ,EAAG,CAAC,EACrB,CAACA,EAAQ,MAAM,EAAG,CAAC,EACnB,CAACA,EAAQ,KAAK,EAAG,CAAC,EAClB,CAACA,EAAQ,SAAS,EAAG,CAAC,EACtB,CAACA,EAAQ,IAAI,EAAG,CAAC,EACjB,CAACA,EAAQ,OAAO,EAAG,CAAC,EACpB,CAACA,EAAQ,MAAM,EAAG,CAAC,EACnB,CAACA,EAAQ,MAAM,EAAG,CAAC,EACnB,CAACA,EAAQ,QAAQ,EAAG,CAAC,EACrB,CAACA,EAAQ,YAAY,EAAG,CAAC,CAC3B,EAEaC,GAAgD,CAC3D,CAACD,EAAQ,OAAO,EAAG,CACjB,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,oEACF,EACA,CAACA,EAAQ,OAAO,EAAG,CACjB,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,oEACF,EACA,CAACA,EAAQ,QAAQ,EAAG,CAClB,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,oEACF,EACA,CAACA,EAAQ,MAAM,EAAG,CAChB,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,oEACF,EACA,CAACA,EAAQ,KAAK,EAAG,CACf,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,oEACF,EACA,CAACA,EAAQ,SAAS,EAAG,CACnB,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,oEACF,EACA,CAACA,EAAQ,IAAI,EAAG,CAAC,EACjB,CAACA,EAAQ,OAAO,EAAG,CACjB,oEACF,EACA,CAACA,EAAQ,MAAM,EAAG,CAAC,EACnB,CAACA,EAAQ,MAAM,EAAG,CAAC,EACnB,CAACA,EAAQ,QAAQ,EAAG,CAAC,EACrB,CAACA,EAAQ,YAAY,EAAG,CAAC,CAC3B,EAEaE,GAA+B,CAC1C,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,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"}