{"version":3,"file":"vebal-92191e65.js","sources":["../../src/components/_global/BalImage/BalImage.vue","../../src/assets/images/coins/coins-1.png","../../src/assets/images/coins/coins-2.png","../../src/assets/images/coins/coins-3.png","../../src/components/contextual/pages/vebal/Hero.vue","../../src/composables/useDebouncedRed.ts","../../src/composables/useVotingEscrowLocks.ts","../../src/composables/useVeBalLockInfo.ts","../../src/components/contextual/pages/vebal/LMVoting/GaugesFilters.vue","../../src/components/_global/BalLazy/BalLazy.vue","../../src/components/_global/icons/CompositionIcon.vue","../../src/components/_global/icons/NetworkIcon.vue","../../src/components/contextual/pages/vebal/LMVoting/GaugeVoteInfo.vue","../../src/components/contextual/pages/vebal/LMVoting/GaugesTableMyVotes.vue","../../src/components/icons/IconLimit.vue","../../src/components/contextual/pages/vebal/LMVoting/Ve8020Chip.vue","../../src/components/contextual/pages/vebal/LMVoting/GaugesTable.vue","../../src/components/contextual/pages/vebal/LMVoting/LMVoting.vue","../../src/components/contextual/pages/vebal/MyVeBAL/components/MyVeBalCards.vue","../../src/components/contextual/pages/vebal/MyVeBAL/MyVeBAL.vue","../../src/components/contextual/pages/vebal/cross-chain-boost/SyncSelectNetwork.vue","../../src/components/contextual/pages/vebal/cross-chain-boost/SyncNetworkAction.vue","../../src/assets/images/icons/success-check.svg","../../src/components/contextual/pages/vebal/cross-chain-boost/SyncFinalState.vue","../../src/components/contextual/pages/vebal/cross-chain-boost/CrossChainSyncModal.vue","../../src/components/contextual/pages/vebal/cross-chain-boost/CrossChainBoostCards.vue","../../src/pages/vebal.vue"],"sourcesContent":["<script lang=\"ts\" setup>\n/**\n * TYPES\n */\ntype Props = {\n  noFade?: boolean;\n  width?: string;\n  height?: string;\n};\n\n/**\n * PROPS & EMITS\n */\nconst props = withDefaults(defineProps<Props>(), {\n  noFade: false,\n  width: 'auto',\n  height: 'auto',\n});\n\n/**\n * STATE\n */\nconst loaded = ref(props.noFade);\n\n/**\n * COMPUTED\n */\nconst wrapperStyles = computed(() => ({\n  width: props.width,\n  height: props.height,\n}));\n\n/**\n * METHODS\n */\nfunction onLoaded() {\n  loaded.value = true;\n}\n</script>\n\n<template>\n  <div class=\"bal-image-wrapper\" :style=\"wrapperStyles\">\n    <Transition name=\"bal-image-fade\">\n      <img\n        v-show=\"loaded\"\n        :width=\"props.width\"\n        :height=\"props.height\"\n        v-bind=\"$attrs\"\n        @load=\"onLoaded\"\n      />\n    </Transition>\n  </div>\n</template>\n\n<style scoped>\n/* Image fade animation */\n.bal-image-fade-enter-active,\n.bal-image-fade-leave-active {\n  transition: all 0.5s ease-in-out 0.1s;\n  transform: scale(1) translateY(0);\n}\n\n.bal-image-fade-enter-from,\n.bal-image-fade-leave-to {\n  opacity: 0;\n  transform: scale(0.97) translateY(10px);\n}\n</style>\n","export default \"__VITE_ASSET__e57e2511__\"","export default \"__VITE_ASSET__8e0a1859__\"","export default \"__VITE_ASSET__946d7730__\"","<script setup lang=\"ts\">\nimport { computed } from 'vue';\nimport { useI18n } from 'vue-i18n';\nimport { useRouter } from 'vue-router';\n\nimport coin1 from '@/assets/images/coins/coins-1.png';\nimport coin2 from '@/assets/images/coins/coins-2.png';\nimport coin3 from '@/assets/images/coins/coins-3.png';\n\n/**\n * COMPOSABLES\n */\nconst { t } = useI18n();\nconst router = useRouter();\n\n/**\n * COMPUTED\n */\nconst benefits = computed(() => [\n  t('veBAL.hero.benefits.boost'),\n  t('veBAL.hero.benefits.vote'),\n  t('veBAL.hero.benefits.earn'),\n]);\n\n/**\n * METHODS\n */\nfunction navigateToGetVeBAL() {\n  router.push({\n    name: 'get-vebal',\n    query: {\n      returnRoute: 'vebal',\n    },\n  });\n}\n</script>\n\n<template>\n  <div class=\"hero-container\">\n    <div class=\"hero-content\">\n      <div\n        class=\"py-8 lg:py-4 px-4 lg:px-8 2xl:px-0 xl:pt-0 max-w-md hero-text\"\n      >\n        <p class=\"font-medium eyebrow\">vTSYMM</p>\n        <h1 class=\"mb-5 text-white title\">\n          {{ $t('veBAL.hero.title') }}\n        </h1>\n        <ul>\n          <li\n            v-for=\"(benefit, i) in benefits\"\n            :key=\"i\"\n            class=\"flex items-center mb-2 text-white\"\n          >\n            â€“ {{ benefit }}\n          </li>\n        </ul>\n        <div class=\"flex mt-6\">\n          <BalBtn class=\"mr-3 hero-btn btn-gold\" @click=\"navigateToGetVeBAL\">\n            {{ $t('veBAL.hero.buttons.getVeBAL') }}\n          </BalBtn>\n          <BalBtn\n            tag=\"a\"\n            href=\"https://docs.balancer.fi/concepts/governance/veBAL/\"\n            target=\"_blank\"\n            rel=\"noreferrer\"\n            color=\"white\"\n            class=\"hero-btn\"\n            outline\n          >\n            {{ $t('veBAL.hero.buttons.learnMore') }}\n            <BalIcon\n              name=\"arrow-up-right\"\n              size=\"sm\"\n              class=\"ml-px group-hover:text-pink-500 transition-colors\"\n            />\n          </BalBtn>\n        </div>\n      </div>\n      <div class=\"coins\">\n        <div class=\"group coin\">\n          <div class=\"w-full coin-wrapper\">\n            <BalImage\n              class=\"graphic\"\n              width=\"330\"\n              height=\"377\"\n              :src=\"coin1\"\n              alt=\"BAL and WETH tokens\"\n            />\n          </div>\n          <div class=\"font-semibold caption\">\n            <p\n              class=\"inline mr-1 text-sm lg:text-base tracking-tighter lg:tracking-normal\"\n            >\n              {{ $t('veBAL.hero.tokens.balWETH') }}\n            </p>\n            <BalTooltip iconSize=\"xs\" textAlign=\"left\" class=\"mt-1 font-medium\">\n              {{ $t('veBAL.hero.tokenInfo.balWETH') }}\n            </BalTooltip>\n          </div>\n        </div>\n        <div class=\"group coin\">\n          <div class=\"coin-wrapper\">\n            <BalImage\n              class=\"graphic\"\n              width=\"330\"\n              height=\"377\"\n              :src=\"coin2\"\n              alt=\"S-80TSYMM-20WTLOS LP token\"\n            />\n          </div>\n          <div class=\"font-semibold caption\">\n            <p\n              class=\"inline mr-1 text-sm lg:text-base tracking-tighter lg:tracking-normal\"\n            >\n              {{ $t('veBAL.hero.tokens.lpToken') }}\n            </p>\n            <BalTooltip iconSize=\"xs\" textAlign=\"left\" class=\"mt-1\">\n              {{ $t('veBAL.hero.tokenInfo.lpToken') }}\n            </BalTooltip>\n          </div>\n        </div>\n        <div class=\"group coin\">\n          <div class=\"coin-wrapper\">\n            <BalImage\n              class=\"graphic\"\n              width=\"330\"\n              height=\"377\"\n              :src=\"coin3\"\n              alt=\"veBAL token\"\n            />\n          </div>\n          <div class=\"font-semibold caption\">\n            <p\n              class=\"inline mr-1 text-sm lg:text-base tracking-tighter lg:tracking-normal\"\n            >\n              {{ $t('veBAL.hero.tokens.veBAL') }}\n            </p>\n            <BalTooltip iconSize=\"xs\" textAlign=\"left\" class=\"mt-1\">\n              {{ $t('veBAL.hero.tokenInfo.veBAL') }}\n            </BalTooltip>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n<style scoped>\n.hero-container {\n  @apply flex content-center relative w-full;\n\n  min-height: 440px;\n  z-index: 0;\n  background-color: #0b0f19;\n}\n\n.dark .hero-container {\n  background-color: #0e1420;\n}\n\n.hero-container::before {\n  content: ' ';\n  background-image: url('/images/patterns/fish-scale.png');\n  background-repeat: repeat;\n\n  @apply block absolute left-0 top-0 w-full h-full opacity-10 z-0;\n}\n\n.dark .hero-container::before {\n  opacity: 0.07;\n}\n\n.hero-container::after {\n  content: ' ';\n  background: linear-gradient(45deg, rgb(0 0 0 / 100%), rgb(0 0 0 / 50%)),\n    url('/images/backgrounds/vebal-hero-noise.svg');\n\n  @apply block absolute left-0 top-0 w-full h-full bg-no-repeat bg-cover opacity-20 z-0;\n\n  min-height: 440px;\n}\n\n.hero-content {\n  @apply flex flex-col md:flex-row md:items-center max-w-screen-2xl mx-auto md:gap-4 lg:gap-8 py-4 md:py-8\n    xl:pl-4 w-full z-10;\n}\n\n.eyebrow {\n  @apply mb-4;\n\n  color: #ccb373;\n  background: linear-gradient(#ccb373, #977622);\n  background-clip: text;\n  -webkit-text-fill-color: transparent;\n}\n\n.hero-text {\n  @apply opacity-0;\n\n  animation: fadeIn 1s ease-out 0.1s both;\n}\n\n.title {\n  @apply max-w-sm;\n}\n\n.hero-btn {\n  min-width: 140px;\n}\n\n.btn-gold {\n  background: linear-gradient(45deg, #977622, #ccb373);\n  transition: 0.5s all ease-in-out;\n}\n\n.btn-gold:hover {\n  background: linear-gradient(-45deg, #ae8d39, #684e09);\n}\n\n.coins {\n  @apply flex lg:gap-8 px-1 lg:px-0;\n\n  flex-grow: 1;\n}\n\n.coin-wrapper {\n  aspect-ratio: 7 / 8;\n}\n\n.coin {\n  @apply w-full flex flex-col items-center justify-end relative;\n}\n\n.graphic {\n  @apply transition-transform duration-300 relative;\n}\n\n.coin:hover .graphic {\n  transform: translateY(-8px);\n}\n\n.caption {\n  @apply text-sm md:text-base text-gray-400 transition-colors text-center group-hover:text-white;\n\n  animation: fadeInMoveUp 0.5s ease-out 0.15s both;\n}\n\n@media (min-width: 768px) {\n  .hero-text {\n    min-width: 400px;\n  }\n}\n\n.caption .bal-icon {\n  animation: fadeInMoveUp 0.5s ease-out 0.15s both;\n}\n</style>\n","import { customRef, Ref } from 'vue';\n\n// Taken from https://vuejs.org/api/reactivity-advanced.html#customref\nexport default function useDebouncedRef<T>(value: T, delay = 200): Ref<T> {\n  let timeout: NodeJS.Timeout;\n  return customRef((track, trigger) => {\n    return {\n      get() {\n        track();\n        return value;\n      },\n      set(newValue) {\n        clearTimeout(timeout);\n        timeout = setTimeout(() => {\n          value = newValue;\n          trigger();\n        }, delay);\n      },\n    };\n  });\n}\n","import { computed, reactive } from 'vue';\nimport useGraphQuery, { subgraphs } from '@/composables/queries/useGraphQuery';\nimport useWeb3 from '@/services/web3/useWeb3';\nimport useConfig from '@/composables/useConfig';\nimport { bnum, isSameAddress } from '@/lib/utils';\nimport useVeBalLockInfoQuery from '@/composables/queries/useVeBalLockInfoQuery';\nimport useVotingPools from '@/composables/useVotingPools';\nimport { VotingPool } from '@/composables/queries/useVotingPoolsQuery';\nimport configs from '@/lib/config';\nimport { networkId } from '@/composables/useNetwork';\nimport useExpiredGaugesQuery from '@/composables/queries/useExpiredGaugesQuery';\nimport useVeBal, { isVotingTimeLocked } from '@/composables/useVeBAL';\nimport QUERY_KEYS from '@/constants/queryKeys';\n\n/**\n * TYPES\n */\nexport type VotingEscrowLock = {\n  votingEscrowID: {\n    id: string;\n  };\n  updatedAt: number;\n};\n\ntype VotingEscrowLockQueryResponse = {\n  votingEscrowLocks: VotingEscrowLock[];\n};\n\nexport default function useVotingEscrowLocks() {\n  /**\n   * COMPOSABLES\n   */\n  const { account } = useWeb3();\n  const { networkConfig } = useConfig();\n  const veBalLockInfoQuery = useVeBalLockInfoQuery();\n  const { votingPools: allVotingPools, votingGaugeAddresses } =\n    useVotingPools();\n  const { veBalBalance } = useVeBal();\n\n  const votingEscrowLocksQueryEnabled = computed(() => !!account.value);\n  const votingEscrowLocksQuery = useGraphQuery<VotingEscrowLockQueryResponse>(\n    subgraphs.gauge,\n    QUERY_KEYS.Gauges.VotingEscrowLocks(\n      veBalLockInfoQuery.data.value?.lockedAmount\n    ),\n    () => ({\n      __name: 'VeBalVotingEscrowLock',\n      votingEscrowLocks: {\n        __args: {\n          where: {\n            user: account.value.toLowerCase(),\n            votingEscrowID:\n              configs[networkId.value].addresses.veBAL.toLocaleLowerCase(),\n          },\n        },\n        votingEscrowID: {\n          id: true,\n        },\n        updatedAt: true,\n      },\n    }),\n    reactive({ enabled: votingEscrowLocksQueryEnabled })\n  );\n\n  /**\n   * COMPUTED\n   */\n  const votingEscrowLocks = computed(\n    () => votingEscrowLocksQuery.data.value?.votingEscrowLocks\n  );\n\n  const { data: expiredGauges } = useExpiredGaugesQuery(votingGaugeAddresses);\n\n  //  If user has received more veBAL since they last voted, their voting power is under-utilized\n  const poolsUsingUnderUtilizedVotingPower = computed<VotingPool[]>(() =>\n    allVotingPools.value.filter(pool => {\n      return (\n        // Does the gauge have user votes\n        bnum(pool.userVotes).gt(0) &&\n        // Has user received veBAL since they last voted\n        pool.lastUserVoteTime < lastReceivedVebal.value &&\n        // Is voting currently not locked\n        !isVotingTimeLocked(pool.lastUserVoteTime) &&\n        // Is gauge not expired\n        !expiredGauges.value?.includes(pool.gauge.address)\n      );\n    })\n  );\n\n  const shouldResubmitVotes = computed<boolean>(\n    () =>\n      // Does user have any veBAL\n      bnum(veBalBalance.value).gt(0) &&\n      !!poolsUsingUnderUtilizedVotingPower.value.length\n  );\n\n  // Timestamp when user has last received veBAL\n  const lastReceivedVebal = computed(\n    () =>\n      votingEscrowLocks.value?.find(item =>\n        isSameAddress(item.votingEscrowID.id, networkConfig.addresses.veBAL)\n      )?.updatedAt || 0\n  );\n\n  return {\n    votingEscrowLocks,\n    lastReceivedVebal,\n    poolsUsingUnderUtilizedVotingPower,\n    shouldResubmitVotes,\n  };\n}\n","import useVeBalLockInfoQuery from '@/composables/queries/useVeBalLockInfoQuery';\n\nconst MINIMUM_LOCK_TIME = 86_400_000 * 7;\n\nexport function useVeBalLockInfo() {\n  const veBalLockInfoQuery = useVeBalLockInfoQuery();\n\n  const isLoading = computed(() => veBalLockInfoQuery.isLoading);\n\n  const veBalLockInfo = computed(() => veBalLockInfoQuery.data.value);\n\n  const veBalExpired = computed(() => veBalLockInfo.value?.isExpired);\n\n  const hasLock = computed(\n    (): boolean =>\n      !!veBalLockInfo.value?.hasExistingLock && !veBalLockInfo.value?.isExpired\n  );\n\n  const hasExpiredLock = computed(\n    (): boolean =>\n      !!veBalLockInfo.value?.hasExistingLock && veBalLockInfo.value?.isExpired\n  );\n\n  const veBalLockTooShort = computed((): boolean => {\n    if (\n      veBalLockInfo.value?.hasExistingLock &&\n      !veBalLockInfo.value?.isExpired\n    ) {\n      const lockEndDate = veBalLockInfo.value?.lockedEndDate;\n      return lockEndDate < Date.now() + MINIMUM_LOCK_TIME;\n    }\n\n    return false;\n  });\n\n  return {\n    isLoading,\n    hasLock,\n    hasExpiredLock,\n    veBalLockTooShort,\n    veBalExpired,\n  };\n}\n","<script setup lang=\"ts\">\nimport configs from '@/lib/config';\nimport { Network } from '@/lib/config/types';\n\n/**\n * TYPES\n */\ntype Props = {\n  networkFilters: Network[];\n  showExpiredGauges: boolean;\n  activeNetworkFilters: number[];\n};\n\nconst emit = defineEmits<{\n  (e: 'choose-network', value: number): void;\n  (e: 'update:showExpiredGauges', value: boolean): void;\n  (e: 'update:activeNetworkFilters', value: number[]): void;\n}>();\n\n/**\n * PROPS\n */\nconst props = defineProps<Props>();\n\n/**\n * STATE\n */\nconst networkFiltersArr = ref([...props.activeNetworkFilters]);\n\n/**\n * isExpiredFilterActive and activeNetworksArr are created to handle activeFiltersNum computed\n * otherwise activeFiltersNum would change only after 500ms debounce which lead to poor UX\n */\nconst isExpiredFilterActive = ref(false);\nconst activeNetworksArr = ref<number[]>([]);\n\n/**\n * COMPUTED\n */\nconst activeFiltersNum = computed(() => {\n  return activeNetworksArr.value.length + Number(isExpiredFilterActive.value);\n});\n\n/**\n * METHODS\n */\nfunction handleExpInput(e) {\n  const { checked } = e.target;\n  isExpiredFilterActive.value = checked;\n  emit('update:showExpiredGauges', checked);\n}\n\nfunction updateNetwork(network: number) {\n  const index = networkFiltersArr.value.indexOf(network);\n\n  index === -1\n    ? networkFiltersArr.value.push(network)\n    : networkFiltersArr.value.splice(index, 1);\n\n  const arr = [...networkFiltersArr.value];\n  emit('update:activeNetworkFilters', arr);\n  activeNetworksArr.value = arr;\n}\n</script>\n\n<template>\n  <BalPopover noPad class=\"flex-0\">\n    <template #activator>\n      <BalBtn class=\"flex-1 h-full\" color=\"white\" size=\"sm\">\n        <BalIcon\n          name=\"filter\"\n          size=\"lg\"\n          class=\"mr-3 text-gray-600 dark:text-gray-100\"\n        />\n        <div class=\"flex text-gray-600 dark:text-gray-100\">\n          {{ $t('gaugeFilter.moreFilters') }}\n        </div>\n        <div v-if=\"activeFiltersNum > 0\" class=\"px-2\">\n          <div\n            class=\"flex justify-center items-center p-2 w-5 h-5 text-xs text-center text-white bg-blue-600 rounded-full\"\n          >\n            {{ activeFiltersNum }}\n          </div>\n        </div>\n      </BalBtn>\n    </template>\n    <div class=\"flex overflow-hidden flex-col py-4 px-3 w-64 rounded-lg\">\n      <div class=\"text-xl font-bold whitespace-nowrap\">\n        {{ $t('network') }}\n      </div>\n      <div\n        v-for=\"network in networkFilters\"\n        :key=\"network\"\n        class=\"flex py-1 text-base text-gray-600 dark:text-gray-100 hover:bg-gray-50 dark:hover:bg-gray-850 cursor-pointer\"\n      >\n        <BalCheckbox\n          :modelValue=\"networkFiltersArr.includes(Number(network))\"\n          name=\"networkFilter\"\n          :label=\"configs[network].chainName\"\n          noMargin\n          alignCheckbox=\"items-center\"\n          @input=\"updateNetwork(Number(network))\"\n        />\n      </div>\n\n      <div class=\"py-2 text-xl font-bold\">\n        {{ $t('gaugeFilter.gaugeDisplay') }}\n      </div>\n\n      <BalCheckbox\n        class=\"flex py-1 text-base text-gray-600 dark:text-gray-100 hover:bg-gray-50 dark:hover:bg-gray-850 cursor-pointer\"\n        name=\"expiredGaugesFilter\"\n        :label=\"$t('gaugeFilter.showExpired')\"\n        noMargin\n        alignCheckbox=\"items-center\"\n        :modelValue=\"showExpiredGauges\"\n        @input=\"handleExpInput\"\n      />\n    </div>\n  </BalPopover>\n</template>\n","<script setup lang=\"ts\">\nconst shouldRender = ref(false);\nnextTick(() => {\n  shouldRender.value = true;\n});\n</script>\n\n<template>\n  <slot v-if=\"shouldRender\" />\n</template>","<script lang=\"ts\" setup>\nimport useDarkMode from '@/composables/useDarkMode';\nimport useTailwind from '@/composables/useTailwind';\n\nconst { theme } = useTailwind();\nconst { darkMode } = useDarkMode();\n\nconst color = computed(() =>\n  darkMode.value ? theme.colors.white : theme.colors.black\n);\n</script>\n\n<template>\n  <svg\n    width=\"24\"\n    height=\"15\"\n    viewBox=\"0 0 24 15\"\n    fill=\"none\"\n    xmlns=\"http://www.w3.org/2000/svg\"\n  >\n    <circle cx=\"7.5\" cy=\"7.5\" r=\"7\" :stroke=\"color\" />\n    <circle cx=\"16.5\" cy=\"7.5\" r=\"7\" :stroke=\"color\" />\n  </svg>\n</template>\n","<script lang=\"ts\" setup>\nimport useDarkMode from '@/composables/useDarkMode';\nimport useTailwind from '@/composables/useTailwind';\n\nconst { theme } = useTailwind();\nconst { darkMode } = useDarkMode();\n\nconst color = computed(() =>\n  darkMode.value ? theme.colors.white : theme.colors.black\n);\n</script>\n\n<template>\n  <svg\n    width=\"20\"\n    height=\"20\"\n    viewBox=\"0 0 20 20\"\n    fill=\"none\"\n    xmlns=\"http://www.w3.org/2000/svg\"\n  >\n    <path\n      d=\"M9.99984 18.3333C14.6022 18.3333 18.3332 14.6023 18.3332 9.99996C18.3332 5.39759 14.6022 1.66663 9.99984 1.66663C5.39746 1.66663 1.6665 5.39759 1.6665 9.99996C1.6665 14.6023 5.39746 18.3333 9.99984 18.3333Z\"\n      :stroke=\"color\"\n      stroke-width=\"1.25\"\n      stroke-linecap=\"round\"\n      stroke-linejoin=\"round\"\n    />\n    <path\n      d=\"M1.6665 10H18.3332\"\n      :stroke=\"color\"\n      stroke-width=\"1.25\"\n      stroke-linecap=\"round\"\n      stroke-linejoin=\"round\"\n    />\n    <path\n      d=\"M9.99984 1.66663C12.0842 3.94859 13.2688 6.90999 13.3332 9.99996C13.2688 13.0899 12.0842 16.0513 9.99984 18.3333C7.91544 16.0513 6.73088 13.0899 6.6665 9.99996C6.73088 6.90999 7.91544 3.94859 9.99984 1.66663V1.66663Z\"\n      :stroke=\"color\"\n      stroke-width=\"1.25\"\n      stroke-linecap=\"round\"\n      stroke-linejoin=\"round\"\n    />\n  </svg>\n</template>\n","<script setup lang=\"ts\">\nimport useNumbers from '@/composables/useNumbers';\nimport { bnum, scale } from '@/lib/utils';\nimport { VotingPool } from '@/composables/queries/useVotingPoolsQuery';\n\n/**\n * TYPES\n */\ntype Props = {\n  pool: VotingPool;\n};\n\n/**\n * PROPS & EMITS\n */\nconst props = withDefaults(defineProps<Props>(), {});\n\n/**\n * COMPOSABLES\n */\nconst { fNum } = useNumbers();\n\n/**\n * COMPUTED\n */\n\nconst votesThisPeriod = computed<string>(() =>\n  formatVotesAsPercent(props.pool.votes)\n);\n\nconst votesNextPeriod = computed<string>(() =>\n  formatVotesAsPercent(props.pool.votesNextPeriod)\n);\n\nconst voteDifference = computed<number>(() => {\n  return Number(props.pool.votesNextPeriod) - Number(props.pool.votes);\n});\n\nconst voteDifferenceText = computed<string>(() => {\n  const text = formatVotesAsPercent(voteDifference.value.toString());\n  const prefix = voteDifference.value > 0 ? '+' : '';\n  return `${prefix}${text}`;\n});\n\nconst voteTextClass = computed(() => {\n  return {\n    'text-green-600': voteDifference.value > 0,\n    'text-red-600': voteDifference.value < 0,\n  };\n});\n\n/**\n * METHODS\n */\nfunction formatVotesAsPercent(votes: string): string {\n  const normalizedVotes = scale(bnum(votes), -18);\n  return fNum(normalizedVotes.toString(), {\n    style: 'percent',\n    maximumFractionDigits: 2,\n    fixedFormat: true,\n  });\n}\n</script>\n\n<template>\n  <BalTooltip textAlign=\"left\">\n    <template #activator>\n      <span :class=\"voteTextClass\">{{ votesNextPeriod }}</span>\n    </template>\n    <div>\n      <div class=\"mb-2 text-sm font-semibold\">\n        {{ $t('veBAL.liquidityMining.votesTooltip.title') }}\n      </div>\n      <div class=\"text-xs font-normal\">\n        <div class=\"mb-2\">\n          {{\n            $t('veBAL.liquidityMining.votesTooltip.thisPeriod', [\n              votesThisPeriod,\n            ])\n          }}\n        </div>\n        <div class=\"mb-2\">\n          {{\n            $t('veBAL.liquidityMining.votesTooltip.nextPeriod', [\n              votesNextPeriod,\n            ])\n          }}\n          <span :class=\"voteTextClass\">{{ voteDifferenceText }}</span>\n        </div>\n      </div>\n    </div>\n  </BalTooltip>\n</template>\n","\n<script setup lang=\"ts\">\nimport { isSameAddress, scale } from '@/lib/utils';\nimport { VotingPool } from '@/composables/queries/useVotingPoolsQuery';\nimport BigNumber from 'bignumber.js';\nimport useNumbers from '@/composables/useNumbers';\nimport useVotingEscrowLocks from '@/composables/useVotingEscrowLocks';\nimport { useI18n } from 'vue-i18n';\nimport { isVotingTimeLocked } from '@/composables/useVeBAL';\nimport BalTooltip from '@/components/_global/BalTooltip/BalTooltip.vue';\nimport TimeLockedVote from '../MultiVoting/TimeLockedVote.vue';\n\n/**\n * TYPES\n */\ntype Props = {\n  pool: VotingPool;\n};\n\n/**\n * PROPS & EMITS\n */\nconst props = defineProps<Props>();\n\n/**\n * COMPOSABLES\n */\nconst { t } = useI18n();\nconst { fNum } = useNumbers();\nconst { poolsUsingUnderUtilizedVotingPower } = useVotingEscrowLocks();\n\nconst myVotes = computed(() => {\n  const normalizedVotes = scale(new BigNumber(props.pool.userVotes), -4);\n  return fNum(normalizedVotes.toString(), {\n    style: 'percent',\n    maximumFractionDigits: 2,\n  });\n});\n\nconst poolHasUnderUtilizedVotingPower = computed<boolean>(\n  () =>\n    !!poolsUsingUnderUtilizedVotingPower.value.find(pool =>\n      isSameAddress(pool.address, props.pool.address)\n    )\n);\n</script>\n\n<template>\n  <div\n    :class=\"{\n      'flex justify-end items-center': true,\n      'text-red-600': poolHasUnderUtilizedVotingPower,\n    }\"\n  >\n    {{ myVotes }}\n    <TimeLockedVote\n      v-if=\"isVotingTimeLocked(pool.lastUserVoteTime)\"\n      :pool=\"pool\"\n    />\n    <BalTooltip\n      v-else-if=\"poolHasUnderUtilizedVotingPower\"\n      template\n      textAlign=\"left\"\n      width=\"60\"\n    >\n      <template #activator>\n        <BalIcon class=\"ml-1\" name=\"alert-triangle\" size=\"sm\" />\n      </template>\n      <div class=\"flex flex-col gap-1\">\n        <span class=\"font-semibold\"\n          >{{ t('veBAL.liquidityMining.resubmit.hint.title') }}\n        </span>\n        <span>\n          {{ t('veBAL.liquidityMining.resubmit.hint.description') }}\n        </span>\n      </div>\n    </BalTooltip>\n  </div>\n</template>\n\n","<script setup lang=\"ts\">\nimport { computed } from 'vue';\n\n/**\n * TYPES\n */\ntype Props = {\n  amount?: string;\n  tooltip?: string;\n  size?: 'sm' | 'md' | 'lg';\n};\n\n/**\n * PROPS\n */\nconst props = withDefaults(defineProps<Props>(), {\n  amount: '1',\n  tooltip: `Limit amount`,\n  size: 'md',\n});\n\n/**\n * COMPUTED\n */\nconst sizeClass = computed(() => {\n  switch (props.size) {\n    case 'sm':\n      return 'text-xxs p-0 w-5 h-5 leading-4';\n    case 'lg':\n      return 'text-md p-2 w-11 h-11';\n    default:\n      return 'text-sm p-1 w-8 h-8';\n  }\n});\n</script>\n\n<template>\n  <BalTooltip textAlign=\"left\">\n    <template #activator>\n      <div\n        :class=\"sizeClass\"\n        class=\"inline-block font-medium text-center rounded-full border-2 border-red-600\"\n      >\n        {{ amount }}\n      </div>\n    </template>\n    <div>\n      <div class=\"text-xs font-normal\">\n        {{ tooltip }}\n      </div>\n    </div>\n  </BalTooltip>\n</template>\n\n<style scoped>\n.text-xxs {\n  font-size: 0.6rem;\n  line-height: 1rem;\n}\n</style>\n","<template>\n  <div\n    class=\"flex relative items-center py-1 pr-1.5 pl-2 mr-1 max-h-10 text-white bg-gradient-to-tr rounded from-[#977622] to-[#f0cb6d]\"\n  >\n    <span class=\"text-xs font-semibold\">ve8020</span>\n  </div>\n</template>\n","<script setup lang=\"ts\">\nimport { useRouter } from 'vue-router';\nimport { useI18n } from 'vue-i18n';\n\nimport { ColumnDefinition } from '@/components/_global/BalTable/types';\n\nimport BalChipNew from '@/components/chips/BalChipNew.vue';\nimport BalChipExpired from '@/components/chips/BalChipExpired.vue';\nimport TokenPills from '@/components/tables/PoolsTable/TokenPills/TokenPills.vue';\nimport useBreakpoints from '@/composables/useBreakpoints';\nimport { getNetworkSlug } from '@/composables/useNetwork';\nimport {\n  isGyro,\n  isStableLike,\n  isUnknownType,\n  isVeBalPool,\n  poolURLFor,\n} from '@/composables/usePoolHelpers';\nimport { VotingPool } from '@/composables/queries/useVotingPoolsQuery';\nimport useWeb3 from '@/services/web3/useWeb3';\n\nimport GaugeVoteInfo from './GaugeVoteInfo.vue';\nimport GaugesTableMyVotes from './GaugesTableMyVotes.vue';\nimport BalAssetSet from '@/components/_global/BalAsset/BalAssetSet.vue';\nimport {\n  orderedTokenURIs,\n  orderedGaugeTokens,\n  isVe8020Pool,\n} from '@/composables/useVotingPools';\nimport IconLimit from '@/components/icons/IconLimit.vue';\nimport { buildNetworkIconURL } from '@/lib/utils/urls';\nimport { poolMetadata } from '@/lib/config/metadata';\nimport Ve8020Chip from './Ve8020Chip.vue';\nimport PoolFeatureChip from '@/components/chips/PoolFeatureChip.vue';\nimport { PoolFeature } from '@/types/pools';\nimport { Protocol } from '@/composables/useProtocols';\nimport { isVotingTimeLocked } from '@/composables/useVeBAL';\nimport { useVoting } from '@/components/contextual/pages/vebal/providers/voting.provider';\nimport {\n  hasUserVotes,\n  isGaugeNew,\n} from '@/components/contextual/pages/vebal/voting-utils';\n\n/**\n * TYPES\n */\ntype Props = {\n  data?: VotingPool[];\n  isLoading?: boolean;\n  noPoolsLabel?: string;\n  isPaginated?: boolean;\n  filterText?: string;\n  renderedRowsIdx: number;\n  selectVotesDisabled: boolean;\n};\n\n/**\n * PROPS & EMITS\n */\nconst props = withDefaults(defineProps<Props>(), {\n  showPoolShares: false,\n  noPoolsLabel: 'No pools',\n  filterText: '',\n  isPaginated: false,\n  data: () => [],\n});\n\n/**\n * COMPOSABLES\n */\nconst router = useRouter();\nconst { t } = useI18n();\nconst { upToLargeBreakpoint } = useBreakpoints();\nconst { isWalletReady } = useWeb3();\nconst { getIsGaugeExpired, toggleSelection, isSelected } = useVoting();\n\n/**\n * DATA\n */\nconst columns = computed((): ColumnDefinition<VotingPool>[] => [\n  {\n    name: t('veBAL.liquidityMining.table.chain'),\n    id: 'chain',\n    accessor: '',\n    Header: 'chainColumnHeader',\n    Cell: 'networkColumnCell',\n    width: 50,\n    noGrow: true,\n  },\n  {\n    name: t('veBAL.liquidityMining.table.assets'),\n    id: 'icons',\n    accessor: 'uri',\n    Header: 'iconColumnHeader',\n    Cell: 'iconColumnCell',\n    width: 100,\n    noGrow: true,\n  },\n  {\n    name: t('veBAL.liquidityMining.table.composition'),\n    id: 'poolComposition',\n    accessor: 'id',\n    Cell: 'poolCompositionCell',\n    width: 350,\n  },\n  {\n    name: t('veBAL.liquidityMining.table.nextPeriodVotes'),\n    accessor: 'id',\n    align: 'right',\n    id: 'nextPeriodVotes',\n    Cell: 'nextPeriodVotesCell',\n    sortKey: pool => Number(pool.votesNextPeriod),\n    width: 160,\n    cellClassName: 'font-numeric',\n  },\n  {\n    name: t('veBAL.liquidityMining.table.myVotes'),\n    accessor: 'myVotes',\n    align: 'right',\n    id: 'myVotes',\n    sortKey: pool => Number(pool.userVotes),\n    width: 100,\n    Cell: 'myVotesCell',\n    cellClassName: 'font-numeric',\n    hidden: !isWalletReady.value,\n  },\n  {\n    name: t('veBAL.liquidityMining.table.voteSelect'),\n    id: 'vote',\n    accessor: 'id',\n    align: 'right',\n    Cell: 'voteSelectColumnCell',\n    sortKey: pool => isSelected(pool),\n    width: 100,\n    hidden: !isWalletReady.value,\n    isCheckbox: true,\n  },\n]);\n\n/**\n * METHODS\n */\nfunction isInternalUrl(url: string): boolean {\n  return url.includes('balancer.fi') || url.includes('localhost');\n}\n\nfunction redirectToPool(pool: VotingPool, inNewTab) {\n  const redirectUrl = poolURLFor(pool, pool.network);\n  if (!isInternalUrl(redirectUrl)) {\n    window.location.href = redirectUrl;\n  } else {\n    const route = router.resolve({\n      name: 'pool',\n      params: { id: pool.id, networkSlug: getNetworkSlug(pool.network) },\n    });\n    inNewTab ? window.open(route.href) : router.push(route);\n  }\n}\n\nfunction getPoolExternalUrl(pool: VotingPool) {\n  const poolUrl = poolURLFor(pool, pool.network);\n  return isInternalUrl(poolUrl) ? null : poolUrl;\n}\n\nfunction getHasUserVotes(userVotes: string): boolean {\n  return !!Number(userVotes);\n}\n\nfunction getTableRowClass(pool: VotingPool): string {\n  return getHasUserVotes(pool.userVotes) &&\n    getIsGaugeExpired(pool.gauge.address)\n    ? 'expired-gauge-row'\n    : '';\n}\n\nfunction getSelectedTokens(tokens: VotingPool['tokens']) {\n  return tokens\n    .filter(\n      token => token.symbol?.toLowerCase() === props.filterText?.toLowerCase()\n    )\n    .map(item => item.address);\n}\n\nfunction getPickedTokens(tokens: VotingPool['tokens']) {\n  return tokens\n    .filter(\n      token =>\n        props.filterText &&\n        token.symbol?.toLowerCase().includes(props.filterText?.toLowerCase())\n    )\n    .map(item => item.address);\n}\n</script>\n\n<template>\n  <BalCard\n    shadow=\"lg\"\n    class=\"mt-4\"\n    :square=\"upToLargeBreakpoint\"\n    :noBorder=\"upToLargeBreakpoint\"\n    noPad\n  >\n    <BalTable\n      :columns=\"columns\"\n      :data=\"data\"\n      :rowKey=\"(dataItem: VotingPool) => dataItem.gauge.address\"\n      :isLoading=\"isLoading\"\n      skeletonClass=\"h-64\"\n      sticky=\"both\"\n      :square=\"upToLargeBreakpoint\"\n      :isPaginated=\"isPaginated\"\n      :href=\"{ getHref: gauge => getPoolExternalUrl(gauge) }\"\n      :onRowClick=\"redirectToPool\"\n      :getTableRowClass=\"getTableRowClass\"\n      :initialState=\"{\n        sortColumn: 'nextPeriodVotes',\n        sortDirection: 'desc',\n      }\"\n      :pin=\"{\n        pinOn: 'address',\n        pinnedData: [],\n      }\"\n      :renderedRowsIdx=\"renderedRowsIdx\"\n    >\n      <template #chainColumnHeader>\n        <div class=\"flex items-center\">\n          <NetworkIcon />\n        </div>\n      </template>\n      <template #networkColumnCell=\"{ network }\">\n        <div v-if=\"!isLoading\" class=\"py-4 px-6\">\n          <div\n            class=\"flex justify-center items-center w-8 h-8 bg-gray-50 dark:bg-gray-800 rounded shadow-sm\"\n          >\n            <img\n              :src=\"buildNetworkIconURL(getNetworkSlug(network))\"\n              :alt=\"network\"\n              class=\"w-6 h-6\"\n            />\n          </div>\n        </div>\n      </template>\n      <template #iconColumnHeader>\n        <div class=\"flex items-center\">\n          <CompositionIcon />\n        </div>\n      </template>\n      <template #iconColumnCell=\"pool: VotingPool\">\n        <div v-if=\"!isLoading\" class=\"py-4 px-6\">\n          <BalAssetSet :logoURIs=\"orderedTokenURIs(pool)\" :width=\"100\" />\n        </div>\n      </template>\n      <template #poolCompositionCell=\"pool: VotingPool\">\n        <div v-if=\"!isLoading\" class=\"flex items-center py-4 px-6\">\n          <div v-if=\"poolMetadata(pool.id)\" class=\"text-left\">\n            {{ poolMetadata(pool.id)?.name }}\n          </div>\n          <TokenPills\n            v-else\n            :tokens=\"orderedGaugeTokens(pool)\"\n            :isStablePool=\"\n              isStableLike(pool.poolType) || isUnknownType(pool.poolType)\n            \"\n            :selectedTokens=\"getSelectedTokens(pool.tokens)\"\n            :pickedTokens=\"getPickedTokens(pool.tokens)\"\n          />\n          <Ve8020Chip v-if=\"isVe8020Pool(pool)\" />\n          <BalTooltip v-if=\"isGyro(pool)\" :text=\"$t('clpTooltip')\" width=\"56\">\n            <template #activator>\n              <PoolFeatureChip\n                :feature=\"PoolFeature.CLP\"\n                :protocols=\"[Protocol.Gyro]\"\n                class=\"ml-1\"\n              />\n            </template>\n          </BalTooltip>\n          <BalChipNew v-if=\"isGaugeNew(pool)\" class=\"ml-2\" />\n          <BalChipExpired\n            v-if=\"getIsGaugeExpired(pool.gauge.address)\"\n            class=\"ml-2\"\n          />\n        </div>\n      </template>\n      <template #nextPeriodVotesCell=\"pool: VotingPool\">\n        <!-- Put to BalLazy the most expensive to render component -->\n        <BalLazy>\n          <div v-if=\"!isLoading\" class=\"flex justify-end py-4 px-6\">\n            <GaugeVoteInfo :pool=\"pool\" />\n            <div class=\"flex justify-end w-6\">\n              <IconLimit\n                v-if=\"isVeBalPool(pool.id)\"\n                size=\"sm\"\n                amount=\"10\"\n                :tooltip=\"\n                  $t(\n                    'veBAL.liquidityMining.limitsTooltip.distributionsCappedVeBAL'\n                  )\n                \"\n              />\n              <IconLimit\n                v-else-if=\"\n                  pool.gauge?.relativeWeightCap &&\n                  pool.gauge.relativeWeightCap !== '1.0'\n                \"\n                size=\"sm\"\n                :amount=\"(Number(pool.gauge.relativeWeightCap) * 100).toFixed()\"\n                :tooltip=\"\n                  $t(\n                    'veBAL.liquidityMining.limitsTooltip.distributionsCappedAt',\n                    [(Number(pool.gauge.relativeWeightCap) * 100).toFixed()]\n                  )\n                \"\n              />\n            </div>\n          </div>\n        </BalLazy>\n      </template>\n      <template #myVotesCell=\"pool: VotingPool\">\n        <div v-if=\"!isLoading\" class=\"py-4 px-6 text-right\">\n          <GaugesTableMyVotes :pool=\"pool\"></GaugesTableMyVotes>\n        </div>\n      </template>\n      <template #voteSelectColumnCell=\"pool: VotingPool\">\n        <BalCheckbox\n          v-if=\"isWalletReady\"\n          class=\"flex -top-2 justify-center ml-8 cursor-pointer\"\n          name=\"expiredGaugesFilter\"\n          noMargin\n          :modelValue=\"isSelected(pool)\"\n          :disabled=\"\n            hasUserVotes(pool) ||\n            isVotingTimeLocked(pool.lastUserVoteTime) ||\n            selectVotesDisabled\n          \"\n          @click.stop\n          @input=\"toggleSelection(pool)\"\n        />\n      </template>\n    </BalTable>\n  </BalCard>\n</template>\n\n<style>\ntr.expired-gauge-row {\n  @apply bg-red-50  hover:bg-red-100 dark:border-red-600 dark:border;\n}\n</style>\n","<script lang=\"ts\" setup>\nimport useDebouncedRef from '@/composables/useDebouncedRed';\nimport useVotingEscrowLocks from '@/composables/useVotingEscrowLocks';\nimport useVotingPools from '@/composables/useVotingPools';\n\nimport useNetwork from '@/composables/useNetwork';\nimport useVeBal from '@/composables/useVeBAL';\nimport { useVeBalLockInfo } from '@/composables/useVeBalLockInfo';\nimport configs from '@/lib/config';\nimport { Network } from '@/lib/config/types';\nimport useWeb3 from '@/services/web3/useWeb3';\nimport GaugesFilters from './GaugesFilters.vue';\nimport GaugesTable from './GaugesTable.vue';\nimport VotingAlert from './VotingAlert.vue';\nimport { bpsToPercentage, isGaugeExpired } from '../voting-utils';\nimport useNumbers from '@/composables/useNumbers';\nimport { isVotingCompleted, useVoting } from '../providers/voting.provider';\n\n/**\n * DATA\n */\nconst tokenFilter = useDebouncedRef<string>('', 500);\nconst showExpiredGauges = useDebouncedRef<boolean>(false, 500);\nconst activeNetworkFilters = useDebouncedRef<Network[]>([], 500);\n\nconst networkFilters: Network[] = Object.entries(configs)\n  .filter(details => {\n    const config = details[1];\n    return (\n      !config.testNetwork && config.pools.Stakable.VotingGaugePools.length > 0\n    );\n  })\n  .map(details => Number(details[0]) as Network);\n\n/**\n * COMPOSABLES\n */\nconst {\n  votingPools,\n  unallocatedVotes,\n  votingPeriodEnd,\n  votingPeriodLastHour,\n  isRefetchingVotingPools,\n} = useVotingPools();\nconst { veBalLockTooShort, veBalExpired, hasLock, hasExpiredLock } =\n  useVeBalLockInfo();\n\nconst { shouldResubmitVotes } = useVotingEscrowLocks();\nconst { networkSlug } = useNetwork();\nconst { isWalletReady } = useWeb3();\n\nconst { hasVeBalBalance, noVeBalBalance } = useVeBal();\nconst { fNum } = useNumbers();\n\nconst {\n  isLoading,\n  isLoadingVotingPools,\n  expiredGauges,\n  unlockedSelectedPools,\n  hasSubmittedVotes,\n  hasAllVotingPowerTimeLocked,\n  loadRequestWithExistingVotes,\n} = useVoting();\n\n/**\n * COMPUTED\n */\nconst unallocatedVotesFormatted = computed<string>(() =>\n  bpsToPercentage(unallocatedVotes.value, fNum)\n);\n\nconst poolsFilteredByExpiring = computed(() => {\n  if (showExpiredGauges.value) {\n    return votingPools.value;\n  }\n\n  return votingPools.value.filter(pool => {\n    if (Number(pool.userVotes) > 0) {\n      return true;\n    }\n    return !isGaugeExpired(expiredGauges.value, pool.gauge.address);\n  });\n});\n\nconst filteredVotingPools = computed(() => {\n  // put filter by expiring in separate computed to maintain readability\n  return poolsFilteredByExpiring.value.filter(pool => {\n    let showByNetwork = true;\n    if (\n      activeNetworkFilters.value.length > 0 &&\n      !activeNetworkFilters.value.includes(pool.network)\n    ) {\n      showByNetwork = false;\n    }\n\n    return (\n      showByNetwork &&\n      pool.tokens.some(token => {\n        return token.symbol\n          ?.toLowerCase()\n          .includes(tokenFilter.value.toLowerCase());\n      })\n    );\n  });\n});\n\nconst selectVotesDisabled = computed(\n  (): boolean =>\n    isLoading.value ||\n    !hasVeBalBalance.value ||\n    hasAllVotingPowerTimeLocked.value\n);\n\nconst votingDisabled = computed(\n  () => selectVotesDisabled.value || unlockedSelectedPools.value.length === 0\n);\n\n/**\n * METHODS\n */\nconst intersectionSentinel = ref<HTMLDivElement | null>(null);\nconst renderedRowsIdx = ref(40);\nlet observer: IntersectionObserver | undefined;\nfunction addIntersectionObserver(): void {\n  if (\n    !('IntersectionObserver' in window) ||\n    !('IntersectionObserverEntry' in window) ||\n    !intersectionSentinel.value\n  ) {\n    renderedRowsIdx.value = votingPools.value.length;\n    return;\n  }\n  const options = {\n    rootMargin: '0% 0% 50% 0%',\n  };\n  const callback = (entries: IntersectionObserverEntry[]): void => {\n    entries.forEach(entry => {\n      if (entry.isIntersecting) {\n        renderedRowsIdx.value += 40;\n      }\n    });\n  };\n  observer = new IntersectionObserver(callback, options);\n  observer.observe(intersectionSentinel.value);\n}\nonMounted(() => {\n  addIntersectionObserver();\n});\nonBeforeUnmount(() => {\n  observer?.disconnect();\n});\nwatch(\n  () => [showExpiredGauges.value, activeNetworkFilters.value],\n  () => {\n    renderedRowsIdx.value = votingPools.value.length;\n  },\n  { deep: true }\n);\n\nwatch(isLoading, async () => {\n  // Load votingRequest once the voting list and the expired gauges were loaded\n  loadRequestWithExistingVotes(votingPools.value);\n});\nwatch(isRefetchingVotingPools, async () => {\n  // Reload votingRequest if refetching after coming back from a successful voting\n  if (isVotingCompleted.value) {\n    loadRequestWithExistingVotes(votingPools.value);\n  }\n});\n</script>\n\n<template>\n  <div class=\"flex flex-col\">\n    <div\n      class=\"flex flex-col lg:flex-row gap-4 lg:justify-between lg:items-end\"\n    >\n      <div class=\"px-4 xl:px-0 pb-2 max-w-3xl\">\n        <h3 class=\"mb-2\">\n          {{ $t('veBAL.liquidityMining.title') }}\n          <BalTooltip\n            :text=\"$t('veBAL.liquidityMining.description')\"\n            iconSize=\"sm\"\n            iconClass=\"text-gray-400 dark:text-gray-600\"\n            width=\"72\"\n            class=\"mt-1\"\n          />\n        </h3>\n      </div>\n    </div>\n\n    <VotingAlert v-if=\"veBalLockTooShort\" title=\"vTSYMM not locked for 7 days\">\n      You must have vTSYMM locked for more than 7 days to vote on gauges.\n    </VotingAlert>\n\n    <VotingAlert\n      v-if=\"shouldResubmitVotes\"\n      title=\"Resubmit your votes to utilize your full voting power\"\n    >\n      Votes on pools are set at the time of the vote. Since youâ€™ve added new\n      vTSYMM since your original vote, you have additional voting power which is\n      not being used. Use the 'Edit votes' button to resubmit your votes.\n    </VotingAlert>\n\n    <VotingAlert\n      v-if=\"noVeBalBalance && !isLoading\"\n      title=\"You need some vTSYMM to vote on gauges\"\n    >\n      Get vTSYMM by locking up LP tokens from the 80% BAL / 20% WETH pool.\n    </VotingAlert>\n\n    <VotingAlert\n      v-if=\"veBalExpired\"\n      title=\"You can't vote because your vTSYMM has expired\"\n    >\n      You need some vTSYMM to vote on gauges. Unlock and relock your\n      B-80BAL-20-WETH to get some veBAL.\n    </VotingAlert>\n\n    <VotingAlert\n      v-if=\"hasAllVotingPowerTimeLocked\"\n      title=\"100% of your votes are locked\"\n    >\n      You won't be able to make any edits until some of them are unlocked.\n    </VotingAlert>\n\n    <div class=\"flex flex-wrap justify-between items-end px-4 lg:px-0\">\n      <div class=\"flex gap-2 xs:gap-3 mb-3 lg:mb-0\">\n        <BalCard shadow=\"none\" class=\"p-0 md:w-48 min-w-max\">\n          <div class=\"flex items-center\">\n            <p class=\"inline mr-1 text-sm text-secondary\">\n              My unallocated votes\n            </p>\n            <BalTooltip\n              :text=\"$t('veBAL.liquidityMining.myUnallocatedVotesTooltip')\"\n              iconClass=\"text-gray-400 dark:text-gray-600\"\n              iconSize=\"sm\"\n              width=\"72\"\n              class=\"mt-1\"\n            />\n          </div>\n          <p\n            class=\"inline mr-1 text-lg font-semibold\"\n            :class=\"{ 'text-red-500': hasExpiredLock }\"\n          >\n            <span v-if=\"hasLock\">\n              {{ unallocatedVotesFormatted }}\n            </span>\n            <span v-else class=\"mr-1\">â€”</span>\n          </p>\n          <BalTooltip\n            v-if=\"hasExpiredLock\"\n            :text=\"$t('veBAL.liquidityMining.votingPowerExpiredTooltip')\"\n            iconSize=\"sm\"\n            :iconName=\"'alert-triangle'\"\n            :iconClass=\"'text-red-500 hover:text-red-700 dark:hover:text-red-400 transition-colors'\"\n            width=\"72\"\n            class=\"relative top-0.5\"\n          />\n        </BalCard>\n        <BalCard shadow=\"none\" class=\"md:w-48 min-w-max\">\n          <div class=\"flex items-center\">\n            <p\n              :class=\"{ 'text-orange-500 font-medium': votingPeriodLastHour }\"\n              class=\"inline mr-1 text-sm text-secondary\"\n            >\n              Voting period ends\n            </p>\n            <BalTooltip\n              :text=\"$t('veBAL.liquidityMining.votingPeriodTooltip')\"\n              iconSize=\"sm\"\n              iconClass=\"text-gray-400 dark:text-gray-600\"\n              width=\"72\"\n              class=\"mt-1\"\n            />\n          </div>\n          <p class=\"text-lg font-semibold tabular-nums\">\n            <span\n              v-if=\"votingPeriodEnd.length\"\n              :class=\"{ 'text-orange-500': votingPeriodLastHour }\"\n            >\n              {{\n                $t(\n                  'veBAL.liquidityMining.votingPeriodCountdown',\n                  votingPeriodEnd\n                )\n              }}\n            </span>\n          </p>\n        </BalCard>\n      </div>\n      <div class=\"flex mb-3 lg:mb-0\">\n        <BalTextInput\n          v-model=\"tokenFilter\"\n          class=\"mr-5 b-5\"\n          name=\"tokenSearch\"\n          type=\"text\"\n          :placeholder=\"$t('filterByToken')\"\n          size=\"sm\"\n        >\n          <template #prepend>\n            <div class=\"flex items-center h-full\">\n              <BalIcon name=\"search\" size=\"md\" class=\"px-2 text-gray-600\" />\n            </div>\n          </template>\n        </BalTextInput>\n        <GaugesFilters\n          :networkFilters=\"networkFilters\"\n          :showExpiredGauges=\"showExpiredGauges\"\n          :activeNetworkFilters=\"activeNetworkFilters\"\n          @update:show-expired-gauges=\"showExpiredGauges = $event\"\n          @update:active-network-filters=\"activeNetworkFilters = $event\"\n        />\n        <div v-if=\"isWalletReady\" class=\"flex-0 ml-5 w-32 h-8\">\n          <BalBtn\n            :tag=\"votingDisabled ? 'div' : 'router-link'\"\n            :to=\"{ name: 'vebal-voting', params: { networkSlug } }\"\n            :label=\"hasSubmittedVotes ? 'Edit votes' : 'Vote'\"\n            color=\"gradient\"\n            :disabled=\"votingDisabled\"\n            block\n          />\n        </div>\n      </div>\n    </div>\n\n    <GaugesTable\n      :renderedRowsIdx=\"renderedRowsIdx\"\n      :isLoading=\"isLoadingVotingPools\"\n      :data=\"filteredVotingPools\"\n      :noPoolsLabel=\"$t('noInvestments')\"\n      :filterText=\"tokenFilter\"\n      :selectVotesDisabled=\"selectVotesDisabled\"\n    />\n    <div ref=\"intersectionSentinel\" />\n  </div>\n</template>\n","<script setup lang=\"ts\">\nimport { differenceInDays, format } from 'date-fns';\nimport { computed, ref } from 'vue';\nimport { useI18n } from 'vue-i18n';\n\nimport { PRETTY_DATE_FORMAT } from '@/components/forms/lock_actions/constants';\nimport UnlockPreviewModal from '@/components/forms/lock_actions/UnlockForm/components/UnlockPreviewModal/UnlockPreviewModal.vue';\nimport useNumbers, { FNumFormats } from '@/composables/useNumbers';\nimport { useTokens } from '@/providers/tokens.provider';\nimport useVeBal from '@/composables/useVeBAL';\nimport useNetwork from '@/composables/useNetwork';\nimport { bnum } from '@/lib/utils';\nimport { VeBalLockInfo } from '@/services/balancer/contracts/contracts/veBAL';\nimport { Pool } from '@/services/pool/types';\nimport useWeb3 from '@/services/web3/useWeb3';\nimport { TokenInfo } from '@/types/TokenList';\n\n/**\n * TYPES\n */\ntype Props = {\n  lockablePool: Pool;\n  lockablePoolTokenInfo: TokenInfo;\n  veBalLockInfo?: VeBalLockInfo | null;\n  totalLockedValue: string;\n};\n\n/**\n * PROPS\n */\nconst props = withDefaults(defineProps<Props>(), {\n  veBalLockInfo: null,\n});\n\n/**\n * STATE\n */\nconst showUnlockPreviewModal = ref(false);\n\n/**\n * COMPOSABLES\n */\nconst { balanceFor } = useTokens();\nconst { fNum } = useNumbers();\nconst { veBalBalance, lockablePoolId } = useVeBal();\nconst { t } = useI18n();\nconst { isWalletReady } = useWeb3();\nconst { networkSlug } = useNetwork();\n\n/**\n * COMPUTED\n */\nconst poolShares = computed(() =>\n  bnum(props.lockablePool.totalLiquidity).div(props.lockablePool.totalShares)\n);\n\nconst bptBalance = computed(() => balanceFor(props.lockablePool.address));\n\nconst fiatTotal = computed(() =>\n  poolShares.value.times(bptBalance.value).toString()\n);\n\nconst lockedUntil = computed(() => {\n  if (props.veBalLockInfo?.hasExistingLock && !props.veBalLockInfo?.isExpired) {\n    return format(props.veBalLockInfo.lockedEndDate, PRETTY_DATE_FORMAT);\n  }\n\n  return 'â€”';\n});\n\nconst totalExpiredLpTokens = computed(() =>\n  props.veBalLockInfo?.isExpired ? props.veBalLockInfo.lockedAmount : '0'\n);\n\nconst fiatTotalExpiredLpTokens = computed(() =>\n  bnum(props.lockablePool.totalLiquidity)\n    .div(props.lockablePool.totalShares)\n    .times(totalExpiredLpTokens.value)\n    .toString()\n);\n\nconst cards = computed(() => {\n  const hasExistingLock = props.veBalLockInfo?.hasExistingLock;\n  const isExpired = props.veBalLockInfo?.isExpired;\n\n  return [\n    {\n      id: 'myLpToken',\n      label: t('veBAL.myVeBAL.cards.myLpToken.label'),\n      value: isWalletReady.value\n        ? fNum(fiatTotal.value, FNumFormats.fiat)\n        : 'â€”',\n      secondaryText: isWalletReady.value\n        ? fNum(bptBalance.value, FNumFormats.token)\n        : 'â€”',\n      showPlusIcon: isWalletReady.value ? true : false,\n      plusIconTo: {\n        name: 'add-liquidity',\n        params: { id: lockablePoolId.value, networkSlug },\n        query: { returnRoute: 'vebal' },\n      },\n    },\n    {\n      id: 'myLockedLpToken',\n      label: t('veBAL.myVeBAL.cards.myLockedLpToken.label'),\n      value: isWalletReady.value\n        ? fNum(props.totalLockedValue, FNumFormats.fiat)\n        : 'â€”',\n      secondaryText: isWalletReady.value\n        ? fNum(props.veBalLockInfo?.lockedAmount ?? '0', FNumFormats.token)\n        : 'â€”',\n      showPlusIcon: isWalletReady.value && !isExpired ? true : false,\n      plusIconTo: { name: 'get-vebal', query: { returnRoute: 'vebal' } },\n      showUnlockIcon: isExpired ? true : false,\n    },\n    {\n      id: 'lockedEndDate',\n      label: t('veBAL.myVeBAL.cards.lockedEndDate.label'),\n      value: lockedUntil.value,\n      secondaryText:\n        hasExistingLock && !isExpired\n          ? t('veBAL.myVeBAL.cards.lockedEndDate.secondaryText', [\n              differenceInDays(new Date(lockedUntil.value), new Date()),\n            ])\n          : '-',\n      showPlusIcon: hasExistingLock && !isExpired ? true : false,\n      plusIconTo: { name: 'get-vebal', query: { returnRoute: 'vebal' } },\n    },\n    {\n      id: 'myVeBAL',\n      label: t('veBAL.myVeBAL.cards.myVeBAL.label'),\n      secondaryText:\n        props.veBalLockInfo && hasExistingLock && !isExpired\n          ? t('veBAL.myVeBAL.cards.myVeBAL.secondaryText', [\n              fNum(\n                bnum(veBalBalance.value)\n                  .div(props.veBalLockInfo.totalSupply)\n                  .toString(),\n                {\n                  style: 'percent',\n                  maximumFractionDigits: 4,\n                }\n              ),\n            ])\n          : '-',\n      showPlusIcon: false,\n      value: hasExistingLock\n        ? fNum(veBalBalance.value, FNumFormats.token)\n        : 'â€”',\n    },\n  ];\n});\n</script>\n\n<template>\n  <BalCard v-for=\"card in cards\" :key=\"card.id\">\n    <div class=\"font-medium label\">\n      {{ card.label }}\n    </div>\n    <div class=\"value\" :class=\"card.id\">\n      <div v-if=\"card.id === 'myLockedLpToken'\">\n        <span\n          :class=\"{ 'text-red-500': bnum(totalExpiredLpTokens).gt(0) }\"\n          class=\"mr-1 font-semibold truncate\"\n          >{{ card.value }}</span\n        >\n        <BalTooltip\n          v-if=\"bnum(totalExpiredLpTokens).gt(0)\"\n          :text=\"$t('veBAL.myVeBAL.cards.myExpiredLockTooltip')\"\n          iconSize=\"sm\"\n          :iconName=\"'alert-triangle'\"\n          :iconClass=\"'text-red-500 hover:text-red-700 dark:hover:text-red-400 transition-colors'\"\n          width=\"72\"\n          class=\"relative top-0.5\"\n        />\n      </div>\n      <div v-else>\n        <span class=\"font-semibold truncate\">{{ card.value }}</span>\n      </div>\n      <div class=\"flex items-center\">\n        <BalIcon\n          v-if=\"card.showUnlockIcon\"\n          name=\"minus-circle\"\n          class=\"mr-2 transition-all cursor-pointer minus-circle\"\n          @click=\"showUnlockPreviewModal = true\"\n        />\n        <div>\n          <router-link\n            v-if=\"card.showPlusIcon && card.plusIconTo\"\n            :to=\"card.plusIconTo\"\n            class=\"flex items-center text-blue-600 dark:text-blue-400\"\n          >\n            <BalIcon\n              name=\"plus-circle\"\n              class=\"transition-all cursor-pointer plus-circle\"\n            />\n          </router-link>\n        </div>\n      </div>\n    </div>\n    <div class=\"font-medium secondary-value text-secondary\">\n      {{ card.secondaryText }}\n    </div>\n  </BalCard>\n  <teleport to=\"#modal\">\n    <UnlockPreviewModal\n      v-if=\"showUnlockPreviewModal && veBalLockInfo\"\n      :lockablePool=\"lockablePool\"\n      :lockablePoolTokenInfo=\"lockablePoolTokenInfo\"\n      :veBalLockInfo=\"veBalLockInfo\"\n      :totalLpTokens=\"totalExpiredLpTokens\"\n      :fiatTotalLpTokens=\"fiatTotalExpiredLpTokens\"\n      @close=\"showUnlockPreviewModal = false\"\n    />\n  </teleport>\n</template>\n\n<style scoped>\n.label {\n  @apply text-sm mb-2;\n}\n\n.value {\n  @apply text-xl font-medium flex flex-wrap items-center justify-between mb-0.5;\n}\n\n.secondary-value {\n  @apply text-sm;\n}\n\n.plus-circle:hover,\n.plus-circle:focus,\n.plus-circle:hover :deep(svg.feather-plus-circle),\n.plus-circle:focus :deep(svg.feather-plus-circle) {\n  @apply transition-all text-white;\n\n  fill: theme('colors.blue.600');\n}\n\n.plus-circle:hover :deep(svg.feather-plus-circle circle),\n.plus-circle:focus :deep(svg.feather-plus-circle circle) {\n  fill: theme('colors.blue.600');\n}\n\n.minus-circle,\n.minus-circle:hover :deep(svg.feather-minus-circle circle) {\n  fill: theme('colors.red.500');\n}\n\n.minus-circle:hover,\n.minus-circle:focus {\n  transform: scale(1.25);\n}\n\n.minus-circle:hover :deep(svg.feather-minus-circle),\n.minus-circle:focus :deep(svg.feather-minus-circle) {\n  @apply transition-all text-white;\n\n  fill: theme('colors.red.500');\n}\n</style>\n","<script setup lang=\"ts\">\nimport { computed } from 'vue';\n\nimport { useLock } from '@/composables/useLock';\nimport useWeb3 from '@/services/web3/useWeb3';\n\nimport MyVeBalCards from './components/MyVeBalCards.vue';\n\n/**\n * COMPOSABLES\n */\nconst {\n  isLoadingLockPool,\n  isLoadingLockInfo,\n  lockPool,\n  lockPoolToken,\n  lock,\n  totalLockedValue,\n} = useLock();\nconst { isWalletReady } = useWeb3();\n\n/**\n * COMPUTED\n */\n\nconst isLoading = computed(() =>\n  isWalletReady.value\n    ? isLoadingLockPool.value || isLoadingLockInfo.value\n    : false\n);\n</script>\n\n<template>\n  <h3 class=\"mb-3\">\n    {{ $t('veBAL.myVeBAL.title') }}\n  </h3>\n  <div class=\"grid grid-cols-1 sm:grid-cols-2 xl:grid-cols-4 gap-4\">\n    <template v-if=\"isLoading\">\n      <BalLoadingBlock v-for=\"n in 4\" :key=\"n\" class=\"h-24\" />\n    </template>\n    <MyVeBalCards\n      v-else-if=\"lockPool && lockPoolToken\"\n      :veBalLockInfo=\"lock\"\n      :lockablePool=\"lockPool\"\n      :lockablePoolTokenInfo=\"lockPoolToken\"\n      :totalLockedValue=\"totalLockedValue\"\n    />\n  </div>\n</template>\n","<script setup lang=\"ts\">\nimport configs from '@/lib/config';\nimport { Network } from '@/lib/config/types';\nimport {\n  veBalSyncSupportedNetworks,\n  useCrossChainSync,\n} from '@/providers/cross-chain-sync.provider';\nimport useWeb3 from '@/services/web3/useWeb3';\n\ntype Props = {\n  chosenNetworks: Set<Network>;\n  veBalBalance: string;\n  activeTabIdx: number;\n};\n\nconst { account } = useWeb3();\nconst { networksBySyncState, l2VeBalBalances, tempSyncingNetworks } =\n  useCrossChainSync();\n\nconst props = defineProps<Props>();\nconst emit = defineEmits(['update:activeTabIdx', 'toggleNetwork']);\n\nconst toggleNetwork = (network: Network) => {\n  emit('toggleNetwork', network);\n};\n\nasync function syncNetworks() {\n  if (!props.chosenNetworks.size) return;\n  emit('update:activeTabIdx', 1);\n}\n</script>\n\n<template>\n  <div class=\"flex flex-col\">\n    <div class=\"mb-1.5 text-lg font-bold\">\n      {{ $t('crossChainBoost.selectNetworkModal.title') }}\n    </div>\n\n    <div class=\"mb-5 text-sm text-secondary\">\n      {{ $t('crossChainBoost.selectNetworkModal.description') }}\n    </div>\n\n    <div\n      class=\"flex justify-between p-4 -mb-0.5 rounded-t-lg border-2 border-gray-200 dark:border-gray-800 bg-slate-100 dark:bg-slate-800\"\n    >\n      <span class=\"font-semibold\">Ethereum</span>\n      <div class=\"font-semibold\">{{ veBalBalance }} veBAL</div>\n    </div>\n\n    <div\n      class=\"mb-5 rounded-b-lg border-2 border-gray-200 dark:border-gray-800\"\n    >\n      <div\n        v-for=\"network in veBalSyncSupportedNetworks\"\n        :key=\"network\"\n        aria-disabled=\"true\"\n        class=\"border-b-2 last:border-b-0 dark:border-gray-800\"\n      >\n        {{ tempSyncingNetworks.value }}\n        <div\n          class=\"flex justify-between items-center p-4\"\n          :class=\"{\n            'grayscale pointer-events-none opacity-40':\n              networksBySyncState.synced.includes(network) ||\n              tempSyncingNetworks?.[account]?.networks.includes(network),\n          }\"\n        >\n          <BalCheckbox\n            noMargin\n            alignCheckbox=\"items-center\"\n            :name=\"network.toString()\"\n            :modelValue=\"chosenNetworks.has(network)\"\n            :label=\"configs[network].chainName\"\n            class=\"font-medium\"\n            @input=\"toggleNetwork(network)\"\n          />\n          <div class=\"font-medium\">\n            {{ l2VeBalBalances?.[network] || '0.0000' }} veBAL\n          </div>\n        </div>\n      </div>\n    </div>\n\n    <BalBtn\n      block\n      color=\"gradient\"\n      size=\"md\"\n      :disabled=\"chosenNetworks.size === 0\"\n      @click=\"syncNetworks\"\n    >\n      {{ $t('next') }}\n    </BalBtn>\n  </div>\n</template>\n","<script setup lang=\"ts\">\nimport configs from '@/lib/config';\nimport { Network } from '@/lib/config/types';\nimport { buildNetworkIconURL } from '@/lib/utils/urls';\nimport { TransactionActionInfo } from '@/types/transactions';\nimport { useI18n } from 'vue-i18n';\nimport { TransactionResponse } from '@ethersproject/abstract-provider';\nimport { useCrossChainSync } from '@/providers/cross-chain-sync.provider';\nimport useTransactions from '@/composables/useTransactions';\nimport useEthers from '@/composables/useEthers';\nimport useWeb3 from '@/services/web3/useWeb3';\n\n/**\n * TYPES\n */\ntype Props = {\n  chosenNetworks: Set<Network>;\n  activeTabIdx: number;\n  veBalBalance: string;\n};\n\n/**\n * PROPS & EMITS\n */\nconst props = defineProps<Props>();\nconst emit = defineEmits(['update:activeTabIdx']);\n\n/**\n * COMPOSABLES\n */\nconst { t } = useI18n();\nconst { addTransaction } = useTransactions();\nconst { txListener } = useEthers();\nconst {\n  l2VeBalBalances,\n  sync,\n  setTempSyncingNetworks,\n  tempSyncingNetworks,\n  setSyncTxHashes,\n} = useCrossChainSync();\nconst { isMismatchedNetwork } = useWeb3();\n\n/**\n * STATE\n */\nconst currentActionIndex = ref(0);\n\n/**\n * METHODS\n */\nasync function handleTransaction(\n  tx: TransactionResponse,\n  network: Network\n): Promise<void> {\n  addTransaction({\n    id: tx.hash,\n    type: 'tx',\n    action: 'sync',\n    summary: `Sync veBAL to ${configs[network].chainName} network`,\n  });\n\n  txListener(tx, {\n    onTxConfirmed: async () => {\n      setSyncTxHashes(network, tx.hash);\n    },\n    onTxFailed: () => {\n      //\n    },\n  });\n}\n\nasync function handleAction(network: Network) {\n  try {\n    const tx = await sync(network);\n\n    handleTransaction(tx, network);\n\n    setTempSyncingNetworks(Array.from(props.chosenNetworks));\n    localStorage.setItem(\n      'tempSyncingNetworks',\n      JSON.stringify(tempSyncingNetworks.value)\n    );\n\n    setSyncTxHashes(network, tx.hash);\n\n    return tx;\n  } catch (error) {\n    console.error(error);\n    return Promise.reject(error);\n  }\n}\n\nfunction handleSuccess() {\n  emit('update:activeTabIdx', 2);\n}\n\n/**\n * COMPUTED\n */\nconst networkSyncSteps = computed(() => {\n  const actions: TransactionActionInfo[] = [];\n  props.chosenNetworks.forEach(network => {\n    actions.push({\n      label: t('crossChainBoost.syncToNetwork', {\n        network: configs[network].chainName,\n      }),\n      loadingLabel: t('crossChainBoost.syncingToNetwork', {\n        network: configs[network].chainName,\n      }),\n      confirmingLabel: t('crossChainBoost.syncingToNetwork', {\n        network: configs[network].chainName,\n      }),\n      action: async () => {\n        return handleAction(network);\n      },\n      stepTooltip: t('crossChainBoost.syncToNetwork', {\n        network: configs[network].chainName,\n      }),\n    });\n  });\n\n  return actions;\n});\n</script>\n\n<template>\n  <div class=\"flex flex-col\">\n    <div class=\"mb-2 text-lg font-bold\">Sync veBAL</div>\n    <div class=\"mb-5 text-sm text-secondary\">\n      {{ $t('crossChainBoost.syncNetworkAction.title') }}\n    </div>\n\n    <div\n      v-for=\"network in chosenNetworks.values()\"\n      :key=\"network\"\n      class=\"mb-4 rounded-lg border-2 border-gray-200 dark:border-gray-800\"\n    >\n      <div\n        class=\"flex items-center py-1 px-3 border-b-2 border-gray-200 dark:border-gray-800 bg-slate-100 dark:bg-slate-800\"\n      >\n        <img\n          :src=\"buildNetworkIconURL(network)\"\n          alt=\"\"\n          class=\"p-0.5 mr-2 w-8 h-8 rounded-full cursor-pointer\"\n        />\n        <div class=\"font-semibold\">{{ configs[network].chainName }}</div>\n      </div>\n\n      <div>\n        <div class=\"flex border-b-2 last:border-b-0 dark:border-gray-800\">\n          <div class=\"p-4 w-6/12 text-gray-600 border-r-2 dark:border-gray-800\">\n            <div class=\"text-sm font-medium text-secondary\">\n              {{ $t('crossChainBoost.currentBalance') }}\n            </div>\n            <div class=\"text-lg font-semibold text-black dark:text-white\">\n              {{ l2VeBalBalances?.[network] || '0.0000' }} veBAL\n            </div>\n          </div>\n          <div class=\"p-4 w-6/12 text-secondary\">\n            <div class=\"text-sm font-medium text-secondary\">\n              {{ $t('crossChainBoost.postSyncBalance') }}\n            </div>\n            <div class=\"text-lg font-semibold text-black dark:text-white\">\n              {{ veBalBalance || '0.0000' }} veBAL\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n\n    <div class=\"grow\"></div>\n\n    <BalActionSteps\n      :actions=\"networkSyncSteps\"\n      primaryActionType=\"sync\"\n      :spacerWidth=\"10\"\n      :disabled=\"isMismatchedNetwork\"\n      @success=\"handleSuccess\"\n      @set-current-action-index=\"currentActionIndex = $event\"\n    />\n  </div>\n</template>\n","export default \"__VITE_ASSET__c5e2ca6b__\"","<script setup lang=\"ts\">\nimport configs from '@/lib/config';\nimport { Network } from '@/lib/config/types';\nimport { useCrossChainSync } from '@/providers/cross-chain-sync.provider';\n\ntype Props = {\n  chosenNetworks: Set<Network>;\n  veBalBalance: string;\n};\n\nconst { syncLayerZeroTxLinks } = useCrossChainSync();\n\ndefineProps<Props>();\ndefineEmits(['close']);\n</script>\n\n<template>\n  <div>\n    <div class=\"flex items-center mb-3 text-xl font-bold\">\n      <img\n        src=\"/src/assets/images/icons/success-check.svg\"\n        alt=\"\"\n        class=\"mr-2\"\n      />\n      {{ $t('crossChainBoost.syncInitiatedModal.title') }}\n    </div>\n    <div class=\"mb-6 text-sm text-gray-600 dark:text-gray-300\">\n      {{ $t('crossChainBoost.syncInitiatedModal.description') }}\n    </div>\n    <div\n      class=\"overflow-hidden mb-5 rounded-lg border-2 border-gray-200 dark:border-gray-800\"\n    >\n      <div\n        class=\"flex border-b-2 last:border-b-0 border-gray-200 dark:border-gray-800 bg-slate-100 dark:bg-slate-800\"\n      >\n        <div\n          class=\"p-4 w-6/12 font-semibold text-black dark:text-gray-300 grow\"\n        >\n          Ethereum Mainnet\n        </div>\n        <div class=\"p-4 text-sm font-medium text-black dark:text-gray-300\">\n          {{ veBalBalance }} veBAL\n        </div>\n      </div>\n      <div\n        v-for=\"network in chosenNetworks.values()\"\n        :key=\"network\"\n        class=\"flex border-b-2 last:border-b-0 dark:border-gray-800\"\n      >\n        <div class=\"p-4 font-semibold text-black dark:text-gray-300 grow\">\n          {{ configs[network].chainName }}\n        </div>\n        <div\n          class=\"p-4 text-sm font-medium text-gray-600\"\n          :class=\"{ 'pr-0': syncLayerZeroTxLinks[network] }\"\n        >\n          {{ veBalBalance }} veBAL\n        </div>\n\n        <div\n          v-if=\"syncLayerZeroTxLinks[network]\"\n          class=\"flex pr-2 pl-1 align-center\"\n        >\n          <BalLink\n            :href=\"syncLayerZeroTxLinks[network]\"\n            external\n            noStyle\n            class=\"group flex items-center\"\n          >\n            <BalIcon\n              name=\"arrow-up-right\"\n              size=\"sm\"\n              class=\"mb-1 ml-px group-hover:text-pink-500 transition-colors text-dark-grey\"\n            />\n          </BalLink>\n        </div>\n      </div>\n    </div>\n\n    <BalAlert\n      type=\"tip\"\n      :title=\"$t('crossChainBoost.syncInitiatedModal.warningTitle')\"\n      class=\"mb-8\"\n    >\n      <div>\n        {{ $t('crossChainBoost.syncInitiatedModal.warningDescription') }}\n      </div>\n    </BalAlert>\n\n    <BalBtn color=\"gray\" outline block @click=\"$emit('close')\">\n      {{ $t('close') }}\n    </BalBtn>\n  </div>\n</template>\n","<script setup lang=\"ts\">\nimport { Network } from '@/lib/config/types';\nimport SyncSelectNetwork from '@/components/contextual/pages/vebal/cross-chain-boost/SyncSelectNetwork.vue';\nimport SyncNetworkAction from '@/components/contextual/pages/vebal/cross-chain-boost/SyncNetworkAction.vue';\nimport SyncFinalState from '@/components/contextual/pages/vebal/cross-chain-boost/SyncFinalState.vue';\nimport { TransactionResponse } from '@ethersproject/abstract-provider';\nimport {\n  L2VeBalBalances,\n  NetworksBySyncState,\n  TempSyncingNetworks,\n} from '@/providers/cross-chain-sync.provider';\n\ntype Props = {\n  isVisible: boolean;\n  networksBySyncState: NetworksBySyncState;\n  veBalBalance: string;\n  l2VeBalBalances: L2VeBalBalances;\n  sync(network: Network): Promise<TransactionResponse>;\n  setTempSyncingNetworks(\n    syncingNetworks: Network[]\n  ): Record<string, TempSyncingNetworks>;\n};\n\nwithDefaults(defineProps<Props>(), {\n  isVisible: false,\n});\n\nconst emit = defineEmits(['closeModal']);\n\nconst chosenNetworks = ref<Set<Network>>(new Set());\n\nconst syncTabs = [SyncSelectNetwork, SyncNetworkAction, SyncFinalState];\n\nconst tabActiveIdx = ref(0);\n\nconst isSyncedSuccessfull = ref(false);\n\nconst closeModal = () => {\n  emit(\n    'closeModal',\n    isSyncedSuccessfull.value ? Array.from(chosenNetworks.value) : null\n  );\n\n  tabActiveIdx.value = 0;\n  chosenNetworks.value = new Set();\n};\n\nfunction toggleNetwork(network: number) {\n  if (chosenNetworks.value.has(network)) {\n    chosenNetworks.value.delete(network);\n    return;\n  }\n  chosenNetworks.value.add(network);\n}\n</script>\n\n<template>\n  <BalModal :show=\"isVisible\" @close=\"closeModal\">\n    <Transition name=\"fade\" mode=\"out-in\">\n      <component\n        :is=\"syncTabs[tabActiveIdx]\"\n        v-model:activeTabIdx=\"tabActiveIdx\"\n        :veBalBalance=\"veBalBalance\"\n        style=\"min-height: 470px\"\n        :chosenNetworks=\"chosenNetworks\"\n        @toggle-network=\"toggleNetwork\"\n        @set-successful-synced=\"isSyncedSuccessfull = true\"\n        @close=\"closeModal\"\n      />\n    </Transition>\n  </BalModal>\n</template>\n\n<style scoped>\n.fade-enter-active,\n.fade-leave-active {\n  transition: opacity 0.2s ease;\n}\n\n.fade-enter-from,\n.fade-leave-to {\n  opacity: 0;\n}\n</style>\n","<script setup lang=\"ts\">\nimport { buildNetworkIconURL } from '@/lib/utils/urls';\nimport IconLoaderWrapper from './IconLoaderWrapper.vue';\nimport CrossChainSyncModal from './CrossChainSyncModal.vue';\n\nimport useWeb3 from '@/services/web3/useWeb3';\nimport useNumbers, { FNumFormats } from '@/composables/useNumbers';\nimport useVeBal from '@/composables/useVeBAL';\nimport { useTokens } from '@/providers/tokens.provider';\nimport { bnum } from '@/lib/utils';\nimport {\n  useCrossChainSync,\n  NetworkSyncState,\n} from '@/providers/cross-chain-sync.provider';\nimport configs from '@/lib/config';\nimport { Network } from '@/lib/config/types';\n\n/**\n * COMPOSABLES\n */\nconst { dynamicDataLoading } = useTokens();\nconst { account, isWalletReady } = useWeb3();\nconst {\n  networksSyncState,\n  networksBySyncState,\n  l2VeBalBalances,\n  isLoading,\n  sync,\n  tempSyncingNetworks,\n  setTempSyncingNetworks,\n  warningMessage,\n  infoMessage,\n  hasError,\n  showingUnsyncedNetworks,\n  syncLayerZeroTxLinks,\n} = useCrossChainSync();\nconst { fNum } = useNumbers();\nconst { veBalBalance } = useVeBal();\n\n/**\n * STATE\n */\nconst isSyncModalOpen = ref(false);\n/**\n * COMPUTED\n */\nconst isVebalBalanceZero = computed(() => {\n  return bnum(veBalBalance.value).isEqualTo(0);\n});\n\n/**\n * METHODS\n */\n\nfunction getLoadingTooltipText(networkId: Network) {\n  const time = networkId === Network.POLYGON ? 30 : 5;\n\n  return `Syncing on ${configs[networkId].chainName} usually takes around ${time} mins. \n  Wait until it completes before restaking or triggering a gauge update on your\n  ${configs[networkId].chainName} pools to get your maximum veBAL boost.`;\n}\n\nfunction checkIfNetworkSyncing(network: Network) {\n  return (\n    networksSyncState.value?.[network] === NetworkSyncState.Syncing ||\n    tempSyncingNetworks.value[account.value]?.networks.includes(network)\n  );\n}\nfunction onCloseModal() {\n  isSyncModalOpen.value = false;\n}\n</script>\n\n<template>\n  <div class=\"py-5 px-4\">\n    <h4 class=\"mb-3\">\n      {{ $t('crossChainBoost.title') }}\n      <BalTooltip :text=\"$t('crossChainBoost.infoDescription')\">\n        <template #activator>\n          <BalIcon name=\"info\" size=\"sm\" class=\"text-gray-400\" />\n        </template>\n      </BalTooltip>\n    </h4>\n\n    <BalAlert v-if=\"hasError\" title=\"Error\" type=\"error\" class=\"mb-4\">\n      <div>\n        Error has occured while fetching syncing states of some networks. Please\n        refresh the page.\n      </div>\n    </BalAlert>\n\n    <template v-if=\"!(isLoading || dynamicDataLoading)\">\n      <BalAlert\n        v-if=\"warningMessage\"\n        :title=\"warningMessage.title\"\n        type=\"warning\"\n        class=\"mb-4\"\n      >\n        {{ warningMessage.text }}\n      </BalAlert>\n      <BalAlert\n        v-else-if=\"infoMessage\"\n        :title=\"infoMessage.title\"\n        type=\"tip\"\n        class=\"mb-4\"\n      >\n        {{ infoMessage.text }}\n      </BalAlert>\n    </template>\n    <div class=\"grid grid-cols-1 sm:grid-cols-2 xl:grid-cols-4 gap-4\">\n      <template v-if=\"isLoading || dynamicDataLoading\">\n        <BalLoadingBlock v-for=\"n in 2\" :key=\"n\" class=\"h-48\" />\n      </template>\n      <div\n        v-else-if=\"!isWalletReady || isVebalBalanceZero\"\n        class=\"text-sm text-secondary\"\n      >\n        {{ $t('crossChainBoost.emptyState') }}\n      </div>\n      <template v-else>\n        <BalCard>\n          <div class=\"flex justify-between items-center mb-3 font-bold label\">\n            {{ $t('crossChainBoost.unsyncedNetworks') }}\n          </div>\n          <div class=\"flex mb-3\">\n            <span\n              v-if=\"showingUnsyncedNetworks.length === 0\"\n              class=\"text-sm text-secondary\"\n            >\n              {{ hasError ? 'â€”' : $t('crossChainBoost.syncedAllDescription') }}\n            </span>\n            <div v-else class=\"flex\">\n              <div\n                v-for=\"network in showingUnsyncedNetworks\"\n                :key=\"network\"\n                class=\"mr-2\"\n              >\n                <BalTooltip width=\"44\" textAlign=\"center\">\n                  <template #activator>\n                    <BalLink\n                      :href=\"syncLayerZeroTxLinks[network]\"\n                      external\n                      noStyle\n                      class=\"group flex items-center\"\n                    >\n                      <IconLoaderWrapper\n                        :isLoading=\"checkIfNetworkSyncing(network)\"\n                      >\n                        <img\n                          :src=\"buildNetworkIconURL(network)\"\n                          alt=\"\"\n                          class=\"p-0.5 rounded-full w-[32px]\"\n                        />\n                      </IconLoaderWrapper>\n                    </BalLink>\n                  </template>\n\n                  <div\n                    v-if=\"checkIfNetworkSyncing(network)\"\n                    class=\"flex flex-col\"\n                  >\n                    <span class=\"mb-1\">\n                      {{ getLoadingTooltipText(network) }}\n                    </span>\n\n                    <span\n                      v-if=\"syncLayerZeroTxLinks[network]\"\n                      class=\"font-bold\"\n                    >\n                      Click this icon to view Layerzero transaction\n                    </span>\n                  </div>\n                  <div v-else>\n                    <div class=\"flex mb-2\">\n                      <div class=\"flex justify-center p-1 mr-1 align-center\">\n                        <div class=\"w-2 h-2 bg-green-400 rounded-full\"></div>\n                      </div>\n                      <div>\n                        <div class=\"text-sm text-secondary\">Ethereum veBAL</div>\n                        <div class=\"text-lg font-bold\">\n                          {{ Number(veBalBalance).toFixed(4) }}\n                        </div>\n                      </div>\n                    </div>\n\n                    <div class=\"flex\">\n                      <div class=\"flex justify-center p-1 mr-1 align-center\">\n                        <div class=\"w-2 h-2 rounded-full bg-rose-500\"></div>\n                      </div>\n                      <div>\n                        <div class=\"text-sm text-secondary\">\n                          {{ configs[network].chainName }} veBAL\n                        </div>\n                        <div class=\"text-lg font-bold\">\n                          {{ l2VeBalBalances?.[network] }}\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                </BalTooltip>\n              </div>\n            </div>\n          </div>\n\n          <BalBtn\n            v-if=\"networksBySyncState.unsynced.length > 0\"\n            color=\"blue\"\n            size=\"sm\"\n            outline\n            @click=\"isSyncModalOpen = true\"\n          >\n            {{ $t('crossChainBoost.sync') }}\n          </BalBtn>\n        </BalCard>\n\n        <BalCard>\n          <div class=\"flex justify-between items-center mb-3 font-bold label\">\n            {{ $t('crossChainBoost.syncedNetworks') }}\n          </div>\n          <span\n            v-if=\"networksBySyncState.synced.length === 0\"\n            class=\"text-sm text-secondary\"\n          >\n            {{ hasError ? 'â€”' : $t('crossChainBoost.unsyncedAllDescription') }}\n          </span>\n\n          <div v-else class=\"flex\">\n            <div v-for=\"network in networksBySyncState.synced\" :key=\"network\">\n              <IconLoaderWrapper :isLoading=\"false\">\n                <img\n                  :src=\"buildNetworkIconURL(network)\"\n                  alt=\"\"\n                  class=\"mr-2 w-8 h-8 rounded-full\"\n                />\n              </IconLoaderWrapper>\n            </div>\n          </div>\n        </BalCard>\n      </template>\n    </div>\n\n    <CrossChainSyncModal\n      :isVisible=\"isSyncModalOpen\"\n      :networksBySyncState=\"networksBySyncState\"\n      :sync=\"sync\"\n      :setTempSyncingNetworks=\"setTempSyncingNetworks\"\n      :veBalBalance=\"fNum(veBalBalance, FNumFormats.token)\"\n      :l2VeBalBalances=\"l2VeBalBalances\"\n      @close-modal=\"onCloseModal\"\n    />\n  </div>\n</template>\n","<script setup lang=\"ts\">\n/**\n * veBAL page\n */\nimport Hero from '@/components/contextual/pages/vebal/Hero.vue';\nimport LMVoting from '@/components/contextual/pages/vebal/LMVoting/LMVoting.vue';\nimport MyVeBAL from '@/components/contextual/pages/vebal/MyVeBAL/MyVeBAL.vue';\nimport CrossChainBoostCards from '@/components/contextual/pages/vebal/cross-chain-boost/CrossChainBoostCards.vue';\nimport { isVeBalSupported } from '@/composables/useVeBAL';\n\nimport { provideUserStaking } from '@/providers/local/user-staking.provider';\nimport { providerUserPools } from '@/providers/local/user-pools.provider';\nimport { providePoolStaking } from '@/providers/local/pool-staking.provider';\nimport { provideVoting } from '@/components/contextual/pages/vebal/providers/voting.provider';\n\nconst userStaking = provideUserStaking();\nproviderUserPools(userStaking);\nprovidePoolStaking();\nprovideVoting();\n</script>\n\n<template>\n  <div>\n    <Hero v-if=\"isVeBalSupported\" v-once />\n\n    <div class=\"py-16 xl:py-20 bg-gray-50 dark:bg-gray-850/50\">\n      <div v-if=\"isVeBalSupported\" class=\"lg:container lg:mx-auto\">\n        <div class=\"px-4 mb-5\">\n          <MyVeBAL />\n        </div>\n        <div>\n          <CrossChainBoostCards />\n        </div>\n      </div>\n    </div>\n    <div\n      v-if=\"isVeBalSupported\"\n      class=\"xl:container xl:px-4 pt-16 xl:pt-20 xl:mx-auto\"\n    >\n      <div class=\"xl:px-0 mb-16\">\n        <LMVoting />\n      </div>\n    </div>\n    <div v-else class=\"text-center\">\n      <div class=\"text-lg font-semibold\">\n        {{ $t('veBAL.notSupported.title') }}\n      </div>\n      <div>{{ $t('veBAL.notSupported.description') }}</div>\n    </div>\n  </div>\n</template>\n"],"names":["loaded","ref","props","wrapperStyles","computed","onLoaded","coin1","coin2","coin3","t","useI18n","router","useRouter","benefits","navigateToGetVeBAL","useDebouncedRef","value","delay","timeout","customRef","track","trigger","newValue","useVotingEscrowLocks","account","useWeb3","networkConfig","useConfig","veBalLockInfoQuery","useVeBalLockInfoQuery","allVotingPools","votingGaugeAddresses","useVotingPools","veBalBalance","useVeBal","votingEscrowLocksQueryEnabled","votingEscrowLocksQuery","useGraphQuery","subgraphs","QUERY_KEYS","_a","configs","networkId","reactive","votingEscrowLocks","expiredGauges","useExpiredGaugesQuery","poolsUsingUnderUtilizedVotingPower","pool","bnum","lastReceivedVebal","isVotingTimeLocked","shouldResubmitVotes","_b","isSameAddress","item","MINIMUM_LOCK_TIME","useVeBalLockInfo","isLoading","veBalLockInfo","veBalExpired","hasLock","hasExpiredLock","veBalLockTooShort","_c","networkFiltersArr","isExpiredFilterActive","activeNetworksArr","activeFiltersNum","handleExpInput","e","checked","emit","updateNetwork","network","index","arr","shouldRender","nextTick","theme","useTailwind","darkMode","useDarkMode","color","fNum","useNumbers","votesThisPeriod","formatVotesAsPercent","votesNextPeriod","voteDifference","voteDifferenceText","text","voteTextClass","votes","normalizedVotes","scale","myVotes","BigNumber","poolHasUnderUtilizedVotingPower","sizeClass","_hoisted_1","_sfc_render","_ctx","_cache","upToLargeBreakpoint","useBreakpoints","isWalletReady","getIsGaugeExpired","toggleSelection","isSelected","useVoting","columns","isInternalUrl","url","redirectToPool","inNewTab","redirectUrl","poolURLFor","route","getNetworkSlug","getPoolExternalUrl","poolUrl","getHasUserVotes","userVotes","getTableRowClass","getSelectedTokens","tokens","token","getPickedTokens","tokenFilter","showExpiredGauges","activeNetworkFilters","networkFilters","details","config","votingPools","unallocatedVotes","votingPeriodEnd","votingPeriodLastHour","isRefetchingVotingPools","networkSlug","useNetwork","hasVeBalBalance","noVeBalBalance","isLoadingVotingPools","unlockedSelectedPools","hasSubmittedVotes","hasAllVotingPowerTimeLocked","loadRequestWithExistingVotes","unallocatedVotesFormatted","bpsToPercentage","poolsFilteredByExpiring","isGaugeExpired","filteredVotingPools","showByNetwork","selectVotesDisabled","votingDisabled","intersectionSentinel","renderedRowsIdx","observer","addIntersectionObserver","options","callback","entries","entry","onMounted","onBeforeUnmount","watch","isVotingCompleted","showUnlockPreviewModal","balanceFor","useTokens","lockablePoolId","poolShares","bptBalance","fiatTotal","lockedUntil","format","PRETTY_DATE_FORMAT","totalExpiredLpTokens","fiatTotalExpiredLpTokens","cards","hasExistingLock","isExpired","FNumFormats","differenceInDays","isLoadingLockPool","isLoadingLockInfo","lockPool","lockPoolToken","lock","totalLockedValue","useLock","networksBySyncState","l2VeBalBalances","tempSyncingNetworks","useCrossChainSync","toggleNetwork","syncNetworks","addTransaction","useTransactions","txListener","useEthers","sync","setTempSyncingNetworks","setSyncTxHashes","isMismatchedNetwork","currentActionIndex","handleTransaction","tx","handleAction","error","handleSuccess","networkSyncSteps","actions","_imports_0","syncLayerZeroTxLinks","chosenNetworks","syncTabs","SyncSelectNetwork","SyncNetworkAction","SyncFinalState","tabActiveIdx","isSyncedSuccessfull","closeModal","dynamicDataLoading","networksSyncState","warningMessage","infoMessage","hasError","showingUnsyncedNetworks","isSyncModalOpen","isVebalBalanceZero","getLoadingTooltipText","time","Network","checkIfNetworkSyncing","NetworkSyncState","onCloseModal","userStaking","provideUserStaking","providerUserPools","providePoolStaking","provideVoting"],"mappings":"0zHAsBAA,EAAAC,EAAAC,EAAA,MAAA,EAKAC,EAAAC,EAAA,KAAA,CAAsC,MAAAF,EAAA,MACvB,OAAAA,EAAA,MACC,EAAA,EAMhB,SAAAG,GAAA,CACEL,EAAA,MAAA,EAAe,kRCpCFM,GAAA,+BCAAC,GAAA,+BCAAC,GAAA,62BCYf,KAAA,CAAA,EAAAC,GAAAC,KACAC,EAAAC,KAKAC,EAAAT,EAAA,IAAA,CAAgCK,EAAA,2BAAA,EACDA,EAAA,0BAAA,EACDA,EAAA,0BAAA,CACA,CAAA,EAM9B,SAAAK,GAAA,CACEH,EAAA,KAAA,CAAY,KAAA,YACJ,MAAA,CACC,YAAA,OACQ,CACf,CAAA,CACD,srDC9BqB,SAAAI,GAAmBC,EAAUC,EAAQ,IAAa,CACpE,IAAAC,EACG,OAAAC,GAAU,CAACC,EAAOC,KAChB,CACL,KAAM,CACE,OAAAD,IACCJ,CACT,EACA,IAAIM,EAAU,CACZ,aAAaJ,CAAO,EACpBA,EAAU,WAAW,IAAM,CACjBF,EAAAM,EACAD,KACPJ,CAAK,CACV,CAAA,EAEH,CACH,CCQA,SAAwBM,IAAuB,OAIvC,KAAA,CAAE,QAAAC,GAAYC,IACd,CAAE,cAAAC,GAAkBC,KACpBC,EAAqBC,KACrB,CAAE,YAAaC,EAAgB,qBAAAC,GACnCC,GAAe,EACX,CAAE,aAAAC,GAAiBC,KAEnBC,EAAgC/B,EAAS,IAAM,CAAC,CAACoB,EAAQ,KAAK,EAC9DY,EAAyBC,GAC7BC,GAAU,MACVC,GAAW,OAAO,mBAChBC,EAAAZ,EAAmB,KAAK,QAAxB,YAAAY,EAA+B,YACjC,EACA,KAAO,CACL,OAAQ,wBACR,kBAAmB,CACjB,OAAQ,CACN,MAAO,CACL,KAAMhB,EAAQ,MAAM,YAAY,EAChC,eACEiB,EAAQC,GAAU,KAAK,EAAE,UAAU,MAAM,kBAAkB,CAC/D,CACF,EACA,eAAgB,CACd,GAAI,EACN,EACA,UAAW,EACb,CAAA,GAEFC,GAAS,CAAE,QAASR,EAA+B,CAAA,EAM/CS,EAAoBxC,EACxB,WAAM,OAAAoC,EAAAJ,EAAuB,KAAK,QAA5B,YAAAI,EAAmC,kBAAA,EAGrC,CAAE,KAAMK,CAAc,EAAIC,GAAsBf,CAAoB,EAGpEgB,EAAqC3C,EAAuB,IAChE0B,EAAe,MAAM,OAAekB,GAAA,OAClC,OAEEC,EAAKD,EAAK,SAAS,EAAE,GAAG,CAAC,GAEzBA,EAAK,iBAAmBE,EAAkB,OAE1C,CAACC,GAAmBH,EAAK,gBAAgB,GAEzC,GAACR,EAAAK,EAAc,QAAd,MAAAL,EAAqB,SAASQ,EAAK,MAAM,SAAO,CAEpD,CAAA,EAGGI,EAAsBhD,EAC1B,IAEE6C,EAAKhB,EAAa,KAAK,EAAE,GAAG,CAAC,GAC7B,CAAC,CAACc,EAAmC,MAAM,MAAA,EAIzCG,EAAoB9C,EACxB,IACE,SAAA,QAAAiD,GAAAb,EAAAI,EAAkB,QAAlB,YAAAJ,EAAyB,QACvBc,GAAcC,EAAK,eAAe,GAAI7B,EAAc,UAAU,KAAK,KADrE,YAAA2B,EAEG,YAAa,EAAA,EAGb,MAAA,CACL,kBAAAT,EACA,kBAAAM,EACA,mCAAAH,EACA,oBAAAK,CAAA,CAEJ,CC5GA,MAAAI,GAAA,MAAA,EAEO,SAAAC,IAAA,CACL,MAAA7B,EAAAC,KAEA6B,EAAAtD,EAAA,IAAAwB,EAAA,SAAA,EAEA+B,EAAAvD,EAAA,IAAAwB,EAAA,KAAA,KAAA,EAEAgC,EAAAxD,EAAA,IAAA,OAAA,OAAAoC,EAAAmB,EAAA,QAAA,YAAAnB,EAAA,UAAA,EAEAqB,EAAAzD,EAAgB,IAAA,SAAA,OAAA,GAAAoC,EAAAmB,EAAA,QAAA,MAAAnB,EAAA,kBAAA,GAAAa,EAAAM,EAAA,QAAA,MAAAN,EAAA,WAEoD,EAGpES,EAAA1D,EAAuB,IAAA,SAAA,OAAA,GAAAoC,EAAAmB,EAAA,QAAA,MAAAnB,EAAA,oBAAAa,EAAAM,EAAA,QAAA,YAAAN,EAAA,WAE4C,EAGnEU,EAAA3D,EAAA,IAAA,WACE,OAAAoC,EAAAmB,EAAA,QAAA,MAAAnB,EAAA,iBAAA,GAAAa,EAAAM,EAAA,QAAA,MAAAN,EAAA,aAIEW,EAAAL,EAAA,QAAA,YAAAK,EAAA,eACA,KAAA,IAAA,EAAAR,GAGF,EAAO,CAAA,EAGT,MAAA,CAAO,UAAAE,EACL,QAAAG,EACA,eAAAC,EACA,kBAAAC,EACA,aAAAH,CACA,CAEJ,kjBCfA,MAAAK,EAAAhE,EAAA,CAAA,KAAA,oBAAA,CAAA,EAMAiE,EAAAjE,EAAA,EAAA,EACAkE,EAAAlE,EAAA,CAAA,CAAA,EAKAmE,EAAAhE,EAAA,IACE+D,EAAA,MAAA,OAAA,OAAAD,EAAA,KAAA,CAA0E,EAM5E,SAAAG,EAAAC,EAAA,CACE,KAAA,CAAA,QAAAC,CAAA,EAAAD,EAAA,OACAJ,EAAA,MAAAK,EACAC,EAAA,2BAAAD,CAAA,CAAwC,CAG1C,SAAAE,EAAAC,EAAA,CACE,MAAAC,EAAAV,EAAA,MAAA,QAAAS,CAAA,EAEAC,IAAA,GAAAV,EAAA,MAAA,KAAAS,CAAA,EAAAT,EAAA,MAAA,OAAAU,EAAA,CAAA,EAIA,MAAAC,EAAA,CAAA,GAAAX,EAAA,KAAA,EACAO,EAAA,8BAAAI,CAAA,EACAT,EAAA,MAAAS,CAA0B,6qCC5D5B,MAAAC,EAAA5E,EAAA,EAAA,EACA,OAAA6E,GAAA,IAAA,CACED,EAAA,MAAA,EAAqB,CAAA,4NCCvB,KAAA,CAAA,MAAAE,GAAAC,KACA,CAAA,SAAAC,GAAAC,KAEAC,EAAA/E,EAAc,IAAA6E,EAAA,MAAAF,EAAA,OAAA,MAAAA,EAAA,OAAA,KACuC,4UCJrD,KAAA,CAAA,MAAAA,GAAAC,KACA,CAAA,SAAAC,GAAAC,KAEAC,EAAA/E,EAAc,IAAA6E,EAAA,MAAAF,EAAA,OAAA,MAAAA,EAAA,OAAA,KACuC,29BCYrD,CAAA,KAAAK,GAAAC,KAMAC,EAAAlF,EAAwB,IAAAmF,EAAArF,EAAA,KAAA,KAAA,CACe,EAGvCsF,EAAApF,EAAwB,IAAAmF,EAAArF,EAAA,KAAA,eAAA,CACyB,EAGjDuF,EAAArF,EAAA,IACE,OAAAF,EAAA,KAAA,eAAA,EAAA,OAAAA,EAAA,KAAA,KAAA,CAAmE,EAGrEwF,EAAAtF,EAAA,IAAA,CACE,MAAAuF,EAAAJ,EAAAE,EAAA,MAAA,SAAA,CAAA,EAEA,MAAA,GADAA,EAAA,MAAA,EAAA,IAAA,KACAE,GAAmB,CAAA,EAGrBC,EAAAxF,EAAA,KACE,CAAO,iBAAAqF,EAAA,MAAA,EACoC,eAAAA,EAAA,MAAA,CACF,EACzC,EAMF,SAAAF,EAAAM,EAAA,CACE,MAAAC,EAAAC,GAAA9C,EAAA4C,CAAA,EAAA,GAAA,EACA,OAAAT,EAAAU,EAAA,WAAA,CAAwC,MAAA,UAC/B,sBAAA,EACgB,YAAA,EACV,CAAA,CACd,wjBCjCH,CAAA,EAAArF,GAAAC,KACA,CAAA,KAAA0E,GAAAC,KACA,CAAA,mCAAAtC,GAAAxB,KAEAyE,EAAA5F,EAAA,IAAA,CACE,MAAA0F,EAAAC,GAAA,IAAAE,GAAA/F,EAAA,KAAA,SAAA,EAAA,EAAA,EACA,OAAAkF,EAAAU,EAAA,WAAA,CAAwC,MAAA,UAC/B,sBAAA,CACgB,CAAA,CACxB,CAAA,EAGHI,EAAA9F,EAAwC,IAAA,CAAA,CAAA2C,EAAA,MAAA,KAEOC,GAAAM,GAAAN,EAAA,QAAA9C,EAAA,KAAA,OAAA,CACK,CAChD,+rBCnBJiG,EAAA/F,EAAA,IAAA,CACE,OAAAF,EAAA,KAAA,CAAoB,IAAA,KAEhB,MAAA,iCAAO,IAAA,KAEP,MAAA,wBAAO,QAEP,MAAA,qBAAO,CACX,CAAA,sUC5BEkG,GAAA,CAAA,MAAA,4HAAA,mEAHF,SAAAC,GAAAC,EAAAC,EAAA,uuBCqEF5F,EAAAC,KACA,CAAA,EAAAH,GAAAC,KACA,CAAA,oBAAA8F,GAAAC,KACA,CAAA,cAAAC,GAAAjF,IACA,CAAA,kBAAAkF,EAAA,gBAAAC,EAAA,WAAAC,CAAA,EAAAC,GAAA,EAKAC,EAAA3G,EAAA,IAAA,CAA+D,CAC7D,KAAAK,EAAA,mCAAA,EAC6C,GAAA,QACvC,SAAA,GACM,OAAA,oBACF,KAAA,oBACF,MAAA,GACC,OAAA,EACC,EACV,CACA,KAAAA,EAAA,oCAAA,EAC8C,GAAA,QACxC,SAAA,MACM,OAAA,mBACF,KAAA,iBACF,MAAA,IACC,OAAA,EACC,EACV,CACA,KAAAA,EAAA,yCAAA,EACmD,GAAA,kBAC7C,SAAA,KACM,KAAA,sBACJ,MAAA,GACC,EACT,CACA,KAAAA,EAAA,6CAAA,EACuD,SAAA,KAC3C,MAAA,QACH,GAAA,kBACH,KAAA,sBACE,QAAAuC,GAAA,OAAAA,EAAA,eAAA,EACsC,MAAA,IACrC,cAAA,cACQ,EACjB,CACA,KAAAvC,EAAA,qCAAA,EAC+C,SAAA,UACnC,MAAA,QACH,GAAA,UACH,QAAAuC,GAAA,OAAAA,EAAA,SAAA,EACkC,MAAA,IAC/B,KAAA,cACD,cAAA,eACS,OAAA,CAAA0D,EAAA,KACQ,EACzB,CACA,KAAAjG,EAAA,wCAAA,EACkD,GAAA,OAC5C,SAAA,KACM,MAAA,QACH,KAAA,uBACD,QAAAuC,GAAA6D,EAAA7D,CAAA,EAC0B,MAAA,IACzB,OAAA,CAAA0D,EAAA,MACgB,WAAA,EACX,CACd,CAAA,EAMF,SAAAM,EAAAC,EAAA,CACE,OAAAA,EAAA,SAAA,aAAA,GAAAA,EAAA,SAAA,WAAA,CAA8D,CAGhE,SAAAC,EAAAlE,EAAAmE,EAAA,CACE,MAAAC,EAAAC,GAAArE,EAAAA,EAAA,OAAA,EACA,GAAA,CAAAgE,EAAAI,CAAA,EACE,OAAA,SAAA,KAAAA,MAAuB,CAEvB,MAAAE,EAAA3G,EAAA,QAAA,CAA6B,KAAA,OACrB,OAAA,CAAA,GAAAqC,EAAA,GAAA,YAAAuE,GAAAvE,EAAA,OAAA,CAAA,CAC2D,CAAA,EAEnEmE,EAAA,OAAA,KAAAG,EAAA,IAAA,EAAA3G,EAAA,KAAA2G,CAAA,CAAsD,CACxD,CAGF,SAAAE,EAAAxE,EAAA,CACE,MAAAyE,EAAAJ,GAAArE,EAAAA,EAAA,OAAA,EACA,OAAAgE,EAAAS,CAAA,EAAA,KAAAA,CAAuC,CAGzC,SAAAC,EAAAC,EAAA,CACE,MAAA,CAAA,CAAA,OAAAA,CAAA,CAAyB,CAG3B,SAAAC,EAAA5E,EAAA,CACE,OAAA0E,EAAA1E,EAAA,SAAA,GAAA2D,EAAA3D,EAAA,MAAA,OAAA,EAAA,oBAAA,EAGI,CAGN,SAAA6E,EAAAC,EAAA,CACE,OAAAA,EAAA,OACGC,GAAA,SAAA,QAAAvF,EAAAuF,EAAA,SAAA,YAAAvF,EAAA,mBAAAa,EAAAnD,EAAA,aAAA,YAAAmD,EAAA,eACwE,EAAA,IAAAE,GAAAA,EAAA,OAAA,CAEhD,CAG7B,SAAAyE,EAAAF,EAAA,CACE,OAAAA,EAAA,OACGC,GAAA,SAAA,OAAA7H,EAAA,cAAAmD,EAAA0E,EAAA,SAAA,YAAA1E,EAAA,cAAA,UAAAb,EAAAtC,EAAA,aAAA,YAAAsC,EAAA,gBAGuE,EAAA,IAAAe,GAAAA,EAAA,OAAA,CAE/C,4wHCzK7B,MAAA0E,EAAAlH,GAAA,GAAA,GAAA,EACAmH,EAAAnH,GAAA,GAAA,GAAA,EACAoH,EAAApH,GAAA,CAAA,EAAA,GAAA,EAEAqH,EAAA,OAAA,QAAA3F,CAAA,EAAA,OAAA4F,GAAA,CAEI,MAAAC,EAAAD,EAAA,CAAA,EACA,MAAA,CAAAC,EAAA,aAAAA,EAAA,MAAA,SAAA,iBAAA,OAAA,CACyE,CAAA,EAAA,IAAAD,GAAA,OAAAA,EAAA,CAAA,CAAA,CAAA,EAQ7E,CAAM,YAAAE,EACJ,iBAAAC,EACA,gBAAAC,EACA,qBAAAC,EACA,wBAAAC,CACA,EAAA3G,GAAA,EAEF,CAAA,kBAAA+B,EAAA,aAAAH,EAAA,QAAAC,EAAA,eAAAC,CAAA,EAAAL,KAGA,CAAA,oBAAAL,GAAA7B,KACA,CAAA,YAAAqH,GAAAC,KACA,CAAA,cAAAnC,GAAAjF,IAEA,CAAA,gBAAAqH,EAAA,eAAAC,CAAA,EAAA7G,GAAA,EACA,CAAA,KAAAkD,GAAAC,KAEA,CAAM,UAAA3B,EACJ,qBAAAsF,EACA,cAAAnG,EACA,sBAAAoG,EACA,kBAAAC,EACA,4BAAAC,EACA,6BAAAC,CACA,EAAAtC,GAAA,EAMFuC,EAAAjJ,EAAkC,IAAAkJ,GAAAd,EAAA,MAAApD,CAAA,CACY,EAG9CmE,GAAAnJ,EAAA,IACE8H,EAAA,MACEK,EAAA,MAGFA,EAAA,MAAA,OAAAvF,GACE,OAAAA,EAAA,SAAA,EAAA,EACE,GAEF,CAAAwG,GAAA3G,EAAA,MAAAG,EAAA,MAAA,OAAA,CAA8D,CAC/D,EAGHyG,GAAArJ,EAAA,IAEEmJ,GAAA,MAAA,OAAAvG,GAAA,CACE,IAAA0G,EAAA,GACA,OAAAvB,EAAA,MAAA,OAAA,GAAA,CAAAA,EAAA,MAAA,SAAAnF,EAAA,OAAA,IAIE0G,EAAA,IAGFA,GAAA1G,EAAA,OAAA,KAAA+E,GAAA,OAGI,OAAAvF,EAAAuF,EAAA,SAAA,YAAAvF,EAAA,cAAA,SAAAyF,EAAA,MAAA,YAAA,EAE2C,CAAA,CAC5C,CAAA,CAEJ,EAGH0B,GAAAvJ,EAA4B,IAAAsD,EAAA,OAAA,CAAAoF,EAAA,OAAAK,EAAA,KAII,EAGhCS,GAAAxJ,EAAuB,IAAAuJ,GAAA,OAAAV,EAAA,MAAA,SAAA,CACqD,EAM5EY,EAAA5J,EAAA,IAAA,EACA6J,EAAA7J,EAAA,EAAA,EACA,IAAA8J,GACA,SAAAC,IAAA,CACE,GAAA,EAAA,yBAAA,SAAA,EAAA,8BAAA,SAAA,CAAAH,EAAA,MAAA,CAKEC,EAAA,MAAAvB,EAAA,MAAA,OACA,MAAA,CAEF,MAAA0B,EAAA,CAAgB,WAAA,cACF,EAEdC,EAAAC,GAAA,CACEA,EAAA,QAAAC,GAAA,CACEA,EAAA,iBACEN,EAAA,OAAA,GACF,CAAA,CACD,EAEHC,GAAA,IAAA,qBAAAG,EAAAD,CAAA,EACAF,GAAA,QAAAF,EAAA,KAAA,CAA2C,CAE7C,OAAAQ,GAAA,IAAA,CACEL,IAAwB,CAAA,EAE1BM,GAAA,IAAA,CACEP,IAAA,MAAAA,GAAA,YAAqB,CAAA,EAEvBQ,GAAA,IAAA,CAAArC,EAAA,MAAAC,EAAA,KAAA,EAC4D,IAAA,CAExD2B,EAAA,MAAAvB,EAAA,MAAA,MAA0C,EAC5C,CAAA,KAAA,EAAA,CACa,EAGfgC,GAAA7G,EAAA,SAAA,CAEE0F,EAAAb,EAAA,KAAA,CAA8C,CAAA,EAEhDgC,GAAA5B,EAAA,SAAA,CAEE6B,GAAA,OACEpB,EAAAb,EAAA,KAAA,CACF,CAAA,i8HClIFkC,EAAAxK,EAAA,EAAA,EAKA,CAAA,WAAAyK,GAAAC,KACA,CAAA,KAAAvF,GAAAC,KACA,CAAA,aAAApD,EAAA,eAAA2I,CAAA,EAAA1I,GAAA,EACA,CAAA,EAAAzB,GAAAC,KACA,CAAA,cAAAgG,GAAAjF,IACA,CAAA,YAAAmH,GAAAC,KAKAgC,EAAAzK,EAAmB,IAAA6C,EAAA/C,EAAA,aAAA,cAAA,EAAA,IAAAA,EAAA,aAAA,WAAA,CACyD,EAG5E4K,EAAA1K,EAAA,IAAAsK,EAAAxK,EAAA,aAAA,OAAA,CAAA,EAEA6K,EAAA3K,EAAkB,IAAAyK,EAAA,MAAA,MAAAC,EAAA,KAAA,EAAA,SAAA,CACkC,EAGpDE,EAAA5K,EAAA,IAAA,SACE,OAAAoC,EAAAtC,EAAA,gBAAA,MAAAsC,EAAA,iBAAA,GAAAa,EAAAnD,EAAA,gBAAA,MAAAmD,EAAA,WACE4H,GAAA/K,EAAA,cAAA,cAAAgL,EAAA,EAGF,GAAO,CAAA,EAGTC,EAAA/K,EAA6B,IAAA,OAAA,OAAAoC,EAAAtC,EAAA,gBAAA,MAAAsC,EAAA,UAAAtC,EAAA,cAAA,aAAA,IACyC,EAGtEkL,EAAAhL,EAAiC,IAAA6C,EAAA/C,EAAA,aAAA,cAAA,EAAA,IAAAA,EAAA,aAAA,WAAA,EAAA,MAAAiL,EAAA,KAAA,EAAA,SAAA,CAInB,EAGdE,EAAAjL,EAAA,IAAA,WACE,MAAAkL,GAAA9I,EAAAtC,EAAA,gBAAA,YAAAsC,EAAA,gBACA+I,GAAAlI,EAAAnD,EAAA,gBAAA,YAAAmD,EAAA,UAEA,MAAA,CAAO,CACL,GAAA,YACM,MAAA5C,EAAA,qCAAA,EAC0C,MAAAiG,EAAA,MAAAtB,EAAA2F,EAAA,MAAAS,GAAA,IAAA,EAAA,IAG1C,cAAA9E,EAAA,MAAAtB,EAAA0F,EAAA,MAAAU,GAAA,KAAA,EAAA,IAGA,aAAA,EAAA9E,EAAA,MACuC,WAAA,CAC/B,KAAA,gBACJ,OAAA,CAAA,GAAAkE,EAAA,MAAA,YAAAhC,CAAA,EAC0C,MAAA,CAAA,YAAA,OAAA,CAClB,CAChC,EACF,CACA,GAAA,kBACM,MAAAnI,EAAA,2CAAA,EACgD,MAAAiG,EAAA,MAAAtB,EAAAlF,EAAA,iBAAAsL,GAAA,IAAA,EAAA,IAGhD,cAAA9E,EAAA,MAAAtB,IAAApB,EAAA9D,EAAA,gBAAA,YAAA8D,EAAA,eAAA,IAAAwH,GAAA,KAAA,EAAA,IAGA,aAAA,GAAA9E,EAAA,OAAA,CAAA6E,GACqD,WAAA,CAAA,KAAA,YAAA,MAAA,CAAA,YAAA,QAAA,EACQ,eAAA,EAAAA,CAC9B,EACrC,CACA,GAAA,gBACM,MAAA9K,EAAA,yCAAA,EAC8C,MAAAuK,EAAA,MAC/B,cAAAM,GAAA,CAAAC,EAAA9K,EAAA,kDAAA,CAGwCgL,GAAA,IAAA,KAAAT,EAAA,KAAA,EAAA,IAAA,IAAA,CACK,CAAA,EAAA,IAE1D,aAAA,GAAAM,GAAA,CAAAC,GAC+C,WAAA,CAAA,KAAA,YAAA,MAAA,CAAA,YAAA,QAAA,CACY,EACnE,CACA,GAAA,UACM,MAAA9K,EAAA,mCAAA,EACwC,cAAAP,EAAA,eAAAoL,GAAA,CAAAC,EAAA9K,EAAA,4CAAA,CAGS2E,EAC7CnC,EAAAhB,EAAA,KAAA,EAAA,IAAA/B,EAAA,cAAA,WAAA,EAAA,SAAA,EAGc,CACZ,MAAA,UACS,sBAAA,CACgB,CACzB,CACF,CAAA,EAAA,IAEF,aAAA,GACQ,MAAAoL,EAAAlG,EAAAnD,EAAA,MAAAuJ,GAAA,KAAA,EAAA,GAGV,CACN,CACF,CAAA,2qDC3IF,KAAA,CAAM,kBAAAE,EACJ,kBAAAC,EACA,SAAAC,EACA,cAAAC,EACA,KAAAC,EACA,iBAAAC,CACA,EAAAC,GAAA,EAEF,CAAA,cAAAtF,GAAAjF,IAMAiC,EAAAtD,EAAkB,IAAAsG,EAAA,MAAAgF,EAAA,OAAAC,EAAA,MAAA,EAGZ,svCCbN,CAAA,QAAAnK,GAAAC,IACA,CAAA,oBAAAwK,EAAA,gBAAAC,EAAA,oBAAAC,CAAA,EAAAC,GAAA,EAMAC,EAAA3H,GAAA,CACEF,EAAA,gBAAAE,CAAA,CAA6B,EAG/B,eAAA4H,GAAA,CACEpM,EAAA,eAAA,MACAsE,EAAA,sBAAA,CAAA,CAA6B,u5DCE/B,CAAA,EAAA/D,GAAAC,KACA,CAAA,eAAA6L,GAAAC,KACA,CAAA,WAAAC,GAAAC,KACA,CAAM,gBAAAR,EACJ,KAAAS,EACA,uBAAAC,EACA,oBAAAT,EACA,gBAAAU,CACA,EAAAT,GAAA,EAEF,CAAA,oBAAAU,GAAArL,IAKAsL,EAAA9M,EAAA,CAAA,EAKA,eAAA+M,EAAAC,EAAAvI,EAAA,CAIE6H,EAAA,CAAe,GAAAU,EAAA,KACN,KAAA,KACD,OAAA,OACE,QAAA,iBAAAxK,EAAAiC,CAAA,EAAA,mBACmC,CAAA,EAG7C+H,EAAAQ,EAAA,CAAe,cAAA,SAAA,CAEXJ,EAAAnI,EAAAuI,EAAA,IAAA,CAAgC,EAClC,WAAA,IAAA,CACkB,CAElB,CAAA,CACD,CAGH,eAAAC,EAAAxI,EAAA,CACE,GAAA,CACE,MAAAuI,EAAA,MAAAN,EAAAjI,CAAA,EAEA,OAAAsI,EAAAC,EAAAvI,CAAA,EAEAkI,EAAA,MAAA,KAAA1M,EAAA,cAAA,CAAA,EACA,aAAA,QAAa,sBACX,KAAA,UAAAiM,EAAA,KAAA,CACwC,EAG1CU,EAAAnI,EAAAuI,EAAA,IAAA,EAEAA,CAAO,OAAAE,EAAA,CAEP,eAAA,MAAAA,CAAA,EACA,QAAA,OAAAA,CAAA,CAA2B,CAC7B,CAGF,SAAAC,GAAA,CACE5I,EAAA,sBAAA,CAAA,CAA6B,CAM/B,MAAA6I,EAAAjN,EAAA,IAAA,CACE,MAAAkN,EAAA,CAAA,EACA,OAAApN,EAAA,eAAA,QAAAwE,GAAA,CACE4I,EAAA,KAAA,CAAa,MAAA7M,EAAA,gCAAA,CAC+B,QAAAgC,EAAAiC,CAAA,EAAA,SACd,CAAA,EAC3B,aAAAjE,EAAA,mCAAA,CACmD,QAAAgC,EAAAiC,CAAA,EAAA,SACxB,CAAA,EAC3B,gBAAAjE,EAAA,mCAAA,CACsD,QAAAgC,EAAAiC,CAAA,EAAA,SAC3B,CAAA,EAC3B,OAAA,SAECwI,EAAAxI,CAAA,EACF,YAAAjE,EAAA,gCAAA,CACgD,QAAAgC,EAAAiC,CAAA,EAAA,SACpB,CAAA,CAC3B,CAAA,CACF,CAAA,EAGH4I,CAAO,CAAA,y3BCzHMC,GAAA,kxBCUf,KAAA,CAAA,qBAAAC,GAAApB,k3CCmBA,MAAAqB,EAAAxN,EAAA,IAAA,GAAA,EAEAyN,EAAA,CAAAC,GAAAC,GAAAC,EAAA,EAEAC,EAAA7N,EAAA,CAAA,EAEA8N,EAAA9N,EAAA,EAAA,EAEA+N,EAAA,IAAA,CACExJ,EAAA,aACEuJ,EAAA,MAAA,MAAA,KAAAN,EAAA,KAAA,EAAA,IAC+D,EAGjEK,EAAA,MAAA,EACAL,EAAA,MAAA,IAAA,GAA+B,EAGjC,SAAApB,EAAA3H,EAAA,CACE,GAAA+I,EAAA,MAAA,IAAA/I,CAAA,EAAA,CACE+I,EAAA,MAAA,OAAA/I,CAAA,EACA,MAAA,CAEF+I,EAAA,MAAA,IAAA/I,CAAA,CAAgC,ypDChClC,KAAA,CAAA,mBAAAuJ,GAAAtD,KACA,CAAA,QAAAnJ,EAAA,cAAAkF,CAAA,EAAAjF,EAAA,EACA,CAAM,kBAAAyM,EACJ,oBAAAjC,EACA,gBAAAC,EACA,UAAAxI,EACA,KAAAiJ,EACA,oBAAAR,EACA,uBAAAS,EACA,eAAAuB,EACA,YAAAC,EACA,SAAAC,EACA,wBAAAC,EACA,qBAAAd,CACA,EAAApB,GAAA,EAEF,CAAA,KAAAhH,GAAAC,KACA,CAAA,aAAApD,GAAAC,KAKAqM,EAAAtO,EAAA,EAAA,EAIAuO,EAAApO,EAAA,IACE6C,EAAAhB,EAAA,KAAA,EAAA,UAAA,CAAA,CAA2C,EAO7C,SAAAwM,EAAA/L,EAAA,CACE,MAAAgM,EAAAhM,IAAAiM,GAAA,QAAA,GAAA,EAEA,MAAA,cAAAlM,EAAAC,CAAA,EAAA,kCAAAgM;AAAA;AAAA,IAA0EjM,EAAAC,CAAA,EAAA,kDAErD,CAGvB,SAAAkM,EAAAlK,EAAA,SACE,QAAAlC,EAAA0L,EAAA,QAAA,YAAA1L,EAAAkC,MAAAmK,GAAA,WAAAxL,EAAA8I,EAAA,MAAA3K,EAAA,KAAA,IAAA,YAAA6B,EAAA,SAAA,SAAAqB,GAEqE,CAGvE,SAAAoK,GAAA,CACEP,EAAA,MAAA,EAAwB,k8FCtD1B,MAAAQ,EAAAC,KACA,OAAAC,GAAAF,CAAA,EACAG,KACAC"}