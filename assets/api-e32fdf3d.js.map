{"version":3,"file":"api-e32fdf3d.js","sources":["../../src/dependencies/PoolsFallbackRepository.ts","../../src/services/block/subgraph/block-subgraph.client.ts","../../src/services/block/subgraph/entities/block-number/query.ts","../../src/services/block/subgraph/entities/block-number/index.ts","../../src/services/block/subgraph/block-subgraph.service.ts","../../src/services/block/block.service.ts","../../src/composables/useSnapshots.ts","../../src/services/balancer/subgraph/balancer-subgraph.client.ts","../../src/services/balancer/subgraph/entities/poolActivities/query.ts","../../src/services/balancer/subgraph/entities/poolActivities/index.ts","../../src/services/balancer/subgraph/entities/pools/query.ts","../../src/services/balancer/subgraph/entities/pools/index.ts","../../src/services/balancer/subgraph/entities/poolShares/query.ts","../../src/services/balancer/subgraph/entities/poolShares/index.ts","../../src/services/balancer/subgraph/entities/poolSnapshots/query.ts","../../src/services/balancer/subgraph/entities/poolSnapshots/index.ts","../../src/services/balancer/subgraph/entities/poolSwaps/query.ts","../../src/services/balancer/subgraph/entities/poolSwaps/index.ts","../../src/services/balancer/subgraph/entities/swapPairs/query.ts","../../src/services/balancer/subgraph/entities/swapPairs/index.ts","../../src/services/balancer/subgraph/balancer-subgraph.service.ts","../../src/services/pool/decorators/onchain-data.formater.ts","../../src/services/pool/pool.service.ts","../../src/services/pool/decorators/pool.multicaller.ts","../../src/services/pool/decorators/pool.decorator.ts","../../src/services/pool/pools-store.service.ts","../../src/lib/utils/balancer/api.ts"],"sourcesContent":["// eslint-disable-next-line no-restricted-imports\nimport { PoolsFallbackRepository } from '@balancer-labs/sdk';\nimport { handleDependencyError } from '.';\n\n// Initializing this heavy dependency by default we avoid calling initPoolsFallbackRepository in initDependencies from main.ts\n// so that we avoid including in in the initial bundle\n// as it is only imported when used via getPoolsFallbackRepository\nlet _repository: typeof PoolsFallbackRepository = PoolsFallbackRepository;\n\n/**\n * Uses the real PoolsFallbackRepository instance by default but allows injecting PoolsFallbackRepository mocks from tests\n */\nexport function initPoolsFallbackRepository(\n  repository: typeof PoolsFallbackRepository = PoolsFallbackRepository\n) {\n  _repository = repository;\n}\n\nexport type PoolsFallBackFactoryConstructor = PoolsFallbackRepository;\n\nexport function getPoolsFallbackRepository() {\n  if (!_repository) {\n    handleDependencyError('PoolsFallbackRepository');\n  }\n  return _repository;\n}\n","import axios from 'axios';\nimport { jsonToGraphQLQuery } from 'json-to-graphql-query';\n\nimport { configService as _configService } from '@/services/config/config.service';\n\nexport default class BlockSubgraphClient {\n  url: string;\n\n  constructor(private readonly configService = _configService) {\n    this.url = configService.network.subgraphs.blocks;\n  }\n\n  public async get(query) {\n    try {\n      const payload = this.toPayload(query);\n      const {\n        data: { data },\n      } = await axios.post(this.url, payload);\n      return data;\n    } catch (error) {\n      console.error(error);\n    }\n  }\n\n  public toPayload(query) {\n    return JSON.stringify({ query: jsonToGraphQLQuery({ query }) });\n  }\n}\n\nexport const blockSubgraphClient = new BlockSubgraphClient();\n","import { merge } from 'lodash';\n\nconst defaultArgs = {\n  first: 1,\n  orderBy: 'timestamp',\n  orderDirection: 'asc',\n};\n\nconst defaultAttrs = {\n  number: true,\n};\n\nexport default (args = {}, attrs = {}) => ({\n  blocks: {\n    __args: merge({}, defaultArgs, args),\n    ...merge({}, defaultAttrs, attrs),\n  },\n});\n","import { BlockNumberResponse } from '../../../types';\n\nimport { QueryBuilder } from '@/types/subgraph';\n\nimport Service from '../../block-subgraph.service';\nimport queryBuilder from './query';\n\nexport default class BlockNumber {\n  service: Service;\n  query: QueryBuilder;\n\n  constructor(service: Service, query: QueryBuilder = queryBuilder) {\n    this.service = service;\n    this.query = query;\n  }\n\n  public async get(args = {}, attrs = {}): Promise<BlockNumberResponse> {\n    const query = this.query(args, attrs);\n    const response = await this.service.client.get(query);\n\n    return response;\n  }\n}\n","import { rpcProviderService as _rpcProviderService } from '@/services/rpc-provider/rpc-provider.service';\n\nimport { blockSubgraphClient } from './block-subgraph.client';\nimport BlockNumber from './entities/block-number';\n\nexport default class BlockSubgraphService {\n  blockNumber: BlockNumber;\n\n  constructor(\n    readonly client = blockSubgraphClient,\n    readonly rpcProviderService = _rpcProviderService\n  ) {\n    this.blockNumber = new BlockNumber(this);\n  }\n}\n\nexport const blockSubgraphService = new BlockSubgraphService();\n","import { BlockNumberResponse } from './types';\nimport { blockSubgraphService } from './subgraph/block-subgraph.service';\nimport { getSecondsSince, oneHourInSecs } from '@/composables/useTime';\nimport { bnum } from '@/lib/utils';\nimport { rpcProviderService } from '../rpc-provider/rpc-provider.service';\nimport { configService } from '../config/config.service';\n\nexport default class BlockService {\n  constructor(\n    private readonly subgraphService = blockSubgraphService,\n    private readonly rpc = rpcProviderService,\n    private readonly config = configService\n  ) {}\n\n  public async fetchBlockByTime(\n    timestamp: string,\n    useRange = true\n  ): Promise<number> {\n    if (!this.config.network.subgraphs.blocks)\n      return this.fetchBlockByApprox(timestamp);\n    return this.fetchBlockByTimeWithGraph(timestamp, useRange);\n  }\n\n  /**\n   * Using the networks block time, fetches the block number for a given timestamp.\n   *\n   * @param {string} timestamp - The timestamp to fetch the block number for.\n   */\n  public async fetchBlockByApprox(timestamp: string): Promise<number> {\n    const secsSinceTimestamp = getSecondsSince(Number(timestamp));\n    const currentBlock = await this.rpc.getBlockNumber();\n    const blocksSinceTimestamp = Math.floor(\n      secsSinceTimestamp / this.config.network.blockTime\n    );\n\n    return currentBlock - blocksSinceTimestamp;\n  }\n\n  public async fetchBlockByTimeWithGraph(\n    timestamp: string,\n    useRange = true\n  ): Promise<number> {\n    try {\n      let query = {};\n      if (useRange) {\n        const oneHourLater = bnum(timestamp).plus(oneHourInSecs);\n        query = {\n          where: {\n            timestamp_gt: timestamp,\n            timestamp_lt: oneHourLater.toString(),\n          },\n        };\n      } else {\n        query = {\n          where: {\n            timestamp_gt: timestamp,\n          },\n        };\n      }\n\n      const response: BlockNumberResponse =\n        await this.subgraphService.blockNumber.get(query);\n\n      return parseInt(response.blocks[0].number);\n    } catch (error) {\n      if (useRange) return this.fetchBlockByTime(timestamp, false);\n      throw error;\n    }\n  }\n}\n\nexport const blockService = new BlockService();\n","import { twentyFourHoursInSecs } from './useTime';\nimport { blockService } from '@/services/block/block.service';\n\nexport type TimeTravelPeriod = '24h';\n\nexport async function getTimeTravelBlock(\n  period: TimeTravelPeriod = '24h'\n): Promise<number> {\n  const dayAgo = `${Math.floor(Date.now() / 1000) - twentyFourHoursInSecs}`;\n\n  switch (period) {\n    case '24h':\n      return blockService.fetchBlockByTime(dayAgo);\n    default:\n      return blockService.fetchBlockByTime(dayAgo);\n  }\n}\n","import { jsonToGraphQLQuery } from 'json-to-graphql-query';\n\nimport { subgraphFallbackService } from './subgraph-fallback.service';\n\nexport interface SubgraphQueryOptions {\n  url?: string;\n}\n\nexport default class BalancerSubgraphClient {\n  public async get(query) {\n    try {\n      const payload = this.toPayload(query);\n      const response = await subgraphFallbackService.get(payload);\n\n      if (!response) {\n        return;\n      }\n\n      return response.data.data;\n    } catch (error) {\n      console.error(error);\n    }\n  }\n\n  public toPayload(query) {\n    return { query: jsonToGraphQLQuery({ query }) };\n  }\n}\n\nexport const balancerSubgraphClient = new BalancerSubgraphClient();\n","import { merge } from 'lodash';\n\nconst defaultArgs = {\n  first: 100,\n  orderBy: 'timestamp',\n  orderDirection: 'desc',\n};\n\nconst defaultAttrs = {\n  amounts: true,\n  timestamp: true,\n  tx: true,\n  type: true,\n};\n\nexport default (args = {}, attrs = {}) => ({\n  joinExits: {\n    __args: merge({}, defaultArgs, args),\n    ...merge({}, defaultAttrs, attrs),\n  },\n});\n","import { PoolActivity } from '@/services/pool/types';\nimport { QueryBuilder } from '@/types/subgraph';\n\nimport Service from '../../balancer-subgraph.service';\nimport queryBuilder from './query';\n\nexport default class PoolActivities {\n  service: Service;\n  query: QueryBuilder;\n\n  constructor(service: Service, query: QueryBuilder = queryBuilder) {\n    this.service = service;\n    this.query = query;\n  }\n\n  public async get(args = {}, attrs = {}): Promise<PoolActivity[]> {\n    const query = this.query(args, attrs);\n    const { joinExits } = await this.service.client.get(query);\n    return this.serializeActivity(joinExits);\n  }\n\n  serializeActivity(poolActivities: PoolActivity[]) {\n    return poolActivities.map(poolActivity => ({\n      ...poolActivity,\n      timestamp: poolActivity.timestamp * 1000,\n    }));\n  }\n}\n","import { merge } from 'lodash';\n\nimport { POOLS } from '@/constants/pools';\nimport { GraphQLArgs } from '@balancer-labs/sdk';\n\nconst defaultArgs: GraphQLArgs = {\n  first: 1000,\n  orderBy: 'totalLiquidity',\n  orderDirection: 'desc',\n  where: {\n    // totalShares: {\n    //   gt: 0.00001,\n    // },\n    id: {\n      not_in: POOLS.BlockList,\n    },\n  },\n};\n\nconst tokenAttrs = {\n  address: true,\n  balance: true,\n  weight: true,\n  priceRate: true,\n  symbol: true,\n  decimals: true,\n};\n\nconst poolAttrs = {\n  id: true,\n  totalShares: true,\n  address: true,\n  poolType: true,\n  mainIndex: true,\n};\n\n// Nested token tree attributes, 3 levels deep.\nconst tokenTreeAttrs = {\n  ...tokenAttrs,\n  token: {\n    latestUSDPrice: true,\n    pool: {\n      ...poolAttrs,\n      tokens: {\n        ...tokenAttrs,\n        token: {\n          latestUSDPrice: true,\n          pool: {\n            ...poolAttrs,\n            tokens: {\n              ...tokenAttrs,\n              token: {\n                latestUSDPrice: true,\n                pool: {\n                  ...poolAttrs,\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n};\n\nconst priceRateProviderAttrs = {\n  address: true,\n  token: {\n    address: true,\n  },\n};\n\nconst defaultAttrs = {\n  id: true,\n  address: true,\n  poolType: true,\n  swapFee: true,\n  tokensList: true,\n  totalLiquidity: true,\n  totalSwapVolume: true,\n  totalSwapFee: true,\n  totalShares: true,\n  owner: true,\n  factory: true,\n  amp: true,\n  createTime: true,\n  swapEnabled: true,\n  symbol: true,\n  name: true,\n  protocolYieldFeeCache: true,\n  priceRateProviders: priceRateProviderAttrs,\n  tokens: tokenTreeAttrs,\n  poolTypeVersion: true,\n  isInRecoveryMode: true,\n  isPaused: true,\n};\n\nexport default (args = {}, attrs = {}) => ({\n  args: merge({}, defaultArgs, args),\n  attrs: merge({}, defaultAttrs, attrs),\n});\n","import { configService } from '@/services/config/config.service';\nimport { Pool } from '@/services/pool/types';\nimport { Network } from '@/lib/config/types';\nimport { PoolsQueryBuilder } from '@/types/subgraph';\nimport {\n  GraphQLArgs,\n  GraphQLQuery,\n  PoolsSubgraphRepository,\n} from '@balancer-labs/sdk';\nimport _ from 'lodash';\nimport Service from '../../balancer-subgraph.service';\nimport queryBuilder from './query';\n\nexport default class Pools {\n  service: Service;\n  queryBuilder: PoolsQueryBuilder;\n  lastQuery?: GraphQLQuery;\n  repository?: PoolsSubgraphRepository;\n\n  constructor(\n    service: Service,\n    _queryBuilder: PoolsQueryBuilder = queryBuilder\n  ) {\n    this.service = service;\n    this.queryBuilder = _queryBuilder;\n  }\n\n  public async get(args: GraphQLArgs = {}, attrs: any = {}): Promise<Pool[]> {\n    const query = this.queryBuilder(args, attrs);\n\n    if (!this.repository || !_.isEqual(query, this.lastQuery)) {\n      this.lastQuery = _.cloneDeep(query);\n      console.log(query);\n      this.repository = new PoolsSubgraphRepository({\n        url: configService.network.subgraph,\n        chainId: configService.network.chainId as Network,\n        query: query,\n      });\n    }\n\n    const pools = await this.repository.fetch({\n      first: query.args.first,\n      skip: query.args.skip,\n    });\n\n    return pools as Pool[];\n  }\n\n  get skip(): number {\n    return this.repository ? this.repository.skip : 0;\n  }\n}\n","import { merge } from 'lodash';\n\nconst defaultArgs = {\n  first: 1000,\n  where: {\n    balance_gt: 1e-6, // To exclude dust shares\n  },\n};\n\nconst defaultAttrs = {\n  poolId: {\n    id: true,\n  },\n  balance: true,\n};\n\nexport default (\n  args = {},\n  attrs = {},\n  name: string | undefined = undefined\n) => ({\n  __name: name,\n  poolShares: {\n    __args: merge({}, defaultArgs, args),\n    ...merge({}, defaultAttrs, attrs),\n  },\n});\n","import { PoolShare } from '@/services/pool/types';\nimport { QueryBuilder } from '@/types/subgraph';\n\nimport Service from '../../balancer-subgraph.service';\nimport poolQueryBuilder from './query';\n\nexport default class PoolShares {\n  service: Service;\n  query: QueryBuilder;\n\n  constructor(service: Service, query: QueryBuilder = poolQueryBuilder) {\n    this.service = service;\n    this.query = query;\n  }\n\n  public async get(args = {}, attrs = {}): Promise<PoolShare[]> {\n    const queryName = 'PoolShares';\n    const query = this.query(args, attrs, queryName);\n    const data = await this.service.client.get(query);\n    return data.poolShares;\n  }\n}\n","import { merge } from 'lodash';\n\nimport { isPolygon } from '@/composables/useNetwork';\n\nconst defaultArgs = {\n  first: 1000,\n};\n\nconst defaultAttrs = {\n  pool: {\n    id: true,\n  },\n  liquidity: true,\n  timestamp: true,\n  amounts: true,\n  totalShares: true,\n  swapVolume: true,\n  swapFees: true,\n};\n\nif (!isPolygon.value) {\n  defaultAttrs['liquidity'] = true;\n}\n\nexport default (args = {}, attrs = {}) => ({\n  poolSnapshots: {\n    __args: merge({}, defaultArgs, args),\n    ...merge({}, defaultAttrs, attrs),\n  },\n});\n","import { toJsTimestamp } from '@/composables/useTime';\nimport { PoolSnapshot, PoolSnapshots } from '@/services/pool/types';\nimport { QueryBuilder } from '@/types/subgraph';\n\nimport Service from '../../balancer-subgraph.service';\nimport poolQueryBuilder from './query';\n\nexport default class PoolSnapshotsRequest {\n  service: Service;\n  query: QueryBuilder;\n\n  constructor(service: Service, query: QueryBuilder = poolQueryBuilder) {\n    this.service = service;\n    this.query = query;\n  }\n\n  public async get(args = {}, attrs = {}): Promise<PoolSnapshots> {\n    const query = this.query(args, attrs);\n    const snapshots = await this.service.client.get(query);\n    return this.serialize(snapshots.poolSnapshots);\n  }\n\n  private serialize(poolSnapshots: PoolSnapshot[]): PoolSnapshots {\n    return poolSnapshots\n      .reverse()\n      .reduce((acc: Record<string, PoolSnapshot>, snapshot: PoolSnapshot) => {\n        const timestamp = toJsTimestamp(snapshot.timestamp);\n        acc[timestamp] = {\n          ...snapshot,\n          timestamp,\n        };\n        return acc;\n      }, {});\n  }\n}\n","import { merge } from 'lodash';\n\nconst defaultArgs = {\n  first: 100,\n  orderBy: 'timestamp',\n  orderDirection: 'desc',\n};\n\nconst defaultAttrs = {\n  tokenIn: true,\n  tokenOut: true,\n  tokenAmountIn: true,\n  tokenAmountOut: true,\n  tx: true,\n  timestamp: true,\n  userAddress: {\n    id: true,\n  },\n};\n\nexport default (args = {}, attrs = {}) => ({\n  swaps: {\n    __args: merge({}, defaultArgs, args),\n    ...merge({}, defaultAttrs, attrs),\n  },\n});\n","import { getAddress } from '@ethersproject/address';\n\nimport { toJsTimestamp } from '@/composables/useTime';\nimport { PoolSwap } from '@/services/pool/types';\nimport { walletService } from '@/services/web3/wallet.service';\nimport { QueryBuilder } from '@/types/subgraph';\n\nimport Service from '../../balancer-subgraph.service';\nimport queryBuilder from './query';\n\nexport default class PoolSwaps {\n  service: Service;\n  query: QueryBuilder;\n\n  constructor(service: Service, query: QueryBuilder = queryBuilder) {\n    this.service = service;\n    this.query = query;\n  }\n\n  public async get(args = {}, attrs = {}): Promise<PoolSwap[]> {\n    const query = this.query(args, attrs);\n    const { swaps } = await this.service.client.get(query);\n\n    return await this.serialize(swaps);\n  }\n\n  public async swaprDecoration(swaps: PoolSwap[]): Promise<PoolSwap[]> {\n    const ensData = await Promise.all(\n      swaps.map(async (poolSwap: PoolSwap) => {\n        const ensName = await walletService.getEnsName(poolSwap.userAddress.id);\n        let ensAvatar: null | string = null;\n\n        if (ensName) {\n          ensAvatar = await walletService.getEnsAvatar(ensName);\n        }\n\n        return {\n          ensName,\n          ensAvatar,\n        };\n      })\n    );\n\n    return swaps.map((swap: PoolSwap, index: number) => ({\n      ...swap,\n      ensName: ensData[index].ensName,\n      ensAvatar: ensData[index].ensAvatar,\n    }));\n  }\n\n  async serialize(swaps: PoolSwap[]) {\n    const processedSwaps = await this.swaprDecoration(swaps);\n\n    return processedSwaps.map(swap => ({\n      ...swap,\n      tokenIn: getAddress(swap.tokenIn),\n      tokenOut: getAddress(swap.tokenOut),\n      timestamp: toJsTimestamp(swap.timestamp),\n    }));\n  }\n}\n","import { merge } from 'lodash';\n\nconst defaultArgs = {\n  first: 1000,\n  where: {\n    totalSwapVolume_gt: 0,\n  },\n};\n\nconst defaultAttrs = {\n  totalSwapFee: true,\n  totalSwapVolume: true,\n  pair: {\n    token0: {\n      address: true,\n      symbol: true,\n    },\n    token1: {\n      address: true,\n      symbol: true,\n    },\n  },\n};\n\nexport default (args = {}, attrs = {}) => ({\n  tradePairSnapshots: {\n    __args: merge({}, defaultArgs, args),\n    ...merge({}, defaultAttrs, attrs),\n  },\n});\n","import { QueryBuilder } from '@/types/subgraph';\n\nimport Service from '../../balancer-subgraph.service';\nimport tradePairSnapshotQueryBuilder from './query';\n\nexport type TradePairSnapshot = {\n  timestamp: number;\n  totalSwapFee: string;\n  totalSwapVolume: string;\n  pair: {\n    token0: {\n      symbol: string;\n      address: string;\n    };\n    token1: {\n      symbol: string;\n      address: string;\n    };\n  };\n};\n\nexport default class TradePairSnapshots {\n  service: Service;\n  query: QueryBuilder;\n\n  constructor(\n    service: Service,\n    query: QueryBuilder = tradePairSnapshotQueryBuilder\n  ) {\n    this.service = service;\n    this.query = query;\n  }\n\n  public async get(args = {}, attrs = {}): Promise<TradePairSnapshot[]> {\n    const query = this.query(args, attrs);\n    const data = await this.service.client.get(query);\n    return data.tradePairSnapshots;\n  }\n}\n","import { rpcProviderService as _rpcProviderService } from '@/services/rpc-provider/rpc-provider.service';\n\nimport { balancerSubgraphClient } from './balancer-subgraph.client';\nimport PoolActivities from './entities/poolActivities';\nimport Pools from './entities/pools';\nimport PoolShares from './entities/poolShares';\nimport PoolSnapshots from './entities/poolSnapshots';\nimport PoolSwaps from './entities/poolSwaps';\nimport TradePairSnapshots from './entities/swapPairs';\n\nexport default class BalancerSubgraphService {\n  pools: Pools;\n  poolShares: PoolShares;\n  poolActivities: PoolActivities;\n  poolSwaps: PoolSwaps;\n  poolSnapshots: PoolSnapshots;\n  tradePairSnapshots: TradePairSnapshots;\n\n  constructor(\n    readonly client = balancerSubgraphClient,\n    readonly rpcProviderService = _rpcProviderService\n  ) {\n    // Init entities\n    this.pools = new Pools(this);\n    this.poolShares = new PoolShares(this);\n    this.poolActivities = new PoolActivities(this);\n    this.poolSwaps = new PoolSwaps(this);\n    this.poolSnapshots = new PoolSnapshots(this);\n    this.tradePairSnapshots = new TradePairSnapshots(this);\n  }\n}\n\nexport const balancerSubgraphService = new BalancerSubgraphService();\n","import { toNormalizedWeights } from '@balancer-labs/sdk';\nimport { formatUnits } from '@ethersproject/units';\n\nimport { isStableLike, isWeightedLike } from '@/composables/usePoolHelpers';\nimport { TokenInfoMap } from '@/types/TokenList';\n\nimport {\n  OnchainPoolData,\n  OnchainTokenDataMap,\n  Pool,\n  RawOnchainPoolData,\n} from '../types';\n\n/**\n * @summary Takes map of pool ids to onchain data and formats.\n */\nexport class OnchainDataFormater {\n  constructor(\n    private readonly pool: Pool,\n    private readonly rawData: RawOnchainPoolData,\n    private readonly tokenMeta: TokenInfoMap\n  ) {}\n\n  public format(): OnchainPoolData {\n    const poolData = <OnchainPoolData>{};\n\n    poolData.tokens = this.formatPoolTokens();\n\n    poolData.amp = '0';\n    if (this.rawData?.amp) {\n      poolData.amp = this.rawData.amp.value\n        .div(this.rawData.amp.precision)\n        .toString();\n    }\n\n    poolData.swapEnabled = true;\n    if (this.rawData.swapEnabled !== undefined) {\n      poolData.swapEnabled = this.rawData.swapEnabled;\n    }\n\n    if (this.rawData.tokenRates) {\n      poolData.tokenRates = this.rawData.tokenRates.map(rate =>\n        formatUnits(rate.toString(), 18)\n      );\n    }\n\n    poolData.totalSupply = formatUnits(\n      this.rawData.totalSupply,\n      this.rawData.decimals\n    );\n    poolData.decimals = this.rawData.decimals;\n    poolData.swapFee = formatUnits(this.rawData.swapFee, 18);\n\n    return poolData;\n  }\n\n  private formatPoolTokens(): OnchainTokenDataMap {\n    const tokens = <OnchainTokenDataMap>{};\n    const weights = this.normalizeWeights();\n\n    this.rawData.poolTokens.tokens.forEach((token, i) => {\n      const tokenBalance = this.rawData.poolTokens.balances[i];\n      const decimals = this.tokenMeta[token]?.decimals;\n      tokens[token.toLowerCase()] = {\n        decimals,\n        balance: formatUnits(tokenBalance, decimals),\n        weight: weights[i],\n        symbol: this.tokenMeta[token]?.symbol,\n        name: this.tokenMeta[token]?.name,\n        logoURI: this.tokenMeta[token]?.logoURI,\n      };\n    });\n\n    // Remove pre-minted BPT\n    delete tokens[this.pool.address.toLowerCase()];\n\n    return tokens;\n  }\n\n  private normalizeWeights(): number[] {\n    if (isWeightedLike(this.pool.poolType)) {\n      // toNormalizedWeights returns weights as 18 decimal fixed point\n      return toNormalizedWeights(this.rawData.weights || []).map(w =>\n        Number(formatUnits(w, 18))\n      );\n    } else if (isStableLike(this.pool.poolType)) {\n      const value = this.pool.tokensList.map(\n        () => 1 / this.pool.tokensList.length\n      );\n      return this.rawData.poolTokens.tokens.map(() => value[0]);\n    } else {\n      return [];\n    }\n  }\n}\n","import { differenceInWeeks } from 'date-fns';\n\nimport { isStable } from '@/composables/usePoolHelpers';\nimport { oneSecondInMs } from '@/composables/useTime';\nimport { bnum } from '@/lib/utils';\nimport {\n  OnchainPoolData,\n  Pool,\n  PoolToken,\n  RawOnchainPoolData,\n} from '@/services/pool/types';\nimport { TokenInfoMap } from '@/types/TokenList';\n\nimport { OnchainDataFormater } from './decorators/onchain-data.formater';\nimport { AprBreakdown } from '@balancer-labs/sdk';\nimport { networkId } from '@/composables/useNetwork';\nimport { getBalancerSDK } from '@/dependencies/balancer-sdk';\nimport { Pool as SDKPool } from '@balancer-labs/sdk';\nimport { captureBalancerException } from '@/lib/utils/errors';\n\nexport default class PoolService {\n  constructor(public pool: Pool) {\n    this.format();\n  }\n\n  /**\n   * @summary Statically format various pool attributes.\n   */\n  public format(): Pool {\n    this.pool.isNew = this.isNew;\n    this.pool.chainId = networkId.value;\n    this.formatPoolTokens();\n    return this.pool;\n  }\n\n  public get bptPrice(): string {\n    return bnum(this.pool.totalLiquidity).div(this.pool.totalShares).toString();\n  }\n\n  /**\n   * @summary Calculates and sets total liquidity of pool.\n   */\n  public async setTotalLiquidity(): Promise<string> {\n    let totalLiquidity = this.pool.totalLiquidity;\n\n    try {\n      console.log(this.pool);\n      const sdkTotalLiquidity = await getBalancerSDK().pools.liquidity(\n        this.pool as unknown as SDKPool\n      );\n      // if totalLiquidity can be computed from coingecko prices, use that\n      // else, use the value retrieved from the subgraph\n      if (bnum(totalLiquidity).gt(0)) {\n        totalLiquidity = sdkTotalLiquidity;\n      }\n    } catch (error) {\n      captureBalancerException({ error });\n      console.error(`Failed to calc liquidity for: ${this.pool.id}`, error);\n    }\n\n    return (this.pool.totalLiquidity = totalLiquidity);\n  }\n\n  /**\n   * @summary Calculates APRs for pool.\n   */\n  public async setAPR(): Promise<AprBreakdown> {\n    let apr = this.pool.apr;\n\n    try {\n      const sdkApr = await getBalancerSDK().pools.apr(this.pool);\n      if (sdkApr) apr = sdkApr;\n    } catch (error) {\n      captureBalancerException({ error });\n      console.error(`Failed to calc APR for: ${this.pool.id}`, error);\n    }\n\n    return (this.pool.apr = apr as AprBreakdown);\n  }\n\n  formatPoolTokens(): PoolToken[] {\n    if (isStable(this.pool.poolType)) return this.pool.tokens;\n\n    return (this.pool.tokens = this.pool.tokens.sort(\n      (a, b) => parseFloat(b.weight || '0') - parseFloat(a.weight || '0')\n    ));\n  }\n\n  public setFeesSnapshot(poolSnapshot: Pool | undefined): string {\n    let snapshotFees = '0';\n    if (poolSnapshot) snapshotFees = poolSnapshot.totalSwapFee || '0';\n\n    const feesSnapshot = bnum(this.pool.totalSwapFee || 0)\n      .minus(snapshotFees)\n      .toString();\n\n    return (this.pool.feesSnapshot = feesSnapshot);\n  }\n\n  public setVolumeSnapshot(poolSnapshot: Pool | undefined): string {\n    let snapshotVolume = '0';\n    if (poolSnapshot) snapshotVolume = poolSnapshot.totalSwapVolume || '0';\n\n    const volumeSnapshot = bnum(this.pool.totalSwapVolume || 0)\n      .minus(snapshotVolume)\n      .toString();\n\n    return (this.pool.volumeSnapshot = volumeSnapshot);\n  }\n\n  public setOnchainData(\n    rawOnchainData: RawOnchainPoolData,\n    tokenMeta: TokenInfoMap\n  ): OnchainPoolData | undefined {\n    try {\n      const onchainData = new OnchainDataFormater(\n        this.pool,\n        rawOnchainData,\n        tokenMeta\n      );\n      this.pool.isInRecoveryMode = rawOnchainData.isInRecoveryMode;\n      this.pool.isPaused = rawOnchainData.isPaused;\n      return (this.pool.onchain = onchainData.format());\n    } catch (e) {\n      console.warn(e);\n    }\n  }\n\n  public get isNew(): boolean {\n    if (!this.pool.createTime) return false;\n\n    return (\n      differenceInWeeks(Date.now(), this.pool.createTime * oneSecondInMs) < 1\n    );\n  }\n}\n","import {\n  InvestmentPool__factory,\n  StablePool__factory,\n  Vault__factory,\n  WeightedPool__factory,\n} from '@balancer-labs/typechain';\n\nimport {\n  isStableLike,\n  isSwappingHaltable,\n  isWeightedLike,\n  isComposableStableLike,\n  isComposableStable,\n} from '@/composables/usePoolHelpers';\nimport ERC20_ABI from '@/lib/abi/ERC20.json';\nimport IERC4626 from '@/lib/abi/IERC4626.json';\nimport LinearPoolABI from '@/lib/abi/LinearPool.json';\nimport StablePhantomPoolABI from '@/lib/abi/StablePhantomPool.json';\nimport StaticATokenLMABI from '@/lib/abi/StaticATokenLM.json';\nimport { configService } from '@/services/config/config.service';\n\nimport { Pool, RawOnchainPoolDataMap } from '../types';\nimport { getMulticaller } from '@/dependencies/Multicaller';\n\nconst PoolTypeABIs = Object.values(\n  Object.fromEntries(\n    [\n      ...WeightedPool__factory.abi,\n      ...StablePool__factory.abi,\n      ...InvestmentPool__factory.abi,\n      ...StablePhantomPoolABI,\n      ...LinearPoolABI,\n      ...StaticATokenLMABI,\n      ...ERC20_ABI,\n      ...IERC4626,\n    ].map(row => [row.name, row])\n  )\n);\n\nexport class PoolMulticaller {\n  constructor(\n    public readonly pools: Pool[],\n    private readonly MulticallerClass = getMulticaller(),\n    private readonly vaultAddress = configService.network.addresses.vault\n  ) {}\n\n  public async fetch(): Promise<RawOnchainPoolDataMap> {\n    const result = <RawOnchainPoolDataMap>{};\n    const multicaller = new this.MulticallerClass();\n\n    this.pools.forEach(pool => {\n      multicaller\n        .call({\n          key: `${pool.id}.totalSupply`,\n          address: pool.address,\n          function: 'totalSupply',\n          abi: PoolTypeABIs,\n        })\n        .call({\n          key: `${pool.id}.decimals`,\n          address: pool.address,\n          function: 'decimals',\n          abi: PoolTypeABIs,\n        })\n        .call({\n          key: `${pool.id}.swapFee`,\n          address: pool.address,\n          function: 'getSwapFeePercentage',\n          abi: PoolTypeABIs,\n        })\n        .call({\n          key: `${pool.id}.isInRecoveryMode`,\n          address: pool.address,\n          function: 'inRecoveryMode',\n          abi: ['function inRecoveryMode() view returns (bool)'],\n        })\n        .call({\n          key: `${pool.id}.isPaused`,\n          address: pool.address,\n          function: 'getPausedState',\n          abi: ['function getPausedState() view returns (bool)'],\n        })\n        .call({\n          key: `${pool.id}.poolTokens`,\n          address: this.vaultAddress,\n          function: 'getPoolTokens',\n          abi: Vault__factory.abi,\n          params: [pool.id],\n        });\n\n      if (isWeightedLike(pool.poolType)) {\n        multicaller.call({\n          key: `${pool.id}.weights`,\n          address: pool.address,\n          function: 'getNormalizedWeights',\n          abi: PoolTypeABIs,\n        });\n\n        if (isSwappingHaltable(pool.poolType)) {\n          multicaller.call({\n            key: `${pool.id}.swapEnabled`,\n            address: pool.address,\n            function: 'getSwapEnabled',\n            abi: PoolTypeABIs,\n          });\n        }\n      } else if (isStableLike(pool.poolType)) {\n        multicaller.call({\n          key: `${pool.id}.amp`,\n          address: pool.address,\n          function: 'getAmplificationParameter',\n          abi: PoolTypeABIs,\n        });\n\n        if (isComposableStableLike(pool.poolType)) {\n          // Overwrite totalSupply with virtualSupply for StablePhantom pools\n          multicaller.call({\n            key: `${pool.id}.totalSupply`,\n            address: pool.address,\n            function: 'getVirtualSupply',\n            abi: PoolTypeABIs,\n          });\n          if (isComposableStable(pool.poolType)) {\n            multicaller.call({\n              key: `${pool.id}.totalSupply`,\n              address: pool.address,\n              function: 'getActualSupply',\n              abi: PoolTypeABIs,\n            });\n          }\n        }\n      }\n    });\n\n    return await multicaller.execute(result);\n  }\n}\n","// import { getTimeTravelBlock } from '@/composables/useSnapshots';\nimport { getTimeTravelBlock } from '@/composables/useSnapshots';\nimport { balancerSubgraphService } from '@/services/balancer/subgraph/balancer-subgraph.service';\nimport { Pool } from '@/services/pool/types';\nimport { TokenInfoMap } from '@/types/TokenList';\nimport PoolService from '../pool.service';\nimport { PoolMulticaller } from './pool.multicaller';\n\n/**\n * @summary Decorates a set of pools with additonal data.\n */\nexport class PoolDecorator {\n  constructor(\n    public pools: Pool[],\n    private readonly poolServiceClass = PoolService,\n    private readonly poolSubgraph = balancerSubgraphService\n  ) {}\n\n  public async decorate(\n    tokens: TokenInfoMap,\n    fullDecoration = true\n  ): Promise<Pool[]> {\n    const processedPools = this.pools.map(pool => {\n      const poolService = new this.poolServiceClass(pool);\n      return poolService.pool;\n    });\n\n    const poolMulticaller = new PoolMulticaller(processedPools);\n\n    const [poolSnapshots, rawOnchainDataMap] = await Promise.all([\n      fullDecoration ? this.getSnapshots() : [],\n      poolMulticaller.fetch(),\n    ]);\n\n    const promises = processedPools.map(async pool => {\n      const poolService = new this.poolServiceClass(pool);\n\n      poolService.setOnchainData(rawOnchainDataMap[pool.id], tokens);\n\n      // All of the following are pre-cached by the Balancer API so we can skip\n      // decoration of them if the pool came from the API.\n      if (fullDecoration) {\n        const poolSnapshot = poolSnapshots.find(p => p.id === pool.id);\n        poolService.setFeesSnapshot(poolSnapshot);\n        poolService.setVolumeSnapshot(poolSnapshot);\n        await poolService.setTotalLiquidity();\n        await poolService.setAPR();\n      }\n\n      return poolService.pool;\n    });\n\n    return await Promise.all(promises);\n  }\n\n  /**\n   * Re-sets totalLiquidty on all pools, typically after prices have been updated.\n   */\n  public async reCalculateTotalLiquidities(): Promise<Pool[]> {\n    return Promise.all(\n      this.pools.map(async pool => {\n        const poolService = new this.poolServiceClass(pool);\n        await poolService.setTotalLiquidity();\n        return poolService.pool;\n      })\n    );\n  }\n\n  /**\n   * @summary Get snapshot data of pools\n   * @description Getting the past state of pools allows us to calculate\n   * snapshot values like volume and fees, currently fixed at past 24h\n   * (see getTimeTravelBlock).\n   */\n  private async getSnapshots(): Promise<Pool[]> {\n    const blockNumber = await getTimeTravelBlock();\n    const block = { number: blockNumber };\n    const isInPoolIds = { id: { in: this.pools.map(pool => pool.id) } };\n    try {\n      return await this.poolSubgraph.pools.get({\n        where: isInPoolIds,\n        block,\n      });\n    } catch (error) {\n      console.error('Failed to fetch pool snapshots', error);\n      return [];\n    }\n  }\n}\n","import { Ref, ref } from 'vue';\n\nimport { Pool } from './types';\n\nexport interface IPoolsStoreService {\n  pools: Ref<Pool[] | null>;\n  setPools(pools: Pool[]): void;\n  findPool(id: string): Pool | void;\n}\n\nexport class PoolsStoreService implements IPoolsStoreService {\n  public pools = ref<Pool[] | null>(null);\n\n  public setPools(pools: Pool[]): void {\n    this.pools.value = pools;\n  }\n\n  public addPools(pools: Pool[]): void {\n    this.pools.value = [...(this.pools.value ?? []), ...pools];\n  }\n\n  public findPool(id: string): Pool | void {\n    return this.pools.value?.find(pool => pool.id === id);\n  }\n}\n\nexport const poolsStoreService = new PoolsStoreService();\n","import { configService } from '@/services/config/config.service';\n\nexport const isBalancerApiDefined = !!configService.network.balancerApi;\n"],"names":["_repository","PoolsFallbackRepository","getPoolsFallbackRepository","handleDependencyError","BlockSubgraphClient","configService","_configService","__publicField","query","payload","data","axios","error","jsonToGraphQLQuery","blockSubgraphClient","defaultArgs","defaultAttrs","queryBuilder$3","args","attrs","merge","BlockNumber","service","queryBuilder","BlockSubgraphService","client","rpcProviderService","_rpcProviderService","blockSubgraphService","BlockService","subgraphService","rpc","config","timestamp","useRange","secsSinceTimestamp","getSecondsSince","currentBlock","blocksSinceTimestamp","oneHourLater","bnum","oneHourInSecs","response","blockService","getTimeTravelBlock","period","dayAgo","twentyFourHoursInSecs","BalancerSubgraphClient","subgraphFallbackService","balancerSubgraphClient","queryBuilder$2","PoolActivities","joinExits","poolActivities","poolActivity","POOLS","tokenAttrs","poolAttrs","tokenTreeAttrs","priceRateProviderAttrs","queryBuilder$1","Pools","_queryBuilder","_","PoolsSubgraphRepository","poolQueryBuilder$1","name","PoolShares","poolQueryBuilder","queryName","isPolygon","PoolSnapshotsRequest","snapshots","poolSnapshots","acc","snapshot","toJsTimestamp","PoolSwaps","swaps","ensData","poolSwap","ensName","walletService","ensAvatar","swap","index","getAddress","tradePairSnapshotQueryBuilder","TradePairSnapshots","BalancerSubgraphService","PoolSnapshots","balancerSubgraphService","OnchainDataFormater","pool","rawData","tokenMeta","poolData","_a","rate","formatUnits","tokens","weights","token","tokenBalance","decimals","_b","_c","_d","isWeightedLike","toNormalizedWeights","w","isStableLike","value","PoolService","networkId","totalLiquidity","sdkTotalLiquidity","getBalancerSDK","captureBalancerException","apr","sdkApr","isStable","a","b","poolSnapshot","snapshotFees","feesSnapshot","snapshotVolume","volumeSnapshot","rawOnchainData","onchainData","e","differenceInWeeks","oneSecondInMs","PoolTypeABIs","WeightedPool__factory","StablePool__factory","InvestmentPool__factory","StablePhantomPoolABI","LinearPoolABI","StaticATokenLMABI","ERC20_ABI","IERC4626","row","PoolMulticaller","pools","MulticallerClass","getMulticaller","vaultAddress","result","multicaller","Vault__factory","isSwappingHaltable","isComposableStableLike","isComposableStable","PoolDecorator","poolServiceClass","poolSubgraph","fullDecoration","processedPools","poolMulticaller","rawOnchainDataMap","promises","poolService","p","block","isInPoolIds","PoolsStoreService","ref","id","poolsStoreService","isBalancerApiDefined"],"mappings":"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"}