{"version":3,"file":"BalActionSteps.vue_vue_type_script_setup_true_lang-f37eca6e.js","sources":["../../src/types/index.ts","../../src/components/_global/BalHorizSteps/BalHorizSteps.vue","../../src/components/animate/AnimatePresence.vue","../../src/assets/images/icons/signature.svg","../../src/components/_global/BalActionSteps/BalActionSteps.vue"],"sourcesContent":["import { BatchSwapStep, SwapV2 } from '@balancer-labs/sdk';\nimport { BigNumberish } from '@ethersproject/bignumber';\nimport { TransactionRequest } from '@ethersproject/providers';\n\nexport type RuleFunction = (val: string | number) => string | boolean;\nexport type Rules = Array<RuleFunction>;\nexport interface FormRef {\n  validate(): boolean;\n}\n\nexport interface Token {\n  address: string;\n  balance: string;\n  balanceDenorm: BigNumberish;\n  chainId: number;\n  decimals: number;\n  logoURI: string;\n  name: string;\n  price: number;\n  price24HChange: number;\n  symbol: string;\n  value: number;\n  value24HChange: number;\n}\n\nexport type TokenMap = Record<string, Token>;\n\nexport interface Claim {\n  id: string;\n  amount: string;\n}\n\nexport interface WalletError extends Error {\n  code: number | string;\n  data?: {\n    originalError?: any;\n  };\n  metadata?: WalletErrorMetadata;\n}\n\nexport interface WalletErrorMetadata {\n  simulation?: string;\n  action?: string;\n  params?: any;\n  sender?: string;\n  options?: TransactionRequest;\n  chainId?: number;\n  block?: number;\n  ethValue?: string | number;\n}\n\nexport interface ErrorWithMetadata extends Error {\n  metadata?: {\n    action: string;\n    [key: string]: any;\n  };\n}\n\nexport type BatchSwap = {\n  amountTokenOut: string;\n  swaps: SwapV2[];\n  assets: string[];\n};\n\nexport type BatchSwapOut = {\n  returnAmounts: string[];\n  swaps: BatchSwapStep[];\n  assets: string[];\n};\n\nexport enum StepState {\n  Todo,\n  Active,\n  WalletOpen,\n  Pending,\n  Success,\n  Warning,\n  Error,\n  Completed,\n}\n\nexport type Step = {\n  tooltip: string;\n  state: StepState;\n};\n\nexport type Address = string;\n\nexport type TokenAmountMap = Record<Address, string>;\n\nexport type BaseContent = {\n  title: string;\n  description: string;\n};\n\nexport interface BlockNumberResponse {\n  data: {\n    blocks: [\n      {\n        number: string;\n      }\n    ];\n  };\n}\n","<script setup lang=\"ts\">\nimport useWeb3 from '@/services/web3/useWeb3';\nimport { getConnectorLogo } from '@/services/web3/wallet-logos';\nimport { Step, StepState } from '@/types';\n\nconst stepState = StepState;\n\n/**\n * TYPES\n */\ntype Props = {\n  steps: Step[];\n  spacerWidth: number;\n};\n\n/**\n * PROPS\n */\nwithDefaults(defineProps<Props>(), {\n  steps: () => [\n    { tooltip: 'You did this', state: StepState.Success },\n    { tooltip: 'Wallet is tiggered', state: StepState.WalletOpen },\n    { tooltip: 'This is pending', state: StepState.Pending },\n    { tooltip: 'Do this now', state: StepState.Active },\n    { tooltip: 'Do this next', state: StepState.Todo },\n  ],\n  spacerWidth: 16,\n});\n\n/**\n * COMPOSABLES\n */\nconst { connector, provider } = useWeb3();\n\n/**\n * COMPUTED\n */\nconst walletLogo = computed((): string =>\n  getConnectorLogo(connector?.value?.id, provider)\n);\n\n/**\n * METHODS\n */\nfunction stateClasses(state: StepState): string {\n  switch (state) {\n    case StepState.Success:\n      return 'border-green-500 dark:border-green-500 text-green-500';\n    case StepState.Pending:\n      return 'border-none dark:border-none text-orange-500';\n    case StepState.Active:\n      return 'border-purple-500 dark:border-purple-500 text-gradient';\n    case StepState.WalletOpen:\n      return 'border-purple-500 dark:border-purple-500 text-gradient';\n    default:\n      return 'dark:border-gray-700';\n  }\n}\n</script>\n\n<template>\n  <div class=\"flex items-center\">\n    <div v-for=\"(step, i) in steps\" :key=\"i\" class=\"flex items-center\">\n      <div\n        v-if=\"i !== 0\"\n        :class=\"['h-px bg-gray-100 dark:bg-gray-700', `w-${spacerWidth}`]\"\n      />\n      <BalTooltip :text=\"step.tooltip\" width=\"44\" textAlign=\"center\">\n        <template #activator>\n          <div :class=\"['step', stateClasses(step.state)]\">\n            <BalIcon v-if=\"step.state === stepState.Success\" name=\"check\" />\n            <img\n              v-else-if=\"step.state === stepState.WalletOpen\"\n              :src=\"walletLogo\"\n              class=\"w-4 h-4\"\n            />\n            <template v-else-if=\"step.state === stepState.Pending\">\n              <span\n                class=\"absolute top-1/2 left-1/2 -translate-x-1/2 -translate-y-1/2\"\n              >\n                {{ i + 1 }}\n              </span>\n              <SpinnerIcon class=\"w-8 h-8 animate-spin\" />\n            </template>\n            <span v-else>\n              {{ i + 1 }}\n            </span>\n          </div>\n        </template>\n      </BalTooltip>\n    </div>\n  </div>\n</template>\n\n<style scoped>\n.step {\n  @apply w-8 h-8 rounded-full border shadow font-medium;\n  @apply flex items-center justify-center relative;\n}\n</style>\n","<template>\n  <transition\n    class=\"relative\"\n    appear\n    :css=\"false\"\n    @enter=\"enter\"\n    @leave=\"leave\"\n  >\n    <div v-if=\"isVisible\" id=\"animateContainer\" ref=\"animateContainer\">\n      <slot />\n    </div>\n  </transition>\n</template>\n\n<script lang=\"ts\">\nimport anime, { AnimeParams } from 'animejs';\nexport default defineComponent({\n  props: {\n    initial: {\n      type: Object as PropType<AnimeParams>,\n      default: () => ({\n        opacity: 0,\n      }),\n    },\n    animate: {\n      type: Object as PropType<AnimeParams>,\n      default: () => ({\n        opacity: 1,\n      }),\n    },\n    exit: {\n      type: Object as PropType<AnimeParams>,\n      default: () => ({\n        opacity: 0,\n      }),\n    },\n    unmountInstantly: {\n      type: Boolean,\n      default: () => false,\n    },\n    isVisible: {\n      type: Boolean,\n      default: () => true,\n    },\n  },\n  emits: ['on-exit', 'update-dimensions', 'on-presence'],\n  setup(props, { emit }) {\n    const animateContainer = ref<HTMLElement>();\n\n    onMounted(() => {\n      if (animateContainer.value) {\n        anime.set(animateContainer.value, {\n          ...props.initial,\n        });\n      }\n    });\n\n    watch(\n      () => props.isVisible,\n      async () => {\n        if (props.isVisible) {\n          await nextTick();\n          if (animateContainer.value) {\n            anime.set(animateContainer.value, {\n              ...props.initial,\n            });\n          }\n        }\n      }\n    );\n\n    const enter = async (el, done) => {\n      // on mount we set initial values, but the issue is that enter will run at\n      // the same time, setTimeout(0) makes the animation run on the next\n      // available tick, so it's instant visually but on a tick delay for code\n      emit('on-presence', { isCompleted: false });\n\n      setTimeout(() => {\n        anime({\n          targets: el,\n          ...props.animate,\n          easing: 'spring(0.2, 80, 10, 0)',\n          complete: () => {\n            done();\n            emit('on-presence', { isCompleted: true });\n          },\n        });\n      }, 0);\n      setTimeout(() => {\n        if (animateContainer.value) {\n          emit('update-dimensions', {\n            width: animateContainer.value.offsetWidth,\n            height: animateContainer.value.offsetHeight,\n          });\n        }\n      }, 0);\n    };\n\n    const leave = (el, done) => {\n      if (props.unmountInstantly) {\n        done();\n        emit('on-exit', { isCompleted: true });\n      }\n      anime.set(el, {\n        'pointer-events': 'none',\n      });\n      anime({\n        targets: el,\n        ...props.exit,\n        easing: 'spring(0.2, 80, 10, 0)',\n\n        complete: () => {\n          done();\n          emit('on-exit', { isCompleted: true });\n        },\n      });\n    };\n\n    return {\n      animateContainer,\n      enter,\n      leave,\n    };\n  },\n});\n</script>\n","export default \"__VITE_ASSET__3445aba7__\"","<script setup lang=\"ts\">\n/**\n * A series of actions the user must perform, displayed horizontally as a series of dots\n * As each action is in progress or completed the dot changes to reflect its\n * current state.\n *\n * Useful if there are an arbitrary number of actions the user must take such as\n * \"approve n tokens, then add liquidity to a pool.\"\"\n */\nimport {\n  TransactionReceipt,\n  TransactionResponse,\n} from '@ethersproject/abstract-provider';\n\nimport AnimatePresence from '@/components/animate/AnimatePresence.vue';\nimport useEthers from '@/composables/useEthers';\nimport { dateTimeLabelFor } from '@/composables/useTime';\nimport { Step, StepState } from '@/types';\nimport {\n  TransactionActionInfo,\n  TransactionActionState,\n} from '@/types/transactions';\nimport signature from '@/assets/images/icons/signature.svg';\nimport { useI18n } from 'vue-i18n';\nimport {\n  TransactionAction,\n  postConfirmationDelay,\n} from '@/composables/useTransactions';\nimport { captureBalancerException, useErrorMsg } from '@/lib/utils/errors';\n\n/**\n * TYPES\n */\ntype Props = {\n  actions: TransactionActionInfo[];\n  primaryActionType: TransactionAction;\n  disabled?: boolean;\n  // override action state loading prop and show\n  // loading for all steps\n  isLoading?: boolean;\n  // override action state loading label\n  // for all steps\n  loadingLabel?: string;\n};\n\ntype BalStepAction = {\n  label: string;\n  loadingLabel: string;\n  pending: boolean;\n  step: Step;\n  promise: () => Promise<void>;\n  isSignAction?: boolean;\n};\n\n/**\n * PROPS & EMITS\n */\nconst props = withDefaults(defineProps<Props>(), {\n  disabled: false,\n  isLoading: false,\n  loadingLabel: '',\n});\n\nconst emit = defineEmits<{\n  (e: 'success', tx: TransactionReceipt, confirmedAt: string): void;\n  (e: 'failed'): void;\n  (e: 'setCurrentActionIndex', value: number): void;\n}>();\n\nconst defaultActionState: TransactionActionState = {\n  init: false,\n  confirming: false,\n  confirmed: false,\n  confirmedAt: '',\n};\n\n/**\n * STATE\n */\nconst currentActionIndex = ref(0);\nconst _actions = ref<TransactionActionInfo[]>(props.actions);\nconst actionStates = ref<TransactionActionState[]>([]);\n\n/**\n * LIFECYCLE\n */\nonBeforeMount(() => {\n  actionStates.value = props.actions.map(() => ({\n    ...defaultActionState,\n  }));\n});\n\n/**\n * WATCHERS\n */\nwatch(\n  () => props.actions,\n  newActions => {\n    newActions.forEach((action, i) => {\n      _actions.value[i] = action;\n      if (!actionStates.value[i]) {\n        actionStates.value[i] = {\n          ...defaultActionState,\n        };\n      }\n    });\n  },\n  { deep: true }\n);\n\nwatch(\n  () => currentActionIndex.value,\n  (val: number) => {\n    emit('setCurrentActionIndex', val);\n  },\n  { immediate: true }\n);\n/**\n * COMPOSABLES\n */\nconst { txListener, getTxConfirmedAt } = useEthers();\nconst { formatErrorMsg } = useErrorMsg();\nconst { t } = useI18n();\n\n/**\n * COMPUTED\n */\n\nconst actions = computed((): BalStepAction[] => {\n  return _actions.value.map((actionInfo, idx) => {\n    const actionState = actionStates.value[idx];\n    return {\n      label: actionInfo.label,\n      loadingLabel: actionState.init\n        ? actionInfo.loadingLabel\n        : actionInfo.confirmingLabel,\n      pending: actionState.init || actionState.confirming,\n      isSignAction: actionInfo.isSignAction,\n      promise: submit.bind(null, actionInfo, actionState),\n      step: {\n        tooltip: actionInfo.stepTooltip,\n        state: getStepState(actionState, idx),\n      },\n    };\n  });\n});\n\nconst currentAction = computed(\n  (): BalStepAction | undefined => actions.value[currentActionIndex.value]\n);\n\nconst currentActionState = computed(\n  (): TransactionActionState => actionStates.value[currentActionIndex.value]\n);\n\nconst lastActionState = computed(\n  (): TransactionActionState =>\n    actionStates.value[actionStates.value.length - 1]\n);\n\nconst steps = computed((): Step[] => actions.value.map(action => action.step));\n\nconst spacerWidth = computed((): number => {\n  return 13 - steps.value.length;\n});\n\nconst _loadingLabel = computed((): string => {\n  if (currentAction.value?.pending) return currentAction.value.loadingLabel;\n  return props.loadingLabel || t('loading');\n});\n\n/**\n * METHODS\n */\n\nfunction getStepState(\n  actionState: TransactionActionState,\n  index: number\n): StepState {\n  if (currentActionIndex.value < index) return StepState.Todo;\n  else if (actionState.confirming) return StepState.Pending;\n  else if (actionState.init) return StepState.WalletOpen;\n  else if (actionState.confirmed) return StepState.Success;\n  return StepState.Active;\n}\n\nasync function submit(\n  actionInfo: TransactionActionInfo,\n  state: TransactionActionState\n): Promise<void> {\n  const { action } = actionInfo;\n  try {\n    state.init = true;\n    state.error = null;\n\n    const tx = await action();\n\n    state.init = false;\n    state.confirming = true;\n\n    if (currentAction.value?.isSignAction) {\n      handleSignAction(state);\n      return;\n    }\n\n    if (tx) handleTransaction(tx, state, actionInfo);\n  } catch (error) {\n    state.init = false;\n    state.confirming = false;\n    state.error = formatErrorMsg(error);\n    captureBalancerException({\n      error: (error as Error)?.cause || error,\n      action: props.primaryActionType,\n      context: { level: 'fatal' },\n    });\n  }\n}\n\nfunction handleSignAction(state: TransactionActionState) {\n  currentActionIndex.value += 1;\n  state.confirming = false;\n  state.confirmed = true;\n}\n\nasync function handleTransaction(\n  tx: TransactionResponse,\n  state: TransactionActionState,\n  actionInfo: TransactionActionInfo\n): Promise<void> {\n  const { postActionValidation, actionInvalidReason } = actionInfo;\n\n  await txListener(tx, {\n    onTxConfirmed: async (receipt: TransactionReceipt) => {\n      state.receipt = receipt;\n\n      await postConfirmationDelay(tx);\n\n      const isValid = await postActionValidation?.();\n      if (isValid || !postActionValidation) {\n        const confirmedAt = await getTxConfirmedAt(receipt);\n        state.confirmedAt = dateTimeLabelFor(confirmedAt);\n        state.confirmed = true;\n        if (currentActionIndex.value >= actions.value.length - 1) {\n          emit('success', receipt, state.confirmedAt);\n        } else {\n          currentActionIndex.value += 1;\n        }\n      } else {\n        // post action validation failed, display reason.\n        if (actionInvalidReason) state.error = actionInvalidReason;\n        state.init = false;\n      }\n      state.confirming = false;\n    },\n    onTxFailed: () => {\n      state.confirming = false;\n      emit('failed');\n    },\n  });\n}\n</script>\n\n<template>\n  <div>\n    <AnimatePresence isVisible>\n      <BalAlert\n        v-if=\"currentActionState?.error && !isLoading\"\n        type=\"error\"\n        :title=\"currentActionState?.error?.title\"\n        :description=\"currentActionState?.error?.description\"\n        block\n        class=\"mb-4\"\n      />\n      <BalStack vertical>\n        <BalHorizSteps\n          v-if=\"actions.length > 1 && !lastActionState?.confirmed\"\n          :steps=\"steps\"\n          :spacerWidth=\"spacerWidth\"\n          class=\"flex justify-center\"\n        />\n        <BalBtn\n          v-if=\"!lastActionState?.confirmed\"\n          :disabled=\"props.disabled\"\n          color=\"gradient\"\n          :loading=\"currentAction?.pending || isLoading\"\n          :loadingLabel=\"_loadingLabel\"\n          block\n          @click=\"currentAction?.promise()\"\n        >\n          <div\n            :class=\"{\n              'flex grow justify-between items-center':\n                currentAction?.isSignAction,\n            }\"\n          >\n            <img v-if=\"currentAction?.isSignAction\" :src=\"signature\" />\n            {{ currentAction?.label }}\n            <div v-if=\"currentAction?.isSignAction\" class=\"w-8\"></div>\n          </div>\n        </BalBtn>\n      </BalStack>\n    </AnimatePresence>\n  </div>\n</template>\n"],"names":["StepState","StepState2","stepState","connector","provider","useWeb3","walletLogo","computed","getConnectorLogo","_a","stateClasses","state","_sfc_main$1","defineComponent","props","emit","animateContainer","ref","onMounted","anime","watch","nextTick","el","done","_hoisted_1","_openBlock","_createBlock","_Transition","_ctx","_withCtx","_createElementBlock","signature","defaultActionState","currentActionIndex","_actions","actionStates","onBeforeMount","newActions","action","i","val","txListener","getTxConfirmedAt","useEthers","formatErrorMsg","useErrorMsg","t","useI18n","actions","actionInfo","idx","actionState","submit","getStepState","currentAction","currentActionState","lastActionState","steps","spacerWidth","_loadingLabel","index","tx","handleSignAction","handleTransaction","error","captureBalancerException","postActionValidation","actionInvalidReason","receipt","postConfirmationDelay","confirmedAt","dateTimeLabelFor"],"mappings":"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"}