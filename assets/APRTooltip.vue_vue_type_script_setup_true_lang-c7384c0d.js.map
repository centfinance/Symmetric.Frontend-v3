{"version":3,"file":"APRTooltip.vue_vue_type_script_setup_true_lang-c7384c0d.js","sources":["../../src/components/_global/BalBreakdown/BalBreakdown.vue","../../src/components/tooltips/APRTooltip/components/StakingBreakdown.vue","../../src/components/tooltips/APRTooltip/components/VeBalBreakdown.vue","../../src/components/tooltips/APRTooltip/components/YieldBreakdown.vue","../../src/components/tooltips/APRTooltip/APRTooltip.vue"],"sourcesContent":["<script setup lang=\"ts\">\n/**\n * TYPES\n */\ntype Props = {\n  items: Array<any>;\n  title?: string;\n  hideItems?: boolean;\n  size?: string;\n  offsetClassOverrides?: string;\n  initVertBarClassOverrides?: string;\n};\n\n/**\n * PROPS\n */\nconst props = withDefaults(defineProps<Props>(), {\n  title: 'Title',\n  hideItems: false,\n  size: 'md',\n  offsetClassOverrides: '',\n  initVertBarClassOverrides: '',\n});\n\n/**\n * COMPUTED\n */\nconst initVertBarSizes = computed(() => {\n  if (props.initVertBarClassOverrides != null) {\n    return props.initVertBarClassOverrides;\n  }\n\n  switch (props.size) {\n    case 'lg':\n      return 'h-8 -mt-8';\n    default:\n      return 'h-4 -mt-4';\n  }\n});\n\nconst vertBarSizes = computed(() => {\n  switch (props.size) {\n    case 'lg':\n      return 'h-16 -mt-16';\n    default:\n      return 'h-8 -mt-8';\n  }\n});\n\nconst spacingClass = computed(() => {\n  switch (props.size) {\n    case 'lg':\n      return 'mt-4';\n    default:\n      return 'mt-0';\n  }\n});\n\nconst offsetClass = computed(() => {\n  if (props.offsetClassOverrides) {\n    return props.offsetClassOverrides;\n  }\n\n  switch (props.size) {\n    case 'lg':\n      return 'mt-3 ml-px';\n    default:\n      return 'mt-2 ml-px';\n  }\n});\n</script>\n\n<template>\n  <div>\n    <div>\n      <slot>\n        {{ title }}\n      </slot>\n    </div>\n    <div v-if=\"!hideItems\" :class=\"['flex flex-col', offsetClass]\">\n      <div\n        v-for=\"(item, i) in items\"\n        :key=\"i\"\n        :class=\"['flex items-center', { [spacingClass]: i !== 0 }]\"\n      >\n        <div v-if=\"i === 0\" :class=\"['init-vert-bar', initVertBarSizes]\" />\n        <div v-else :class=\"['vert-bar', vertBarSizes]\" />\n        <div class=\"horiz-bar\" />\n        <div class=\"grow\">\n          <slot name=\"item\" :item=\"item\" />\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<style scoped>\n.horiz-bar {\n  @apply h-px w-3 bg-gray-200 dark:bg-gray-700 mr-2;\n}\n\n.init-vert-bar {\n  @apply w-px bg-gray-200 dark:bg-gray-700 -mr-px;\n}\n\n.vert-bar {\n  @apply w-px bg-gray-200 dark:bg-gray-700 -mr-px;\n}\n</style>\n","<script lang=\"ts\" setup>\nimport { computed } from 'vue';\n\nimport useNumbers, { FNumFormats } from '@/composables/useNumbers';\nimport { bnum } from '@/lib/utils';\nimport { Pool } from '@/services/pool/types';\nimport { AprBreakdown } from '@balancer-labs/sdk';\nimport { useTokens } from '@/providers/tokens.provider';\nimport { hasBalEmissions, hasStakingRewards } from '@/composables/useAPR';\n\n/**\n * TYPES\n */\ntype Props = {\n  pool: Pool;\n  poolApr?: AprBreakdown;\n};\n\n/**\n * PROPS & EMITS\n */\nconst props = defineProps<Props>();\n\n/**\n * COMPOSABLES\n */\nconst { fNum } = useNumbers();\nconst { getToken } = useTokens();\n\n/**\n * COMPUTED\n */\n\nconst apr = computed(() => props.pool?.apr || props.poolApr);\n\nconst boost = computed((): string => props.pool?.boost || '');\nconst hasBoost = computed((): boolean => !!boost.value);\nconst stakingAPR = computed(\n  (): AprBreakdown['stakingApr'] | undefined => apr.value?.stakingApr\n);\nconst isMinMaxSame = computed(\n  (): boolean => stakingAPR.value?.min === stakingAPR.value?.max\n);\nconst minBalAPR = computed((): number => stakingAPR.value?.min || 0);\nconst maxBalAPR = computed((): number => stakingAPR.value?.max || 0);\nconst rewardTokensAPR = computed(\n  (): number => apr.value?.rewardAprs.total || 0\n);\nconst hasRewardTokens = computed((): boolean =>\n  bnum(rewardTokensAPR.value).gt(0)\n);\n\n/**\n * @summary The total APR if we have the user's boost.\n */\nconst boostedTotalAPR = computed((): string => {\n  if (apr.value && hasBalEmissions(apr.value)) {\n    const boostedStakingAPR = bnum(minBalAPR.value)\n      .times(boost.value)\n      .plus(rewardTokensAPR.value)\n      .toString();\n\n    return fNum(boostedStakingAPR, FNumFormats.bp);\n  }\n\n  return fNum(rewardTokensAPR.value, FNumFormats.bp);\n});\n\n/**\n * @summary The total APR if we have don't have the user's boost.\n */\nconst unboostedTotalAPR = computed((): string =>\n  fNum(\n    bnum(minBalAPR.value).plus(rewardTokensAPR.value).toString(),\n    FNumFormats.bp\n  )\n);\n\nconst breakdownItems = computed((): Array<any> => {\n  const items: Array<any> = [];\n\n  if (!isMinMaxSame.value) {\n    items.push(['Min BAL', minBalAPR.value], ['Max BAL', maxBalAPR.value]);\n  }\n\n  if (hasRewardTokens.value) {\n    if (isMinMaxSame.value && minBalAPR.value > 0) {\n      items.push(['BAL', minBalAPR.value]);\n    }\n\n    const rewardAprTokens = apr.value?.rewardAprs.breakdown;\n    if (rewardAprTokens) {\n      Object.keys(rewardAprTokens).forEach(address => {\n        if (rewardAprTokens[address] === 0) return;\n\n        items.push([\n          getToken(address)?.symbol || 'Rewards',\n          rewardAprTokens[address],\n        ]);\n      });\n    } else {\n      items.push(['Rewards', rewardTokensAPR.value]);\n    }\n  }\n\n  return items;\n});\n</script>\n\n<template>\n  <div data-testid=\"staking-apr\">\n    <div v-if=\"hasBoost\">\n      <div class=\"flex items-center\">\n        {{ boostedTotalAPR }}\n        <span class=\"ml-1 text-secondarytext-xs\">\n          {{ $t('staking.stakingApr') }}\n        </span>\n      </div>\n    </div>\n    <template v-else>\n      <BalBreakdown\n        v-if=\"hasBalEmissions(apr) || hasStakingRewards(apr)\"\n        :items=\"breakdownItems\"\n      >\n        <div class=\"flex items-center\">\n          {{ unboostedTotalAPR }}\n          <span class=\"ml-1 text-xs text-secondary\">\n            {{\n              isMinMaxSame\n                ? $t('staking.stakingApr')\n                : $t('staking.minimumStakingApr')\n            }}\n          </span>\n        </div>\n        <template #item=\"{ item: [label, amount] }\">\n          {{ fNum(amount, FNumFormats.bp) }}\n          <span class=\"ml-1 text-xs capitalize text-secondary\">\n            {{ label }} {{ $t('apr') }}\n          </span>\n        </template>\n      </BalBreakdown>\n    </template>\n  </div>\n</template>\n","<script lang=\"ts\" setup>\nimport { computed } from 'vue';\nimport { useI18n } from 'vue-i18n';\n\nimport useNumbers, { FNumFormats } from '@/composables/useNumbers';\n\n/**\n * TYPES\n */\ntype Props = {\n  apr: number;\n};\n\n/**\n * PROPS & EMITS\n */\nconst props = defineProps<Props>();\n\n/**\n * COMPOSABLES\n */\nconst { fNum } = useNumbers();\nconst { t } = useI18n();\n\n/**\n * COMPUTED\n */\nconst aprLabel = computed((): string => fNum(props.apr, FNumFormats.bp));\n\nconst items = computed((): string[] => [\n  t('tooltips.veBalApr.breakdown1'),\n  t('tooltips.veBalApr.breakdown2'),\n]);\n</script>\n\n<template>\n  <div data-testid=\"vebal-apr\">\n    <BalBreakdown :items=\"items\">\n      {{ aprLabel }}\n      <span class=\"ml-1 text-xs text-secondary\">\n        {{ $t('tooltips.veBalApr.title') }}\n      </span>\n      <template #item=\"{ item }\">\n        <div class=\"text-xs text-secondary\">\n          {{ item }}\n        </div>\n      </template>\n    </BalBreakdown>\n  </div>\n</template>\n","<script lang=\"ts\" setup>\nimport { Pool } from '@/services/pool/types';\nimport { AprBreakdown } from '@balancer-labs/sdk';\nimport { getAddress } from '@ethersproject/address';\nimport { computed } from 'vue';\nimport { useI18n } from 'vue-i18n';\n\nimport useNumbers, { FNumFormats } from '@/composables/useNumbers';\nimport {\n  hasBoostedAPR,\n  isDeep,\n  isVeBalPoolAddress,\n} from '@/composables/usePoolHelpers';\nimport { useTokens } from '@/providers/tokens.provider';\n\n/**\n * TYPES\n */\ntype Props = {\n  yieldAPR: AprBreakdown['tokenAprs'];\n  pool: Pool;\n};\n\n/**\n * PROPS & EMITS\n */\nconst props = defineProps<Props>();\n\n/**\n * COMPOSABLES\n */\nconst { getToken, getTokens } = useTokens();\nconst { fNum } = useNumbers();\nconst { t } = useI18n();\n\n/**\n * COMPUTED\n */\nconst yieldAPRTokens = computed(() => {\n  return getTokens(Object.keys(props.yieldAPR.breakdown));\n});\n\nconst hasMultiRewardTokens = computed(\n  () => Object.keys(yieldAPRTokens.value).length > 1\n);\n\nconst yieldAPRLabel = computed(() => {\n  const yieldTokensList = Object.keys(props.yieldAPR.breakdown);\n\n  if (isDeep(props.pool)) return t('yieldAprRewards.apr.boosted');\n\n  if (yieldTokensList.length > 1) {\n    return t('yieldAprRewards.apr.token');\n  }\n\n  if (yieldTokensList.length === 1) {\n    if (hasBoostedAPR(yieldTokensList[0]))\n      return t('yieldAprRewards.apr.boosted');\n    if (isVeBalPoolAddress(yieldTokensList[0]))\n      return t('yieldAprRewards.apr.veBAL');\n\n    const tokenAddress = getAddress(yieldTokensList[0]);\n    const token = getToken(tokenAddress);\n\n    if (!token) {\n      return t('yieldAprRewards.apr.token');\n    }\n\n    return `${token.symbol} ${t('apr')}`;\n  }\n\n  return '';\n});\n\nconst yieldBreakdownItems = computed((): [string, number][] =>\n  Object.entries(props.yieldAPR.breakdown)\n);\n</script>\n\n<template>\n  <div data-testid=\"yield-apr\">\n    <BalBreakdown\n      :items=\"yieldBreakdownItems\"\n      :hideItems=\"!hasMultiRewardTokens\"\n    >\n      <div class=\"flex items-center\">\n        {{ fNum(yieldAPR.total, FNumFormats.bp) }}\n        <span class=\"ml-1 text-xs text-secondary\"> {{ yieldAPRLabel }} </span>\n      </div>\n      <template v-if=\"hasMultiRewardTokens\" #item=\"{ item: [address, amount] }\">\n        {{ fNum(amount, FNumFormats.bp) }}\n        <span class=\"ml-1 text-xs text-secondary\">\n          {{ yieldAPRTokens[getAddress(address)].symbol }} {{ $t('apr') }}\n        </span>\n      </template>\n    </BalBreakdown>\n  </div>\n</template>\n","<script setup lang=\"ts\">\nimport { computed } from 'vue';\n\nimport useNumbers, { FNumFormats } from '@/composables/useNumbers';\nimport { isVeBalPool, totalAprLabel } from '@/composables/usePoolHelpers';\nimport { APR_THRESHOLD } from '@/constants/pools';\nimport { bnum } from '@/lib/utils';\nimport { Pool } from '@/services/pool/types';\n\nimport StakingBreakdown from './components/StakingBreakdown.vue';\nimport VeBalBreakdown from './components/VeBalBreakdown.vue';\nimport YieldBreakdown from './components/YieldBreakdown.vue';\nimport { AprBreakdown } from '@balancer-labs/sdk';\nimport { hasStakingRewards } from '@/composables/useAPR';\n\n/**\n * TYPES\n */\ntype Props = {\n  pool: Pool;\n  poolApr?: AprBreakdown;\n};\n\n/**\n * PROPS\n */\nconst props = defineProps<Props>();\n\n/**\n * COMPOSABLES\n */\nconst { fNum } = useNumbers();\n\n/**\n * COMPUTED\n */\nconst apr = computed<AprBreakdown | undefined>(\n  () => props.pool?.apr || props.poolApr\n);\nconst validAPR = computed(\n  () => Number(apr.value?.swapFees || 0) <= APR_THRESHOLD\n);\n\nconst hasYieldAPR = computed(() => {\n  return bnum(apr.value?.tokenAprs.total || '0').gt(0);\n});\n\nconst hasVebalAPR = computed((): boolean => isVeBalPool(props.pool.id));\n\nconst totalLabel = computed((): string =>\n  apr.value ? totalAprLabel(apr.value, props.pool.boost) : '0'\n);\n</script>\n\n<template v-slot:aprCell=\"pool\">\n  <BalTooltip v-if=\"validAPR\" width=\"auto\" noPad>\n    <template #activator>\n      <div class=\"ml-1\">\n        <StarsIcon\n          v-if=\"hasYieldAPR || hasStakingRewards(apr) || hasVebalAPR\"\n          :gradFrom=\"hasVebalAPR ? 'purple' : 'yellow'\"\n          class=\"-mr-1 h-4\"\n          v-bind=\"$attrs\"\n        />\n        <BalIcon\n          v-else\n          name=\"info\"\n          size=\"sm\"\n          class=\"text-gray-400 dark:text-gray-500\"\n          v-bind=\"$attrs\"\n        />\n      </div>\n    </template>\n    <div class=\"text-sm divide-y dark:divide-gray-900\">\n      <div\n        class=\"px-3 pt-3 pb-1 bg-gray-50 dark:bg-gray-800 rounded-t\"\n        data-testid=\"total-apr\"\n      >\n        <div class=\"text-secondary\">\n          {{ $t('totalAPR') }}\n        </div>\n        <div class=\"text-lg font-bold normal-nums tracking-tighter\">\n          {{ totalLabel }}\n        </div>\n      </div>\n      <div class=\"p-3 text-left\">\n        <!-- SWAP FEE APR -->\n        <div\n          class=\"flex items-center mb-1 whitespace-nowrap\"\n          data-testid=\"swap-fee-apr\"\n        >\n          {{ fNum(apr?.swapFees || '0', FNumFormats.bp) }}\n          <span class=\"ml-1 text-xs text-secondary\">\n            {{ $t('swapFeeAPR') }}\n          </span>\n        </div>\n\n        <!-- VeBal APR -->\n        <VeBalBreakdown v-if=\"hasVebalAPR\" :apr=\"apr?.protocolApr || 0\" />\n\n        <!-- YIELD APR BREAKDOWN -->\n        <YieldBreakdown\n          v-if=\"apr?.tokenAprs && hasYieldAPR\"\n          :yieldAPR=\"apr?.tokenAprs\"\n          :pool=\"pool\"\n        />\n\n        <!-- STAKING APR BREAKDOWN -->\n        <StakingBreakdown :pool=\"pool\" :poolApr=\"apr\" />\n      </div>\n    </div>\n  </BalTooltip>\n</template>\n"],"names":["initVertBarSizes","computed","props","vertBarSizes","spacingClass","offsetClass","fNum","useNumbers","getToken","useTokens","apr","_a","boost","hasBoost","stakingAPR","isMinMaxSame","_b","minBalAPR","maxBalAPR","rewardTokensAPR","hasRewardTokens","bnum","boostedTotalAPR","hasBalEmissions","boostedStakingAPR","FNumFormats","unboostedTotalAPR","breakdownItems","items","rewardAprTokens","address","t","useI18n","aprLabel","getTokens","yieldAPRTokens","hasMultiRewardTokens","yieldAPRLabel","yieldTokensList","isDeep","hasBoostedAPR","isVeBalPoolAddress","tokenAddress","getAddress","token","yieldBreakdownItems","validAPR","APR_THRESHOLD","hasYieldAPR","hasVebalAPR","isVeBalPool","totalLabel","totalAprLabel"],"mappings":"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"}