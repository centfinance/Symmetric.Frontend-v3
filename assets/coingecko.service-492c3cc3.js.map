{"version":3,"file":"coingecko.service-492c3cc3.js","sources":["../../node_modules/date-fns/esm/fromUnixTime/index.js","../../node_modules/date-fns/esm/getTime/index.js","../../node_modules/date-fns/esm/getUnixTime/index.js","../../node_modules/date-fns/esm/startOfHour/index.js","../../src/components/_global/BalChart/BalChart.vue","../../src/services/coingecko/api/price.service.ts","../../src/services/coingecko/coingecko.client.ts","../../src/services/coingecko/coingecko.service.ts"],"sourcesContent":["import toDate from \"../toDate/index.js\";\nimport toInteger from \"../_lib/toInteger/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name fromUnixTime\n * @category Timestamp Helpers\n * @summary Create a date from a Unix timestamp.\n *\n * @description\n * Create a date from a Unix timestamp (in seconds). Decimal values will be discarded.\n *\n * @param {Number} unixTime - the given Unix timestamp (in seconds)\n * @returns {Date} the date\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // Create the date 29 February 2012 11:45:05:\n * const result = fromUnixTime(1330515905)\n * //=> Wed Feb 29 2012 11:45:05\n */\n\nexport default function fromUnixTime(dirtyUnixTime) {\n  requiredArgs(1, arguments);\n  var unixTime = toInteger(dirtyUnixTime);\n  return toDate(unixTime * 1000);\n}","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name getTime\n * @category Timestamp Helpers\n * @summary Get the milliseconds timestamp of the given date.\n *\n * @description\n * Get the milliseconds timestamp of the given date.\n *\n * @param {Date|Number} date - the given date\n * @returns {Number} the timestamp\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // Get the timestamp of 29 February 2012 11:45:05.123:\n * const result = getTime(new Date(2012, 1, 29, 11, 45, 5, 123))\n * //=> 1330515905123\n */\n\nexport default function getTime(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  var timestamp = date.getTime();\n  return timestamp;\n}","import getTime from \"../getTime/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name getUnixTime\n * @category Timestamp Helpers\n * @summary Get the seconds timestamp of the given date.\n *\n * @description\n * Get the seconds timestamp of the given date.\n *\n * @param {Date|Number} date - the given date\n * @returns {Number} the timestamp\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // Get the timestamp of 29 February 2012 11:45:05 CET:\n * const result = getUnixTime(new Date(2012, 1, 29, 11, 45, 5))\n * //=> 1330512305\n */\n\nexport default function getUnixTime(dirtyDate) {\n  requiredArgs(1, arguments);\n  return Math.floor(getTime(dirtyDate) / 1000);\n}","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name startOfHour\n * @category Hour Helpers\n * @summary Return the start of an hour for the given date.\n *\n * @description\n * Return the start of an hour for the given date.\n * The result will be in the local timezone.\n *\n * @param {Date|Number} date - the original date\n * @returns {Date} the start of an hour\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // The start of an hour for 2 September 2014 11:55:00:\n * const result = startOfHour(new Date(2014, 8, 2, 11, 55))\n * //=> Tue Sep 02 2014 11:00:00\n */\n\nexport default function startOfHour(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  date.setMinutes(0, 0, 0);\n  return date;\n}","<script setup lang=\"ts\">\nimport * as echarts from 'echarts/core';\nimport { GridOption } from 'echarts/types/dist/shared';\nimport { last } from 'lodash';\nimport { Dictionary } from 'lodash';\nimport numeral from 'numeral';\nimport ECharts from 'vue-echarts';\nimport { initEcharts } from '@/dependencies/echarts';\n\nimport useDarkMode from '@/composables/useDarkMode';\nimport useNumbers, { FNumOptions } from '@/composables/useNumbers';\nimport useTailwind from '@/composables/useTailwind';\nimport { bnum } from '@/lib/utils';\n\ninitEcharts();\n\ntype AxisMoveEvent = {\n  seriesIndex: number;\n  dataIndex: number;\n};\n\ntype ChartData = {\n  name: string;\n  values: (readonly [string, number])[];\n};\n\ntype AxisLabelFormat = {\n  xAxis?: FNumOptions;\n  yAxis?: FNumOptions;\n};\n\ntype AreaStyle = {\n  color: echarts.LinearGradientObject;\n};\n\ntype Props = {\n  data: ChartData[];\n  chartType: string;\n  onAxisMoved?: undefined | ((value: readonly [string, number]) => void);\n  isLoading?: boolean;\n  hideYAxis?: boolean;\n  hideXAxis?: boolean;\n  xAxisMinInterval?: number;\n  showHeader?: boolean;\n  needChartValue?: boolean;\n  axisLabelFormatter?: AxisLabelFormat;\n  color?: string[];\n  hoverColor?: string;\n  hoverBorderColor?: string;\n  height: number | string;\n  showLegend?: boolean;\n  legendState?: Dictionary<boolean>;\n  forceResizeTick?: number; // manually uptick this variable to force a resize calculation on the chart\n  isLastValueChipVisible?: boolean; // whether to show the little rectangle with the last value of the data\n  customGrid?: echarts.ComposeOption<GridOption>; // provide a custom grid for the chart\n  chartClass?: string; // sets the class for the chart container\n  wrapperClass?: unknown; // sets the class for the element which wraps the chart and the header\n  showTooltip?: boolean; // shows the tooltip\n  showTooltipLayer?: boolean; // hides tooltip floating layer\n  useMinMax?: boolean; // whether to constrain the y-axis based on the min and max values of the data passed in\n  areaStyle?: AreaStyle;\n};\n\nconst emit = defineEmits([\n  'periodSelected',\n  'setCurrentChartValue',\n  'mouseLeaveEvent',\n  'mouseEnterEvent',\n]);\n\nconst props = withDefaults(defineProps<Props>(), {\n  isLoading: false,\n  type: 'category',\n  hideYAxis: false,\n  hideXAxis: false,\n  showHeader: false,\n  needChartValue: false,\n  showLegend: false,\n  axisLabelFormatter: () => ({}),\n  showTooltip: true,\n  showTooltipLayer: true,\n  useMinMax: false,\n});\n\nconst chartInstance = ref<echarts.ECharts>();\nconst currentValue = ref('$0,00');\nconst change = ref(0);\nconst { fNum } = useNumbers();\nconst tailwind = useTailwind();\nconst { darkMode } = useDarkMode();\n\n// https://echarts.apache.org/en/option.html\nconst chartConfig = computed(() => ({\n  // controls the legend you see at the top\n  // formatter allows us to show the latest value for each series\n  legend: {\n    show: props.showLegend,\n    left: 0,\n    top: 0,\n    icon: 'roundRect',\n    itemHeight: 5,\n    formatter: (legendName: string) => {\n      const latestValue = last(\n        props.data.find(d => d.name === legendName)?.values as any\n      ) as [string | number, string | number];\n      return `${legendName}: ${fNum(\n        latestValue[1],\n        props.axisLabelFormatter.yAxis\n      )}`;\n    },\n    selected: props.legendState || {},\n    textStyle: {\n      color: darkMode.value\n        ? tailwind.theme.colors.gray['100']\n        : tailwind.theme.colors.gray['800'],\n    },\n    inactiveColor: darkMode.value\n      ? tailwind.theme.colors.gray['700']\n      : tailwind.theme.colors.gray['300'],\n  },\n  // controlling the display of the X-Axis\n  xAxis: {\n    type: 'time',\n    show: !props.hideXAxis,\n    axisTick: { show: false },\n    axisLine: {\n      show: false,\n    },\n    minInterval: props.xAxisMinInterval,\n    axisLabel: {\n      formatter: props.axisLabelFormatter.xAxis\n        ? value => fNum(value, props.axisLabelFormatter.xAxis)\n        : undefined,\n      color: tailwind.theme.colors.gray['400'],\n    },\n    splitArea: {\n      show: false,\n      areaStyle: {\n        color: ['rgba(250,250,250,0.3)', 'rgba(200,200,200,0.3)'],\n      },\n    },\n  },\n  // controlling the display of the Y-Axis\n  yAxis: {\n    axisLine: {\n      show: false,\n    },\n    axisTick: { show: false },\n    min: props.useMinMax ? 'dataMin' : null,\n    max: props.useMinMax ? 'dataMax' : null,\n    type: 'value',\n    show: !props.hideYAxis,\n    splitNumber: 4,\n    splitLine: {\n      show: false,\n    },\n    position: 'left',\n    axisLabel: {\n      show: !props.hideYAxis,\n      formatter: props.axisLabelFormatter.yAxis\n        ? value => fNum(value, props.axisLabelFormatter.yAxis)\n        : undefined,\n      color: tailwind.theme.colors.gray['400'],\n    },\n    nameGap: 25,\n  },\n  color: props.color,\n  // Controls the boundaries of the chart from the HTML defined rectangle\n  grid: props.customGrid || {\n    left: '2.5%',\n    right: 0,\n    top: '10%',\n    bottom: '5%',\n    containLabel: true,\n  },\n  tooltip: {\n    show: props.showTooltip,\n    showContent: props.showTooltipLayer,\n    trigger: 'axis',\n    confine: true,\n    axisPointer: {\n      type: 'shadow',\n      label: {\n        show: false,\n      },\n    },\n    backgroundColor: darkMode.value\n      ? tailwind.theme.colors.gray['800']\n      : tailwind.theme.colors.white,\n    borderColor: darkMode.value\n      ? tailwind.theme.colors.gray['900']\n      : tailwind.theme.colors.white,\n    formatter: params => {\n      return `\n            <div class='flex flex-col font-body bg-white dark:bg-gray-850 dark:text-white'>\n              <span>${params[0].value[0]}</span>\n              ${params\n                .map(\n                  param => `\n                    <span>\n                      ${param.marker} ${param.seriesName}\n                      <span class='font-semibold'>\n                        ${fNum(param.value[1], props.axisLabelFormatter.yAxis)}\n                      </span>\n                    </span>\n                  `\n                )\n                .join('')}\n            </div>\n          `;\n    },\n  },\n  series: props.data.map((d, i) => ({\n    data: d.values,\n    type: props.chartType,\n    smooth: 0.3,\n    showSymbol: false,\n    name: d.name,\n    silent: true,\n    animationEasing: function (k) {\n      return k === 1 ? 1 : 1 - Math.pow(2, -10 * k);\n    },\n    lineStyle: {\n      width: 2,\n    },\n    areaStyle: props.areaStyle,\n    itemStyle: {\n      borderRadius: 100,\n    },\n    emphasis: {\n      itemStyle: {\n        color: props.hoverColor,\n        borderColor: props.hoverBorderColor,\n      },\n    },\n    // This is a retrofitted option to show the small pill with the\n    // latest value of the series at the end of the line on the RHS\n    // the line is hidden, but the label is shown with extra styles\n    markLine: {\n      symbol: 'roundRect',\n      symbolSize: 0,\n      lineStyle: {\n        color: 'rgba(0, 0, 0, 0)',\n      },\n      precision: 5,\n      label: {\n        backgroundColor: (props.color || [])[i] || 'black',\n        borderRadius: 3,\n        padding: 4,\n        formatter: (params: any) => {\n          return fNum(params.data.yAxis, props.axisLabelFormatter.yAxis);\n        },\n        color: '#FFF',\n        fontSize: 10,\n      },\n      data: props.isLastValueChipVisible\n        ? [\n            {\n              name: 'Latest',\n              yAxis:\n                props.data[i]?.values.length > 0\n                  ? (last(props.data[i]?.values) || [])[1]\n                  : 0,\n            },\n          ]\n        : [],\n      animation: false,\n    },\n  })),\n}));\n\nconst styleOverrides = computed(() => {\n  let style: any = {};\n  if (props.height && typeof props.height === 'number') {\n    style.height = `${props.height}px`;\n  }\n  return style;\n});\n\n// sometimes the autoresize doesn't resize as often as we'd like\n// for page size changes, its own mechanism is fine however for\n// usages where we need to animate the size of the graph, it's not as\n// smooth so we can use this little tick (updated by anim tick) to resize\n// smoothly.\nwatch(\n  () => props.forceResizeTick,\n  () => {\n    if (chartInstance.value) {\n      chartInstance.value.resize();\n    }\n  }\n);\n\nfunction setCurrentValueToLatest(updateCurrentValue: boolean) {\n  const currentDayValue = numeral(\n    (props.data[0].values[props.data[0].values.length - 1] || [])[1]\n  );\n\n  if (updateCurrentValue) {\n    currentValue.value = fNum(\n      currentDayValue.value() || 0,\n      props.axisLabelFormatter.yAxis || {\n        style: 'currency',\n        currency: 'USD',\n        fixedFormat: true,\n      }\n    );\n    const currentChartValue = props.data[0].values[0];\n\n    if (currentChartValue) {\n      emit('setCurrentChartValue', {\n        chartDate: currentChartValue[0],\n        chartValue: currentChartValue[1],\n      });\n    }\n  }\n\n  const startValue = numeral((props.data[0].values[0] || [])[1]);\n  change.value =\n    ((currentDayValue.value() || 0) - (startValue.value() || 0)) /\n    (startValue.value() || 0);\n}\n\n// make sure to update the latest values when we get a fresh set of data\nwatch(\n  () => props.data,\n  () => {\n    setCurrentValueToLatest(true);\n  }\n);\n\n// make sure to update the latest values when we get a fresh set of data\n// need to do this onMount as well since the data doesn't change on mount\n// it simply is there without change so it won't trigger the watcher\nonMounted(() => {\n  setCurrentValueToLatest(true);\n});\n\n//reset the current value to latest when the user's mouse leaves the view\nfunction handleMouseLeave() {\n  setCurrentValueToLatest(true);\n  emit('mouseLeaveEvent');\n}\n\nfunction handleMouseEnter() {\n  emit('mouseEnterEvent');\n}\n\n// Triggered when hovering mouse over different xAxis points\nconst handleAxisMoved = ({ dataIndex, seriesIndex }: AxisMoveEvent) => {\n  if (!props.showHeader && !props.needChartValue) return;\n  if (props.data[seriesIndex]?.values) {\n    props.onAxisMoved &&\n      props.onAxisMoved(props.data[seriesIndex].values[dataIndex]);\n\n    const currentChartValue = props.data[seriesIndex].values[dataIndex];\n\n    emit('setCurrentChartValue', {\n      chartDate: currentChartValue[0],\n      chartValue: currentChartValue[1],\n    });\n\n    // toFixed to prevent maximumFractionalDigits error in fNum formatting.\n    // Shouldn't need more than 6 decimals because this is a USD value.\n    const value = bnum(props.data[seriesIndex].values[dataIndex][1]).toFixed(6);\n\n    currentValue.value = fNum(\n      value,\n      props.axisLabelFormatter.yAxis || {\n        style: 'currency',\n        currency: 'USD',\n        fixedFormat: true,\n      }\n    );\n\n    // if first point in chart, show overall change\n    if (dataIndex === 0) {\n      const prev = Number(props.data[seriesIndex].values[0][1]);\n      const current = props.data[seriesIndex].values[\n        props.data[seriesIndex].values.length - 1\n      ][1] as number;\n      change.value = (current - prev) / prev;\n    } else {\n      const prev = props.data[seriesIndex].values[dataIndex - 1][1] as number;\n      const current = props.data[seriesIndex].values[dataIndex][1] as number;\n      const _change = (current - prev) / prev;\n\n      // 100% increase if coming from a 0!\n      if (prev === 0 && current !== 0) {\n        change.value = 1;\n        return;\n      }\n\n      // any errors or 0 division, fall back to 0\n      if (isNaN(_change)) {\n        change.value = 0;\n        return;\n      }\n      change.value = _change;\n    }\n  }\n};\n</script>\n\n<template>\n  <BalLoadingBlock v-if=\"isLoading\" class=\"mt-16 h-96\" />\n  <div\n    v-else\n    :class=\"wrapperClass\"\n    @mouseenter=\"handleMouseEnter\"\n    @touchstart.passive=\"handleMouseEnter\"\n    @mouseleave=\"handleMouseLeave\"\n    @touchend=\"handleMouseLeave\"\n  >\n    <div v-if=\"showHeader\" id=\"lineChartHeader\" class=\"mb-4\">\n      <h3 class=\"text-xl tracking-wider text-gray-800 dark:text-gray-400\">\n        {{ currentValue }}\n      </h3>\n      <span\n        :class=\"{\n          'text-green-400': change >= 0,\n          'text-red-400': change < 0,\n          'font-medium': true,\n        }\"\n        >{{ numeral(change).format('+0.0%') }}\n      </span>\n    </div>\n    <ECharts\n      ref=\"chartInstance\"\n      :class=\"[\n        height && typeof (height === 'string') ? `h-${height}` : '',\n        'w-full',\n        chartClass,\n      ]\"\n      :option=\"chartConfig\"\n      autoresize\n      :updateOptions=\"{ replaceMerge: 'series' }\"\n      :style=\"[styleOverrides]\"\n      @update-axis-pointer=\"handleAxisMoved\"\n    />\n  </div>\n</template>\n","import { fromUnixTime, getUnixTime, startOfHour } from 'date-fns';\nimport { groupBy, invert, last } from 'lodash';\n\nimport { twentyFourHoursInSecs } from '@/composables/useTime';\nimport { TOKENS } from '@/constants/tokens';\nimport { getAddressFromPoolId } from '@/lib/utils';\nimport { retryPromiseWithDelay } from '@/lib/utils/promise';\nimport { configService as _configService } from '@/services/config/config.service';\n\nimport { CoingeckoClient } from '../coingecko.client';\nimport { CoingeckoService, getPlatformId } from '../coingecko.service';\nimport { getAddress } from '@ethersproject/address';\n\n/**\n * TYPES\n */\nexport interface HistoricalPriceResponse {\n  market_caps: number[][];\n  prices: number[][];\n  total_volumes: number[][];\n}\nexport type HistoricalPrices = { [timestamp: string]: number[] };\n\nexport class PriceService {\n  client: CoingeckoClient;\n  fiatParam: string;\n  appNetwork: string;\n  platformId: string;\n\n  constructor(\n    service: CoingeckoService,\n    private readonly configService = _configService\n  ) {\n    this.client = service.client;\n    this.fiatParam = service.supportedFiat;\n    this.appNetwork = this.configService.network.key;\n    this.platformId = getPlatformId(this.appNetwork);\n  }\n\n  async getTokensHistorical(\n    addresses: string[],\n    days: number,\n    addressesPerRequest = 1,\n    aggregateBy: 'hour' | 'day' = 'day'\n  ): Promise<HistoricalPrices> {\n    try {\n      if (addresses.length / addressesPerRequest > 10)\n        throw new Error('To many requests for rate limit.');\n\n      const now = Math.floor(Date.now() / 1000);\n      const end =\n        aggregateBy === 'hour' ? now : now - (now % twentyFourHoursInSecs);\n      const start = end - days * twentyFourHoursInSecs;\n\n      addresses = addresses\n        .map(getAddressFromPoolId)\n        .map(address => this.addressMapIn(address));\n      const requests: Promise<HistoricalPriceResponse>[] = [];\n\n      addresses.forEach(address => {\n        const endpoint = `/coins/${\n          this.platformId\n        }/contract/${address.toLowerCase()}/market_chart/range?vs_currency=${\n          this.fiatParam\n        }&from=${start}&to=${end}`;\n        const request = retryPromiseWithDelay(\n          this.client.get<HistoricalPriceResponse>(endpoint),\n          2, // retryCount\n          2000 // delayTime\n        );\n        requests.push(request);\n      });\n\n      const paginatedResults = await Promise.all(requests);\n      const results = this.parseHistoricalPrices(\n        paginatedResults,\n        addresses,\n        start,\n        aggregateBy\n      );\n      return results;\n    } catch (error) {\n      console.error('Unable to fetch token prices', addresses, error);\n      throw error;\n    }\n  }\n\n  private parseHistoricalPrices(\n    results: HistoricalPriceResponse[],\n    addresses: string[],\n    start: number,\n    aggregateBy: 'day' | 'hour' = 'day'\n  ): HistoricalPrices {\n    const assetPrices = Object.fromEntries(\n      addresses.map((address, index) => {\n        address = this.addressMapOut(address);\n        const result = results[index].prices;\n        const prices = {};\n\n        if (aggregateBy === 'hour') {\n          const pricesByHour = groupBy(result, r =>\n            getUnixTime(startOfHour(fromUnixTime(r[0] / 1000)))\n          );\n          for (const key of Object.keys(pricesByHour)) {\n            const price = (last(pricesByHour[key]) || [])[1] || 0;\n            prices[Number(key) * 1000] = price;\n          }\n        } else if (aggregateBy === 'day') {\n          for (const key in result) {\n            const [timestamp, price] = result[key];\n            prices[timestamp] = price;\n          }\n        }\n\n        return [address, prices];\n      })\n    );\n\n    const prices = {};\n    for (const asset in assetPrices) {\n      const assetPrice = assetPrices[asset];\n      for (const timestamp in assetPrice) {\n        const price = assetPrice[timestamp];\n        if (!(timestamp in prices)) {\n          prices[timestamp] = [];\n        }\n        prices[timestamp].push(price);\n      }\n    }\n    return prices;\n  }\n\n  /**\n   * Map address to mainnet address if app network is a testnet\n   */\n  public addressMapIn(address: string): string {\n    const addressMap = TOKENS?.PriceChainMap;\n    if (!addressMap) return address;\n    return getAddress(addressMap[address.toLowerCase()] || address);\n  }\n\n  /**\n   * Map mainnet address back to testnet address\n   */\n  public addressMapOut(address: string): string {\n    const addressMap = TOKENS?.PriceChainMap;\n    if (!addressMap) return address;\n    return getAddress(invert(addressMap)[address.toLowerCase()] || address);\n  }\n}\n","import axios from 'axios';\n\nexport class CoingeckoClient {\n  baseUrl: string;\n\n  constructor() {\n    this.baseUrl = 'https://api.coingecko.com/api/v3';\n  }\n\n  async get<T>(endpoint: string): Promise<T> {\n    const { data } = await axios.get(this.baseUrl + endpoint);\n    return data;\n  }\n}\n\nexport const coingeckoClient = new CoingeckoClient();\n","import { SUPPORTED_FIAT } from '@/constants/currency';\n\nimport { PriceService } from './api/price.service';\nimport { coingeckoClient } from './coingecko.client';\nimport config from '@/lib/config';\n\nexport const getNativeAssetId = (chainId: string): string => {\n  const mapping = Object.fromEntries(\n    Object.values(config).map(c => {\n      return [c.chainId.toString(), c.thirdParty.coingecko.nativeAssetId];\n    })\n  );\n\n  return mapping[chainId] || 'ethereum';\n};\n\nexport const getPlatformId = (chainId: string): string => {\n  const mapping = Object.fromEntries(\n    Object.values(config).map(c => {\n      return [c.chainId.toString(), c.thirdParty.coingecko.platformId];\n    })\n  );\n\n  return mapping[chainId] || 'ethereum';\n};\n\nexport class CoingeckoService {\n  supportedFiat: string;\n  prices: PriceService;\n\n  constructor(\n    public readonly client = coingeckoClient,\n    priceServiceClass = PriceService\n  ) {\n    this.supportedFiat = SUPPORTED_FIAT.join(',');\n    this.prices = new priceServiceClass(this);\n  }\n}\n\nexport const coingeckoService = new CoingeckoService();\n"],"names":["fromUnixTime","dirtyUnixTime","requiredArgs","unixTime","toInteger","toDate","getTime","dirtyDate","date","timestamp","getUnixTime","startOfHour","initEcharts","chartInstance","ref","currentValue","change","fNum","useNumbers","tailwind","useTailwind","darkMode","useDarkMode","chartConfig","computed","props","legendName","latestValue","last","_a","d","value","params","param","i","k","_b","styleOverrides","style","watch","setCurrentValueToLatest","updateCurrentValue","currentDayValue","numeral","currentChartValue","emit","startValue","onMounted","handleMouseLeave","handleMouseEnter","handleAxisMoved","dataIndex","seriesIndex","bnum","prev","current","_change","PriceService","service","configService","_configService","__publicField","getPlatformId","addresses","days","addressesPerRequest","aggregateBy","now","end","twentyFourHoursInSecs","start","getAddressFromPoolId","address","requests","endpoint","request","retryPromiseWithDelay","paginatedResults","error","results","assetPrices","index","result","prices","pricesByHour","groupBy","r","key","price","asset","assetPrice","addressMap","TOKENS","getAddress","invert","CoingeckoClient","data","axios","coingeckoClient","chainId","config","c","CoingeckoService","client","priceServiceClass","SUPPORTED_FIAT","coingeckoService"],"mappings":"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"}